<?xml version="1.0" encoding="UTF-8"?> <feed xmlns="http://www.w3.org/2005/Atom">
  <title>Thomas Kappler&#39;s site. Mostly programming and books. Category &#34;.Net.&#34;</title>
  <link href="http://www.thomaskappler.net/..\thomas11.github.com\categories/.Net/" rel="alternate"></link>
  <id>http://www.thomaskappler.net/..\thomas11.github.com\categories/.Net/</id>
  <updated>2020-09-20T13:01:57-07:00</updated>
  <author>
   <name>Thomas Kappler</name>
   <uri>http://www.thomaskappler.net/</uri>
  </author>
  <entry>
   <title>A short newbie guide to heap dump analysis for .Net</title>
   <link href="http://www.thomaskappler.net/2020-09-17-dotnet-heapdump-analysis.html" rel="alternate"></link>
   <updated>2020-09-17T00:00:00Z</updated>
   <id>tag:www.thomaskappler.net,2020-09-17:/2020-09-17-dotnet-heapdump-analysis.html</id>
   <summary type="html">You have a CLR (.Net) process dump and need to investigate a memory leak or a hang. What now?</summary>
   <content type="html">&lt;p&gt;This article is not meant to be comprehensive. Digging deep into heap dumps is a science and an art. This is meant to get you started, particularly if you&amp;rsquo;re new to .Net like I was not too long ago.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;First of all, how do you get a process dump? There are numerous ways, but here&amp;rsquo;s the simplest one: open Task Manager and right-click the offending process and select &amp;ldquo;Create dump file&amp;rdquo;. You can search the web for the automated ways.&lt;/p&gt;&#xA;&#xA;&lt;h2&gt;The shortcut: DebugDiag&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.microsoft.com/en-us/download/details.aspx?id=58210&#34;&gt;DebugDiag&lt;/a&gt; is a wonderful tool that runs a number of analyses for common issues on your dump and you don&amp;rsquo;t need to lift a finger or understand how it works. That&amp;rsquo;s why you should start with that. If it doesn&amp;rsquo;t expose your issue, you go on to the more manual tools.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Another neat thing about DebugDiag is that it produces a HTML report of the scans it ran and their results. This allows you to easily share findings with your team.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;It&amp;rsquo;s a standalone tool with a standard Windows installer, so just install and run. It&amp;rsquo;s pretty self-explanatory.&lt;/p&gt;&#xA;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Add your dump file with the &amp;ldquo;Add Data Files&amp;rdquo; button at the bottom.&lt;/li&gt;&#xA;&lt;li&gt;Check the analyses you want to run. When in doubt, check it.&lt;/li&gt;&#xA;&lt;li&gt;Click &amp;ldquo;Start Analysis&amp;rdquo; at the bottom.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&#xA;&lt;h2&gt;The heavy hitter: WinDbg&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/windows-hardware/drivers/debugger/debugger-download-tools&#34;&gt;WinDbg&lt;/a&gt; is a very comprehensive tool for debugging on Windows.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;There are actually two WindDbg&amp;rsquo;s - the regular one and WinDbg Preview. If you don&amp;rsquo;t know the regular one already, I recommend Preview. It has a much different and friendlier UI and will become the default at some point. I haven&amp;rsquo;t had any issues with it.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;WinDbg is a rich tool with extensive documentation. &lt;a href=&#34;https://docs.microsoft.com/en-us/windows-hardware/drivers/debugger/getting-started-with-windows-debugging&#34;&gt;https://docs.microsoft.com/en-us/windows-hardware/drivers/debugger/getting-started-with-windows-debugging&lt;/a&gt; can point you in the right direction. Stefan Geiger also has a neat &lt;a href=&#34;https://www.stefangeiger.ch/2019/05/11/windbg-cheat-sheet.html&#34;&gt;WinDbg Cheat Sheet for .NET Developers&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I&amp;rsquo;ll just throw out a few commands here that&amp;rsquo;ll help you get started and get a feel for it, and that helped me track down a tricky hang recently. If you&amp;rsquo;re lucky, they might already reveal the issue you&amp;rsquo;re debugging.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;!dumpheap -stat&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;prints something like&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;00007ff89984fd10      511        57232 System.Runtime.Caching&#xA;                                               .MemoryCacheEntry&#xA;&#xA;00007ff89f24b208    14640       351360 System.SizedReference&#xA;00007ff899850930    14640       351360 System.Runtime.Caching&#xA;                                    .MemoryCacheEqualityComparer&#xA;00007ff89984fef8    14640       351360 System.Runtime.Caching.Sref&#xA;&#xA;00007ff89984f8f0    14640       468480 System.Runtime.Caching&#xA;        .GCHandleRef`1[[System.Runtime.Caching.MemoryCacheStore,&#xA;                        System.Runtime.Caching]]&#xA;00007ff89984da50    14640       468480 System.Runtime.Caching&#xA;                                                  .UsageBucket[]&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Threads&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;!threads // show&#xA;~2s      // show details of a particular one&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;h3&gt;WinDbg extensions&lt;/h3&gt;&#xA;&#xA;&lt;p&gt;WinDbg supports extensions to load additional functionality at runtime. There are three you probably want to try: SOS is a must for debugging managed code, SOSEX and MEX provide useful helpers.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/framework/tools/sos-dll-sos-debugging-extension&#34;&gt;SOS&lt;/a&gt; &amp;ldquo;helps you debug managed programs in Visual Studio and in the Windows debugger (WinDbg.exe) by providing information about the internal Common Language Runtime (CLR) environment&amp;rdquo;. It comes with .Net but you need to load it in WinDbg:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;!load C:\Windows\Microsoft.NET\Framework64\v4.0.30319\SOS.dll)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;It provides a number of essential commands whose names are mostly self-explanatory:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;!sos.analyzeOOM&#xA;!sos.gcroot&#xA;!sos.finalizequeue&#xA;!sos.threadpool&#xA;!sos.threads&#xA;!sos.threadstate&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Next is &lt;a href=&#34;http://www.stevestechspot.com/default.aspx#a9fdcf4a4-6e09-4807-bc31-ac1adf836f6c&#34;&gt;SOSEX&lt;/a&gt;. Download and run&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;!load â€¦\sosex.dll&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;I liked the deadlock detection and the Finalizer queue analysis:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;!dlk&#xA;&#xA;!finq -stat&#xA;!finalizequeue&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Finally, you might want to try Microsoft&amp;rsquo;s &lt;a href=&#34;https://www.microsoft.com/en-us/download/details.aspx?id=53304&#34;&gt;MEX&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;MEX Debugging Extension for WinDbg can help you simplify common debugger tasks, and provides powerful text filtering capabilities to the debugger.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;!load mex.dll&#xA;!mex help&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;will get you started.&lt;/p&gt;&#xA;</content>
   <category term="Tools"></category>
   <category term=".Net"></category>
  </entry>
 </feed>