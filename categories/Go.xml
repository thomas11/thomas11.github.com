<?xml version="1.0" encoding="UTF-8"?> <feed xmlns="http://www.w3.org/2005/Atom">
  <title>Thomas Kappler&#39;s site. Mostly programming and books. Category &#34;Go.&#34;</title>
  <link href="http://www.thomaskappler.net/categories/Go/" rel="alternate"></link>
  <id>http://www.thomaskappler.net/categories/Go/</id>
  <updated>2013-05-09T12:52:16+02:00</updated>
  <author>
   <name>Thomas Kappler</name>
   <uri>http://www.thomaskappler.net/</uri>
  </author>
  <entry>
   <title>dwmstatus in Go</title>
   <link href="http://www.thomaskappler.net/2013-02-11_dwmstatus_in_go.html" rel="alternate"></link>
   <updated>2013-02-11T00:00:00Z</updated>
   <id>tag:www.thomaskappler.net,2013-02-11:/2013-02-11_dwmstatus_in_go.html</id>
   <summary type="html">I ported dwmstatus to Go, a utility to set the title of the X root window, which dwm uses to set the content of the status bar.</summary>
   <content type="html">&lt;p&gt;Recently I tried out the minimalist &lt;a href=&#34;http://dwm.suckless.org/&#34;&gt;dwm&lt;/a&gt;&#xA;window manager. I don&amp;rsquo;t know yet if I&amp;rsquo;ll stick with it, but it gave me&#xA;a nice excuse to hack a bit of Go.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Like most window managers, dwm has a status bar that can show useful&#xA;information like time and date, battery status etc. It uses a simple&#xA;and clever approach to set the contents of the status bar: it&amp;rsquo;s simply&#xA;the title of the normally invisible X root window. So all we need is a&#xA;simple utility that periodically generates a string and sets it as the&#xA;root window title.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;dwm comes with a little C program that does just that,&#xA;&lt;a href=&#34;http://dwm.suckless.org/dwmstatus/&#34;&gt;dwmstatus&lt;/a&gt;. I thought it&amp;rsquo;d be a&#xA;fun little exercise to do the same in Go, using Andrew Gallant&amp;rsquo;s&#xA;&lt;a href=&#34;http://godoc.org/github.com/BurntSushi/xgb&#34;&gt;xgb&lt;/a&gt; package. It was a&#xA;pleasure to use, works as advertised and closely follows the XGB&#xA;protocol so that all the documentation out there still applies.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The result is&#xA;&lt;a href=&#34;https://github.com/thomas11/dwmstatus&#34;&gt;github.com/thomas11/dwmstatus&lt;/a&gt;,&#xA;with a whopping 54 lines of code. That&amp;rsquo;s a lot shorter than the 128&#xA;lines of the C version, although that one also displays some default&#xA;content which mine does not. Two things stood out to me that made the&#xA;Go implementation clear and easy to write.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The &lt;code&gt;time&lt;/code&gt; package has a great API that uses channels where&#xA;appropriate. The &lt;code&gt;Tick&lt;/code&gt; function returns a channel that keeps sending&#xA;the current time in the given interval. That let&amp;rsquo;s us write the&#xA;periodic updates to the status bar like this:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;c := time.Tick(interval)&#xA;for now := range c {&#xA;    genTitle(now, &amp;amp;status)&#xA;    // ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Functions are first-class values in Go. That offers a simple and&#xA;convenient way of separating the core functionality of dwmstatus,&#xA;periodically updating the root window title, from generating the&#xA;actual status bar content, where each user might wish to show&#xA;different things. In the Go version I defined a type that&amp;rsquo;s simply a&#xA;function that, given the current time and a buffer, writes the new&#xA;status bar content into the buffer. The main entry function of&#xA;dwmstatus accepts such a function and calls it for each update,&#xA;without knowing anything about it:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;type GenTitleFunc func(now time.Time, b *bytes.Buffer)&#xA;...&#xA;// Start the process of updating the status bar. genTitle will&#xA;// be called repeatedly in the given interval.&#xA;func Run(interval time.Duration, genTitle GenTitleFunc) {&#xA;    // ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;There&amp;rsquo;s a sample implementation of &lt;code&gt;GenTitleFunc&lt;/code&gt; in dwmstatus/main.go&#xA;that I use on my Linux system to show time and date and the battery&#xA;status.&lt;/p&gt;&#xA;</content>
   <category term="Go"></category>
  </entry>
  <entry>
   <title>GDG DevFest Zurich with an intro to Go</title>
   <link href="http://www.thomaskappler.net/2012-12-10_gdg_devfest_zurich.html" rel="alternate"></link>
   <updated>2012-12-10T00:00:00Z</updated>
   <id>tag:www.thomaskappler.net,2012-12-10:/2012-12-10_gdg_devfest_zurich.html</id>
   <summary type="html">The Google Developers Group Zurich organized a great weekend of talks, hacking and networking in October. Unexpectedly, I got to present Go in an hour-long hands-on tutorial.</summary>
   <content type="html">&lt;p&gt;Before October, I had never made it to a&#xA;&lt;a href=&#34;http://www.gdgzh.ch/&#34;&gt;GDG Zurich&lt;/a&gt; event, but the&#xA;&lt;a href=&#34;https://sites.google.com/site/gdgdevfestzurich/&#34;&gt;DevFest 2012&lt;/a&gt; they&#xA;announced sounded too interesting to pass it up. I don&amp;rsquo;t want to bore&#xA;you with the minutiae of how it went down, so let me just say it was a&#xA;great and very well organized weekend. By my rough guess about 100&#xA;hackers showed up, which I found quite impressive. After casual&#xA;introductions and drinks on Friday night we spent Saturday and Sunday&#xA;in the Zurich youth hostel for talks and hacking. Big thanks to the&#xA;organizers Vadim, Michel, Corsin and Robert (see&#xA;&lt;a href=&#34;https://sites.google.com/site/gdgdevfestzurich/home/orga&#34;&gt;here&lt;/a&gt;), you&#xA;did a great job.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I really enjoyed the presentations about AppEngine by Jerome Mouton&#xA;and about the new Google Drive SDK by Nicolas Garnier. Would love to&#xA;play with these at some point.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The rest of Saturday was spent chatting and getting to know people,&#xA;until at some point I mentioned working with &lt;a href=&#34;http://golang.org/&#34;&gt;Go&lt;/a&gt;&#xA;at &lt;a href=&#34;http://nhumi.com/&#34;&gt;Nhumi&lt;/a&gt; and people got very interested. Almost&#xA;everyone had read about it, but no one had used it. There happened to&#xA;be a free slot left for a codelab on Sunday morning, so I soon found&#xA;myself with a job to do.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Since I didn&amp;rsquo;t have much time I just roughly followed the&#xA;&lt;a href=&#34;http://tour.golang.org/&#34;&gt;Tour of Go&lt;/a&gt;, skipping ahead a little&#xA;sometimes. This was a good decision as the Go devs have put a lot of&#xA;thought into its structure. In addition, I made just six&#xA;&lt;a href=&#34;https://docs.google.com/presentation/d/1ZOgBTvAoveph4NneI05dV20qn7YUbQeioaEP0D8_4uU/edit?usp=sharing&#34;&gt;slides summarizing some Go essentials from my point of view&lt;/a&gt;.&#xA;This was my &amp;ldquo;main points about Go&amp;rdquo; slide:&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Fun and productive&lt;/li&gt;&#xA;&lt;li&gt;Interfaces&lt;/li&gt;&#xA;&lt;li&gt;Different &amp;ldquo;OO&amp;rdquo;: embedded structs, methods&lt;/li&gt;&#xA;&lt;li&gt;Concurrency&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;p&gt;I gave a code example for each of the latter three points. The&#xA;audience of about 20 seemed to follow along easily and there were&#xA;plenty of questions. It was neat to respond to questions and remarks&#xA;directly by demonstrating things live in the&#xA;&lt;a href=&#34;http://play.golang.org/&#34;&gt;Go Playground&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Thanks everyone for coming, and have fun with Go!&lt;/p&gt;&#xA;</content>
   <category term="Go"></category>
   <category term="Presenting"></category>
   <category term="Meetups"></category>
  </entry>
 </feed>