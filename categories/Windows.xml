<?xml version="1.0" encoding="UTF-8"?> <feed xmlns="http://www.w3.org/2005/Atom">
  <title>Thomas Kappler&#39;s site. Mostly programming and books. Category &#34;Windows.&#34;</title>
  <link href="http://www.thomaskappler.net/..\thomas11.github.com\categories/Windows/" rel="alternate"></link>
  <id>http://www.thomaskappler.net/..\thomas11.github.com\categories/Windows/</id>
  <updated>2020-09-20T13:01:57-07:00</updated>
  <author>
   <name>Thomas Kappler</name>
   <uri>http://www.thomaskappler.net/</uri>
  </author>
  <entry>
   <title>Windows and Powershell for Unix nerds</title>
   <link href="http://www.thomaskappler.net/2020-07-25_windows_for_unix_nerds.html" rel="alternate"></link>
   <updated>2020-07-25T00:00:00Z</updated>
   <id>tag:www.thomaskappler.net,2020-07-25:/2020-07-25_windows_for_unix_nerds.html</id>
   <summary type="html">A few years ago I joined Microsoft and started to work with .Net on Windows, coming from years of only using Linux. Here are some tips I learned along the way.</summary>
   <content type="html">&lt;nav&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&#34;#toc_0&#34;&gt;Windows&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#toc_1&#34;&gt;Clipboard&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#toc_2&#34;&gt;Shortcuts&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#toc_3&#34;&gt;Tools&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#toc_4&#34;&gt;WSL&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#toc_5&#34;&gt;Ripgrep&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#toc_6&#34;&gt;Powershell&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#toc_7&#34;&gt;Basics&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#toc_8&#34;&gt;Bash commands/expressions and their equivalents&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#toc_9&#34;&gt;Iterating and querying&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#toc_10&#34;&gt;Various tidbits&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#toc_11&#34;&gt;PSDrives&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#toc_12&#34;&gt;Modules&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#toc_13&#34;&gt;Object properties&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#toc_14&#34;&gt;Pitfalls&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#toc_15&#34;&gt;VerbosePreference and other globals&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#toc_16&#34;&gt;Pretty-printing JSON&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#toc_17&#34;&gt;Null and the empty string&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&lt;/nav&gt;&#xA;&#xA;&lt;div style=&#34;padding-top: 1em&#34;&gt;&#xA;Looking back, it&#39;s funny how easily I&#39;ve settled in to the Windows world. In college, I was the guy with the Linux shirts and a crush on GNU and the FSF. (I still think both have done lots of excellent work.) Thank you, Satya, for making Microsoft that much more appealing.&#xA;&lt;/div&gt;&#xA;&#xA;&lt;h2 id=&#34;toc_0&#34;&gt;Windows&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;Honestly, after years of using Windows almost exclusively I&amp;rsquo;m still not a fan, whereas C# and Powershell have really impressed me.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Mind you, Windows works fine. I don&amp;rsquo;t think about it much. The hardware and screen resolution support is great as you&amp;rsquo;d expect. Mandatory reboots used to be bad but are much reduced now.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;It&amp;rsquo;s just too GUI-focused and full of obscure corners and inconsistencies (ok, not much different from Linux). I miss poking around internals and setting up everything the way I like and trying different window managers. Ah, Linux.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;My main actual issue is performance. (Don&amp;rsquo;t even get me started on the ads but at least you can easily turn them off.) The kernel might be ok, but anti-malware and search indexing and a dozen other processes constantly blasting away in the background take a notable toll. Search can be turned off, of course. In general, it feels a little sluggish.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;You should &lt;em&gt;not&lt;/em&gt; turn off the built-in Defender security scans. However, for developers they can be a huge pain because your project changes every time you edit and build, and the scanner scans the new files, over and over. If you feel confident that no baddies can sneak in there, you can exclude folders from the Defender scan.&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Launch &amp;ldquo;Edit Group Policy&amp;rdquo; from Start Menu&lt;/li&gt;&#xA;&lt;li&gt;Go To: Administrative Templates -&amp;gt; Windows Components -&amp;gt; Windows Defender -&amp;gt; Exclusions&lt;/li&gt;&#xA;&lt;li&gt;Double Click Path Exclusions&lt;/li&gt;&#xA;&lt;li&gt;Click enable and add your paths, then click OK, OK, OK&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;h3 id=&#34;toc_1&#34;&gt;Clipboard&lt;/h3&gt;&#xA;&#xA;&lt;p&gt;Without fail, people who watch me work ask me about this when it pops up. Clipboard history is a super power that saves you so much window switching and cognitive overhead (where was that string again?) when you&amp;rsquo;re used to it.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Windows has it built in. Hit Windows-V instead of Ctrl-V and a little window with the history pops up. Select an entry and Enter pastes it, Shift-Enter pastes it without formatting.&lt;/p&gt;&#xA;&#xA;&lt;h3 id=&#34;toc_2&#34;&gt;Shortcuts&lt;/h3&gt;&#xA;&#xA;&lt;p&gt;There are plenty, of course. The ones I use constantly are&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Windows-Tab: visual overview of open windows&lt;/li&gt;&#xA;&lt;li&gt;Alt-Tab: switch between windows&lt;/li&gt;&#xA;&lt;li&gt;Windows-Up: maximize/unmaximize window&lt;/li&gt;&#xA;&lt;li&gt;Windows-Left/Right: fit window to left/right half of the screen. This one is neat because it also pops up miniatures of other windows so you can select one to take up the other half of the screen. Just hit Esc if you don&amp;rsquo;t want to. If you do, the two windows are paired and if you make one horizontally larger, the other one shrinks accordingly.&lt;/li&gt;&#xA;&lt;li&gt;Ctrl-Windows-left/right: switch between virtual desktops. Yes, Windows has them now! On the Windows-Tab window overview you can drag and drop windows between desktops.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;h2 id=&#34;toc_3&#34;&gt;Tools&lt;/h2&gt;&#xA;&#xA;&lt;h3 id=&#34;toc_4&#34;&gt;WSL&lt;/h3&gt;&#xA;&#xA;&lt;p&gt;With version 2, the &lt;a href=&#34;https://docs.microsoft.com/en-us/windows/wsl/about&#34;&gt;Windows Subsystem for Linux&lt;/a&gt; has become a gem. It&amp;rsquo;s easy to use and powerful. I&amp;rsquo;m not that experienced with it, so I&amp;rsquo;ll leave it at that, but you should definitely install it and try it out.&lt;/p&gt;&#xA;&#xA;&lt;h3 id=&#34;toc_5&#34;&gt;Ripgrep&lt;/h3&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/BurntSushi/ripgrep&#34;&gt;&lt;strong&gt;ripgrep&lt;/strong&gt;&lt;/a&gt; is a better grep on any system, but Windows doesn&amp;rsquo;t even have grep, just the wonky &lt;code&gt;sls&lt;/code&gt;, so ripgrep becomes a must have. Easy to install with a pre-built binary.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I&amp;rsquo;ve written about &lt;a href=&#34;/2015-09-09_favorite tools_ack.html&#34;&gt;Ack&lt;/a&gt; before and how it&amp;rsquo;s better than grep. Ripgrep is similar but faster and easier to install. Try it out!&lt;/p&gt;&#xA;&#xA;&lt;h2 id=&#34;toc_6&#34;&gt;Powershell&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;Powershell is a funny beast when you&amp;rsquo;re used to Bash. Believe it or not, though, I&amp;rsquo;ve become a fan. What I love about it is that it&amp;rsquo;s more of a &amp;ldquo;real&amp;rdquo; programming environment, while still being a very usable shell.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;What makes it real programming environment?&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Pipes transport typed objects, not just strings. This alone is huge.&lt;/li&gt;&#xA;&lt;li&gt;It has more handy built-ins, like for parsing JSON.&lt;/li&gt;&#xA;&lt;li&gt;It has built-in standard ways to implement common functionality like progress bars, &lt;code&gt;-Verbose&lt;/code&gt;, &lt;code&gt;-WhatIf&lt;/code&gt;.&lt;/li&gt;&#xA;&lt;li&gt;Function arguments can be typed and can be made mandatory or optional.&lt;/li&gt;&#xA;&lt;li&gt;Seamless interoperability with .Net. Load any DLL and call its static methods, instantiate its objects (as real typed objects in the shell), or access its constants.&lt;/li&gt;&#xA;&lt;li&gt;A module system to package, load, and unload functionality.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;p&gt;By the way, just ignore the Windows command prompt (&lt;code&gt;cmd&lt;/code&gt;). It&amp;rsquo;s awful and pointless with Powershell being present by default. Sadly, it&amp;rsquo;s still used in many docs and tutorials.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Whole books have been written about Powershell, so below are simply my slighlty polished notes that I took when i learned something I wanted to remember or reference later. I hope the selection is useful to others coming from *Nix.&lt;/p&gt;&#xA;&#xA;&lt;h3 id=&#34;toc_7&#34;&gt;Basics&lt;/h3&gt;&#xA;&#xA;&lt;p&gt;If you come from *Nix, you can start by using most of the basic shell commands you know like &lt;code&gt;ls&lt;/code&gt;. Their equivalents have a different name in PS, but PS comes with pre-defined aliases mapping the nix names to the PS names.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Each Powershell function supports the &amp;ldquo;common parameters&amp;rdquo;, such as &lt;code&gt;-Verbose&lt;/code&gt;. Full docs at &lt;code&gt;help about_CommonParameters&lt;/code&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Dash-parameters can be abbreviated as long as they are unique, e.g. &lt;code&gt;-re&lt;/code&gt; for &lt;code&gt;-Recursive&lt;/code&gt;.&lt;/p&gt;&#xA;&#xA;&lt;h3 id=&#34;toc_8&#34;&gt;Bash commands/expressions and their equivalents&lt;/h3&gt;&#xA;&#xA;&lt;table&gt;&#xA;&lt;thead&gt;&#xA;&lt;tr&gt;&#xA;&lt;th&gt;Bash&lt;/th&gt;&#xA;&lt;th&gt;Powershell&lt;/th&gt;&#xA;&lt;/tr&gt;&#xA;&lt;/thead&gt;&#xA;&#xA;&lt;tbody&gt;&#xA;&lt;tr&gt;&#xA;&lt;td&gt;cat&lt;/td&gt;&#xA;&lt;td&gt;&lt;code&gt;gc&lt;/code&gt; (alias of &lt;code&gt;Get-Content&lt;/code&gt;)&lt;/td&gt;&#xA;&lt;/tr&gt;&#xA;&#xA;&lt;tr&gt;&#xA;&lt;td&gt;cut&lt;/td&gt;&#xA;&lt;td&gt;No direct equivalent, but because PS passes typed objects through pipes, it&amp;rsquo;s rarely needed. See &lt;a href=&#34;http://stackoverflow.com/questions/24634022/what-is-an-equivalent-of-nix-cut-command-in-powershell&#34;&gt;What is an equivalent of *Nix &amp;lsquo;cut&amp;rsquo; command in Powershell?&lt;/a&gt; for some options.&lt;/td&gt;&#xA;&lt;/tr&gt;&#xA;&#xA;&lt;tr&gt;&#xA;&lt;td&gt;find&lt;/td&gt;&#xA;&lt;td&gt;&lt;code&gt;gci -Recurse&lt;/code&gt; (alias of &lt;code&gt;Get-ChildItem&lt;/code&gt;)&lt;/td&gt;&#xA;&lt;/tr&gt;&#xA;&#xA;&lt;tr&gt;&#xA;&lt;td&gt;head&lt;/td&gt;&#xA;&lt;td&gt;&lt;code&gt;gc file \| select -first 10&lt;/code&gt;&lt;/td&gt;&#xA;&lt;/tr&gt;&#xA;&#xA;&lt;tr&gt;&#xA;&lt;td&gt;jq&lt;/td&gt;&#xA;&lt;td&gt;Yes, PS can do much of what jq provides out of the box. Parse the JSON first with &lt;code&gt;ConvertFrom-Json&lt;/code&gt; which gives you an object with the JSON&amp;rsquo;s structure. Then pipe that to whatever filter and transformation commands you need.&lt;/td&gt;&#xA;&lt;/tr&gt;&#xA;&#xA;&lt;tr&gt;&#xA;&lt;td&gt;M-&lt;/td&gt;&#xA;&lt;td&gt;Use &lt;code&gt;$$&lt;/code&gt; as an argument, it evaluates to the last token of the previous command.&lt;/td&gt;&#xA;&lt;/tr&gt;&#xA;&#xA;&lt;tr&gt;&#xA;&lt;td&gt;.profile&lt;/td&gt;&#xA;&lt;td&gt;The path to the equivalent file is in &lt;code&gt;$profile&lt;/code&gt;.&lt;/td&gt;&#xA;&lt;/tr&gt;&#xA;&#xA;&lt;tr&gt;&#xA;&lt;td&gt;sum&lt;/td&gt;&#xA;&lt;td&gt;&lt;code&gt;measure -sum&lt;/code&gt;&lt;/td&gt;&#xA;&lt;/tr&gt;&#xA;&#xA;&lt;tr&gt;&#xA;&lt;td&gt;tail&lt;/td&gt;&#xA;&lt;td&gt;&lt;code&gt;gc -tail 10&lt;/code&gt;&lt;/td&gt;&#xA;&lt;/tr&gt;&#xA;&#xA;&lt;tr&gt;&#xA;&lt;td&gt;time&lt;/td&gt;&#xA;&lt;td&gt;&lt;code&gt;Measure-Command&lt;/code&gt;&lt;/td&gt;&#xA;&lt;/tr&gt;&#xA;&#xA;&lt;tr&gt;&#xA;&lt;td&gt;uniq&lt;/td&gt;&#xA;&lt;td&gt;&lt;code&gt;Get-Unique&lt;/code&gt;&lt;/td&gt;&#xA;&lt;/tr&gt;&#xA;&#xA;&lt;tr&gt;&#xA;&lt;td&gt;wc -l&lt;/td&gt;&#xA;&lt;td&gt;&lt;code&gt;measure -line&lt;/code&gt;&lt;/td&gt;&#xA;&lt;/tr&gt;&#xA;&#xA;&lt;tr&gt;&#xA;&lt;td&gt;which&lt;/td&gt;&#xA;&lt;td&gt;&lt;code&gt;Get-Command&lt;/code&gt; (no alias; &lt;code&gt;gc&lt;/code&gt; is used for &lt;code&gt;Get-Content&lt;/code&gt;)&lt;/td&gt;&#xA;&lt;/tr&gt;&#xA;&#xA;&lt;tr&gt;&#xA;&lt;td&gt;&amp;amp;&amp;amp;&lt;/td&gt;&#xA;&lt;td&gt;This one is annoying since it&amp;rsquo;s verbose and modifies global state: &lt;code&gt;$ErrorActionPreference=&#39;Stop&#39;; cmd1; cmd2&lt;/code&gt;&lt;/td&gt;&#xA;&lt;/tr&gt;&#xA;&lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&#xA;&lt;h3 id=&#34;toc_9&#34;&gt;Iterating and querying&lt;/h3&gt;&#xA;&#xA;&lt;p&gt;Pipe a collection to &lt;code&gt;?&lt;/code&gt;, alias of &lt;code&gt;Where-Object&lt;/code&gt;, to filter it.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;$clusters | ? { $_.status -eq &#39;running&#39; }&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Note the automatically defined variable &lt;code&gt;$_&lt;/code&gt; representing the current object.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Similarly, pipe a collection to &lt;code&gt;%&lt;/code&gt;, alias of &lt;code&gt;ForEach-Object&lt;/code&gt;, to do something with each member.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;For the common case of iterating and selecting a property of each object, PS has a built-in shortcut: just access the property on the list. Super useful. That is, the two commands below are equivalent:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;$clusters | % { $_.status }&#xA;$clusters.status&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;h3 id=&#34;toc_10&#34;&gt;Various tidbits&lt;/h3&gt;&#xA;&#xA;&lt;p&gt;&lt;code&gt;-contains&lt;/code&gt; is for collections, &lt;code&gt;-like&lt;/code&gt; is for strings. But &lt;code&gt;.Contains()&lt;/code&gt; is often easier.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;POST or PUT the content of a file using Invoke-WebRequest: &lt;code&gt;-Body (gc file.json)&lt;/code&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Arrays:&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;$docCounts = new-object int[] $indexes.Length&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;@()&lt;/code&gt; creates a new, empty, untyped one&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;+=&lt;/code&gt; adds, but internally creates a new array, so slow&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;p&gt;Splitting strings: &lt;code&gt;&amp;quot;&amp;quot;.Split(&amp;quot;str&amp;quot;)&lt;/code&gt; splits by any character in the given string. To split by a whole string, use &lt;code&gt;-split&lt;/code&gt;. It supports limiting the result size, too: &lt;code&gt;-split &amp;quot;str&amp;quot;, 2&lt;/code&gt;.&lt;/p&gt;&#xA;&#xA;&lt;h3 id=&#34;toc_11&#34;&gt;PSDrives&lt;/h3&gt;&#xA;&#xA;&lt;p&gt;PSDrives is a file system provider similar to like Fuse.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;get-psdrive&#xA;dir alias:&#xA;dir env:&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;New-PSDrive creates a new drive mapping.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;New-PSDrive -name Foo -PSProvider FileSystem -Root c:\Demo&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;h3 id=&#34;toc_12&#34;&gt;Modules&lt;/h3&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;Get-Module  # list loaded modules&#xA;Get-Module -ListAvailable  # list all available modules&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;After loading one, see what commands it added:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;Get-Command -Module &amp;lt;module&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;h3 id=&#34;toc_13&#34;&gt;Object properties&lt;/h3&gt;&#xA;&#xA;&lt;p&gt;Usually, PS objects have more properties than the shell shows. Use &lt;code&gt;Get-Member&lt;/code&gt;, alias &lt;code&gt;gm&lt;/code&gt;, to see them. It will also show methods and events. This is my first step to inspect an object returned from somewhere.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;What if you want only one property of an object in a pipe expression? &lt;code&gt;select&lt;/code&gt; pulls it out.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;$addresses | select LastName&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;However, you&amp;rsquo;ll notice that you don&amp;rsquo;t get a string with the value of LastName, you get a new object with a single property LastName. This is so that you can &lt;code&gt;select&lt;/code&gt; multiple properties. But often, you want a single property as a scalar, e.g., to pass it on to a command that takes string input, not object. &lt;code&gt;select -ExpandProperty&lt;/code&gt; will do that:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;&amp;gt; ($StackTrace | select Length).GetType().Name&#xA;PSCustomObject&#xA;&amp;gt; ($StackTrace | select -ExpandProperty Length).GetType().Name&#xA;Int32&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;h3 id=&#34;toc_14&#34;&gt;Pitfalls&lt;/h3&gt;&#xA;&#xA;&lt;h4 id=&#34;toc_15&#34;&gt;VerbosePreference and other globals&lt;/h4&gt;&#xA;&#xA;&lt;p&gt;At some point you will use the &lt;code&gt;-Verbose&lt;/code&gt; switch but see no verbose output. Or you will not use the switch and see it. What&amp;rsquo;s happening is there&amp;rsquo;s a global variable &lt;code&gt;VerbosePreference&lt;/code&gt;, and a few other similar ones, that controls this behavior. See &lt;code&gt;help about_Preference_Variables&lt;/code&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;You have no way of knowing what it&amp;rsquo;s set to without explicitly checking. Ugh. This is a really annoying example of global state.&lt;/p&gt;&#xA;&#xA;&lt;h4 id=&#34;toc_16&#34;&gt;Pretty-printing JSON&lt;/h4&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;| ConvertFrom-Json | ConvertTo-Json -MaxDepth 20&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Note the &lt;code&gt;-MaxDepth&lt;/code&gt;: the default is only 3, meaning PS will skip all parts of the object structure that are more than three levels deep. That&amp;rsquo;s bound to omit parts of your data, leaving you wondering where the hell it is.&lt;/p&gt;&#xA;&#xA;&lt;h4 id=&#34;toc_17&#34;&gt;Null and the empty string&lt;/h4&gt;&#xA;&#xA;&lt;p&gt;Generally, null is null and the empty string is the empty string. However, when function parameters or properties are annotated with types, like &lt;code&gt;[string]&lt;/code&gt;, Powershell tries to auto-convert argument to the given type. For some strange reason, &lt;code&gt;$null&lt;/code&gt; becomes the empty string for &lt;code&gt;[string]&lt;/code&gt; parameters. See &lt;a href=&#34;https://github.com/PowerShell/PowerShell/issues/4616&#34;&gt;this issue&lt;/a&gt; for details.&#xA;You need to use &lt;code&gt;[NullString]&lt;/code&gt; to be explicit.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;$c.Nodes[0].DonorHostname = $null&#xA;$c.Nodes[0].DonorHostname -eq $null&#xA;False&#xA;$c.Nodes[0].DonorHostname -eq &#39;&#39;&#xA;True&#xA;$c.Nodes[0].DonorHostname = [NullString]::Value&#xA;$c.Nodes[0].DonorHostname -eq $null&#xA;True&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;</content>
   <category term="Windows"></category>
   <category term="Tools"></category>
  </entry>
 </feed>