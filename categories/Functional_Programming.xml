<?xml version="1.0" encoding="UTF-8"?> <feed xmlns="http://www.w3.org/2005/Atom">
  <title>Thomas Kappler&#39;s site. Mostly programming and books. Category &#34;Functional Programming.&#34;</title>
  <link href="http://www.thomaskappler.net/..\thomas11.github.com\categories/Functional_Programming/" rel="alternate"></link>
  <id>http://www.thomaskappler.net/..\thomas11.github.com\categories/Functional_Programming/</id>
  <updated>2020-09-20T13:01:57-07:00</updated>
  <author>
   <name>Thomas Kappler</name>
   <uri>http://www.thomaskappler.net/</uri>
  </author>
  <entry>
   <title>Java anonymous classes are too verbose</title>
   <link href="http://www.thomaskappler.net/2010-11-11-java_anon_classes_are_too_verbose.html" rel="alternate"></link>
   <updated>2010-11-11T00:00:00Z</updated>
   <id>tag:www.thomaskappler.net,2010-11-11:/2010-11-11-java_anon_classes_are_too_verbose.html</id>
   <summary type="html">No fun emulating closures.</summary>
   <content type="html">&lt;p&gt;Java doesn&amp;rsquo;t have first-class functions or closures, but you can&#xA;emulate some of that with anonymous classes. Alas, they are just too&#xA;cumbersome and verbose--it&amp;rsquo;s not elegant anymore if you need more LoC&#xA;than with the iterative loop.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Recently at work, I wanted to execute some code for each member of a&#xA;List, and I needed to know which iteration step I was at. A&#xA;straightforward solution is, obviously, the classic for loop:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;for (int i = 0; i &amp;lt; keyword.getSynonyms(); i++) {&#xA;    String synonym = keyword.getSynonyms().get(i);&#xA;    // do something&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;That&amp;rsquo;s fine in many cases, but it has two problems. The extra line to&#xA;get at the List element is annoying. More importantly, depending on&#xA;the List implementation the &lt;code&gt;get(i)&lt;/code&gt; operation might be in O(n),&#xA;requiring another scan of the list each time.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;So we could iterate normally and count ourselves:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;int order = 0;&#xA;for (String synonym : keyword.getSynonyms()) {&#xA;    // do something&#xA;    order++;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;It&amp;rsquo;s better, but I needed several such loops, and I wondered if I&#xA;couldn&amp;rsquo;t write all that plumbing just once. I came up with this:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;public abstract class Counting&amp;lt;T, E extends Throwable&amp;gt;&#xA;{        &#xA;    public void loop(Iterable&amp;lt;T&amp;gt; things) throws E&#xA;    {&#xA;        int step = 0;&#xA;        for (T t : things)&#xA;        {&#xA;            iteration(t, step);&#xA;            step++;&#xA;        }&#xA;    }&#xA;&#xA;    public abstract void iteration(T thing, int step) throws E;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;As the loop body can throw exceptions, and we might want to declare&#xA;the specific kind of exception, this needs to be an additional generic&#xA;type. This breaks if you need more than one exception type.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The above loop then becomes&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;new Counting&amp;lt;String, SQLException&amp;gt;()&#xA;{&#xA;    @Override public void iteration(String synonym, int step)&#xA;    throws SQLException&#xA;    {&#xA;        // do something&#xA;    }&#xA;}.loop( keyword.getSynonyms() );&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Hmmm. Even after writing an abstract class to extract the repeated&#xA;parts, and not counting my preference for opening-brace-on-new-line, I&#xA;still haven&amp;rsquo;t saved a single line. Can I have &lt;code&gt;map&lt;/code&gt; and first-class&#xA;functions, please? Time for Scala?&lt;/p&gt;&#xA;</content>
   <category term="Java"></category>
   <category term="Functional Programming"></category>
  </entry>
 </feed>