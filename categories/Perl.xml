<?xml version="1.0" encoding="UTF-8"?> <feed xmlns="http://www.w3.org/2005/Atom">
  <title>Thomas Kappler&#39;s site. Mostly programming and books. Category &#34;Perl.&#34;</title>
  <link href="http://www.thomaskappler.net/categories/Perl/" rel="alternate"></link>
  <id>http://www.thomaskappler.net/categories/Perl/</id>
  <updated>2013-06-05T07:36:23+02:00</updated>
  <author>
   <name>Thomas Kappler</name>
   <uri>http://www.thomaskappler.net/</uri>
  </author>
  <entry>
   <title>Overriding Blosxom&#39;s Time Stamping</title>
   <link href="http://www.thomaskappler.net/2011-03-20_overriding_blosxoms_mtime.html" rel="alternate"></link>
   <updated>2011-03-20T00:00:00Z</updated>
   <id>tag:www.thomaskappler.net,2011-03-20:/2011-03-20_overriding_blosxoms_mtime.html</id>
   <summary type="html">Blosxom sorts articles by the input file&#39;s mtime. Here&#39;s a patch to override that.</summary>
   <content type="html">&lt;p&gt;&lt;a href=&#34;http://blosxom.sourceforge.net/&#34;&gt;Blosxom&lt;/a&gt;, the Perl blog engine&#xA;powering this site, is amazingly flexible due to its plugin&#xA;architecture. But one aspect of its behavior is not customizable&#xA;through a plugin: it determines an article&amp;rsquo;s date by the time of the&#xA;last modification (&lt;code&gt;mtime&lt;/code&gt;) of the file containing it.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I wanted the ability to date files to arbitrary points in time, since&#xA;I sometimes write up things I did or saw long after the fact. Also, I&#xA;didn&amp;rsquo;t like that editing a published article pushes it to the front&#xA;again.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Instead, I wanted Blosxom to take an article&amp;rsquo;s date from its file&#xA;name. I follow a consistent naming scheme where each article is in a&#xA;file named &lt;code&gt;year-month-day_title&lt;/code&gt;. After parsing the date at the&#xA;beginning, we can use &lt;code&gt;DateTime&lt;/code&gt; to construct a fake &lt;code&gt;mtime&lt;/code&gt; based on&#xA;the result. If the parsing fails, we fall back to Blosxom&amp;rsquo;s standard&#xA;routine. Here&amp;rsquo;s the patch.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;--- blosxom.cgi.orig    2011-03-20 10:33:29.002204071 +0100&#xA;+++ blosxom.cgi.mtime   2011-03-20 10:41:30.718204071 +0100&#xA;@@ -404,8 +404,35 @@&#xA;                 )&#xA;             {&#xA;&#xA;+                # thomas11: save the regex matched groups in variables&#xA;+                # to preserve them from future regex matches and for&#xA;+                # readability.&#xA;+                my $path = $1;&#xA;+                my $file_basename = $2;&#xA;+&#xA;+                # thomas11: Use the date in the file name, as in&#xA;+                # 2011-03-13_title, rather than the actual file mtime. I&#xA;+                # sometimes publish articles long after writing the&#xA;+                # initial version.&#xA;+                my $mtime;&#xA;+                if ($File::Find::name =~ /(\d{4})-(\d{2})-(\d{2})_.+/) {&#xA;+                    my ($year, $month, $day) = ($1, $2, $3);&#xA;+                    use DateTime;&#xA;+                    my $dt = DateTime-&amp;gt;new(&#xA;+                        year       =&amp;gt; $year,&#xA;+                        month      =&amp;gt; $month,&#xA;+                        day        =&amp;gt; $day,&#xA;+                        hour       =&amp;gt; 0,&#xA;+                        minute     =&amp;gt; 0,&#xA;+                        second     =&amp;gt; 0,&#xA;+                        nanosecond =&amp;gt; 0,&#xA;+                        time_zone  =&amp;gt; &#39;Europe/Zurich&#39;,&#xA;+                      );&#xA;+                    $mtime = $dt-&amp;gt;epoch();&#xA;+                } else {&#xA;                 # read modification time&#xA;-                my $mtime = stat($File::Find::name)-&amp;gt;mtime or return;&#xA;+                    $mtime = stat($File::Find::name)-&amp;gt;mtime or return;&#xA;+                }&#xA;&#xA;                 # to show or not to show future entries&#xA;                 return unless ( $show_future_entries or $mtime &amp;lt; time );&#xA;@@ -415,15 +442,15 @@&#xA;&#xA;                 # static rendering bits&#xA;                 my $static_file&#xA;-                    = &amp;quot;$static_dir/$1/index.&amp;quot; . $static_flavours[0];&#xA;+                    = &amp;quot;$static_dir/$path/index.&amp;quot; . $static_flavours[0];&#xA;                 if (   param(&#39;-all&#39;)&#xA;                     or !-f $static_file&#xA;                     or stat($static_file)-&amp;gt;mtime &amp;lt; $mtime )&#xA;                 {&#xA;-                    $indexes{$1} = 1;&#xA;+                    $indexes{$path} = 1;&#xA;                     $d = join( &#39;/&#39;, ( nice_date($mtime) )[ 5, 2, 3 ] );&#xA;                     $indexes{$d} = $d;&#xA;-                    $indexes{ ( $1 ? &amp;quot;$1/&amp;quot; : &#39;&#39; ) . &amp;quot;$2.$file_extension&amp;quot; } = 1&#xA;+                    $indexes{ ( $path ? &amp;quot;$path/&amp;quot; : &#39;&#39; ) . &amp;quot;$file_basename.$file_extension&amp;quot; } = 1&#xA;                         if $static_entries;&#xA;                 }&#xA;             }&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;</content>
   <category term="Perl"></category>
  </entry>
  <entry>
   <title>How to serve a static directory with Plack</title>
   <link href="http://www.thomaskappler.net/2011-02-13_plack_static_howto.html" rel="alternate"></link>
   <updated>2011-02-13T00:00:00Z</updated>
   <id>tag:www.thomaskappler.net,2011-02-13:/2011-02-13_plack_static_howto.html</id>
   <summary type="html">From directory to http://localhost:5001/page.html as simply as possible.</summary>
   <content type="html">&lt;p&gt;You have a directory containing HTML files and would like to browse it&#xA;locally. There are absolute links like &lt;code&gt;/static/site.css&lt;/code&gt; in the HTML,&#xA;so just opening index.html would break those links.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Perl&amp;rsquo;s recent web superstar module &lt;a href=&#34;http://plackperl.org/&#34;&gt;Plack&lt;/a&gt; can&#xA;do it easily.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Create a file named &lt;code&gt;plack.psgi&lt;/code&gt; with the following content:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;#!/usr/bin/env perl&#xA;&#xA;use Plack::App::File;&#xA;&#xA;my $root = &amp;quot;/path/to/dir;&#xA;my $app = Plack::App::File-&amp;gt;new(root =&amp;gt; $root)-&amp;gt;to_app;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Then launch the &lt;code&gt;plackup&lt;/code&gt; utility by &lt;code&gt;plackup -a plack.psgi --port&#xA;5001&lt;/code&gt;&amp;ndash;that&amp;rsquo;s it!&lt;/p&gt;&#xA;</content>
   <category term="Perl"></category>
   <category term="Nitty Gritty"></category>
  </entry>
  <entry>
   <title>Watching some YAPC::EU 2010 presentations</title>
   <link href="http://www.thomaskappler.net/2010-09-20-yapceu_talks.html" rel="alternate"></link>
   <updated>2010-09-20T00:00:00Z</updated>
   <id>tag:www.thomaskappler.net,2010-09-20:/2010-09-20-yapceu_talks.html</id>
   <summary type="html">Where Plack is the new black. And recording talks is difficult.</summary>
   <content type="html">&lt;p&gt;In August, Perl mongers gathered in Pisa for the annual&#xA;&lt;a href=&#34;http://conferences.yapceurope.org/ye2010/&#34;&gt;YAPC::EU&lt;/a&gt;, one of the&#xA;biggest Perl meetings. I couldn&amp;rsquo;t make it there, but at least I&#xA;finally got to check out the&#xA;&lt;a href=&#34;http://www.youtube.com/user/yapceu2010&#34;&gt;presentation recordings&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Unfortunately, the recordings are pretty bad, for the most part. The&#xA;speakers are hard or impossible to hear, and worse, the slides are&#xA;unreadable. For technical presentations with code, that&amp;rsquo;s a&#xA;dealbreaker. I know one doesn&amp;rsquo;t complain about volunteer efforts,&#xA;especially when one cannot make a reasonable suggestion for&#xA;improvement. So all I want to say is that it would be great if the&#xA;organizers of next year&amp;rsquo;s YAPC::EU could improve on that.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;But then, it just means I gotta go myself next time. It&amp;rsquo;s a community&#xA;event, after all.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Anyway, I still made some notes on what I saw. Here are the&#xA;interesting bits.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Leon Timmerman presented&#xA;&lt;a href=&#34;http://www.youtube.com/watch?v=DKo4PUKuZ8I&#34;&gt;&lt;em&gt;An alternative to XS&lt;/em&gt;&lt;/a&gt;. He&#xA;said that while XS is flexible and mature, it&amp;rsquo;s yet another new&#xA;language to learn and it&amp;rsquo;s not trivial. Instead, Leon is working on&#xA;using C++ templates to do the same job. Let&amp;rsquo;s see how that works out.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Dave Rolsky showed off&#xA;&lt;a href=&#34;http://www.youtube.com/user/yapceu2010#g/c/6546F3721A196286&#34;&gt;&lt;em&gt;Fey and Fey::ORM&lt;/em&gt;&lt;/a&gt;. It&amp;rsquo;s&#xA;too bad I couldn&amp;rsquo;t really follow his talk nor see any of the slides,&#xA;because I&amp;rsquo;m having a really hard time with the ORMs I&amp;rsquo;ve seen and I&#xA;was wondering if I&amp;rsquo;m just too dumb. In his introduction Dave says that&#xA;the same happened to him, so he wrote Fey as a different kind of&#xA;ORM. I might be grossly misrepresenting, from memory, what he actually&#xA;said. I will keep Fey on the radar.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Aaron Crane&amp;rsquo;s&#xA;&lt;a href=&#34;http://www.youtube.com/user/yapceu2010#grid/user/348D7F53EB2BBDCA&#34;&gt;&lt;em&gt;Perl on Speed: Multicore Programming for Mortals&lt;/em&gt;&lt;/a&gt;&#xA;has clear audio, but no slides. Aaron prefers processes over&#xA;threads. It&amp;rsquo;s easier, the OS does advanced scheduling for you, and not&#xA;having shared memory forces you to write a clear architecture with&#xA;data being passed at clear boundaries. Processes are cheap on Linux&#xA;anyway. However, I wonder to what extent that preference for processes&#xA;is due to&#xA;&lt;a href=&#34;http://perldoc.perl.org/perlthrtut.html#Performance-considerations&#34;&gt;Perl&amp;rsquo;s less-than-optimal thread implementation&lt;/a&gt;. Erlang&#xA;processes are super cheap and work great into the thousands, per core.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;SawyerX presented&#xA;&lt;a href=&#34;http://www.youtube.com/user/yapceu2010#g/c/6C2680AF9864471D&#34;&gt;&lt;em&gt;When Perl Met Android&lt;/em&gt;&lt;/a&gt;,&#xA;which I found really interesting. I didn&amp;rsquo;t know about SL4A, the&#xA;Scripting Layer for Android. It runs an RPC server that speaks JSON,&#xA;so different languages can easily interface with it. I only watched&#xA;the first half of Sawyer&amp;rsquo;s talk as the second half consists of code&#xA;samples that you can&amp;rsquo;t see in the recording. But it was good to learn&#xA;that Android.pm supports almost all of the Android API: dialogs,&#xA;sensors, GPS, text-to-speech, etc. It also supports daemons. Someone&#xA;got Plack to run&amp;mdash;local web apps!&lt;/p&gt;&#xA;&#xA;&lt;p&gt;And the price for the funniest announcement goes to Dave Cross for&#xA;Perl Vogue. &amp;ldquo;Is Plack the new Black?&amp;rdquo; Dave&#xA;&lt;a href=&#34;http://www.youtube.com/watch?v=Ykc4p6CeCuY&#34;&gt;announced&lt;/a&gt;&#xA;&lt;a href=&#34;http://www.perlvogue.com&#34;&gt;www.perlvogue.com&lt;/a&gt;, where Perl fashionistas&#xA;check out the latest trends.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Wow, amazing how many presentations you can watch when you stop two&#xA;minutes in for most of them :-)&lt;/p&gt;&#xA;</content>
   <category term="Perl"></category>
  </entry>
  <entry>
   <title>Presenting &#34;Practical RDF in Perl&#34; at FrOSCamp Zurich</title>
   <link href="http://www.thomaskappler.net/2010-09-17-froscamp_zurich.html" rel="alternate"></link>
   <updated>2010-09-17T00:00:00Z</updated>
   <id>tag:www.thomaskappler.net,2010-09-17:/2010-09-17-froscamp_zurich.html</id>
   <summary type="html">Presenting &#34;Practical RDF in Perl&#34;, hanging out at the Perl booth and drinking free-as-in-freedom beer at the Free and Open Source Camp in Zurich, a fun little meeting. Plus a somewhat critical self-review of my talk.</summary>
   <content type="html">&lt;p&gt;So, another one of those belated meeting/event reports: on 2010-09-17,&#xA;I was in Zurich for the first-ever&#xA;&lt;a href=&#34;http://wiki.froscamp.org/Welcome&#34;&gt;FrOSCamp&lt;/a&gt;. It was an Open&#xA;Source/Free Software event with an exhibition floor, talks, and &amp;ldquo;a&#xA;fancy party with creative commons licensed beer and music&amp;rdquo;&amp;mdash;what&amp;rsquo;s&#xA;not to like!&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I presented my &amp;ldquo;Praktisches RDF in Perl&amp;rdquo; talk that I recycled from the&#xA;&lt;a href=&#34;https://jugglingbits.wordpress.com/2010/06/20/semantic-hacking-rdf-in-perl-presentation/&#34;&gt;German Perl Workshop&lt;/a&gt;,&#xA;to spread the word some more. This time, I had prepared an English&#xA;version, but as I only had German speakers in the audience, I&#xA;presented in German.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Unfortunately my presentation only drew a handful of people this&#xA;time. Note to self: work on the abstract some more. I had suspected&#xA;that my FrOSCamp one was wordy and not catchy, but didn&amp;rsquo;t get around&#xA;to rewriting it. At least the audience were pretty engaged and asked&#xA;lots of questions, which I prefer to a larger crowd that&amp;rsquo;s half&#xA;asleep.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The presentation was recorded and is now&#xA;&lt;a href=&#34;http://www.multimedia.ethz.ch/conferences/2010/froscamp/?doi=10.3930/ETHZ/AV-13ff192d-43b9-4628-9ff4-6e4f69f2e01f&#34;&gt;online as slides+audio&lt;/a&gt;. This&#xA;was a first for me. I could forget about it while presenting, but I&#xA;was pretty nervous listening to it for the first time, not sure what&#xA;mess of incoherent rambling and half-finished sentences to&#xA;expect. Fortunately, I found it ok in the end. Of course, I found&#xA;several things to improve, but I guess that&amp;rsquo;s expected for someone who&#xA;doesn&amp;rsquo;t present often and is just getting started. My list of the main&#xA;points to improve is:&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;The introduction should be much shorter and more focussed. A bit&#xA;like a sales pitch, not as in being obnoxious and fake, but as in&#xA;focussed on getting the audience&amp;rsquo;s attention and appreciation for&#xA;the topic.&lt;/li&gt;&#xA;&lt;li&gt;Too many sentences didn&amp;rsquo;t flow properly. Simply doing one or two&#xA;more dry runs should fix that.&lt;/li&gt;&#xA;&lt;li&gt;Have some more visualizations such as diagrams on the slides.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;p&gt;On the other hand, I was pleased with a few things about my&#xA;presentation: the style of having little text on the slides and more&#xA;verbal explanation worked well, the code samples seemed to be the&#xA;right size to digest during a talk, and the questions at the end&#xA;showed that people had gotten the key points.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Before my presentation, I got to see&#xA;&lt;a href=&#34;http://www.renee-baecker.de/&#34;&gt;Renee Baecker&lt;/a&gt;&amp;rsquo;s talk about&#xA;&lt;a href=&#34;http://search.cpan.org/perldoc?Perl::Critic&#34;&gt;Perl::Critic&lt;/a&gt;. I&amp;rsquo;m using&#xA;it on my code and thus knew the basics, but I appreciated the advanced&#xA;example towards the end, where Renee walked us through writing our own&#xA;critic rules. This works via&#xA;&lt;a href=&#34;http://search.cpan.org/perldoc?PPI&#34;&gt;PPI&lt;/a&gt;, so you can find patterns in&#xA;the AST that match the constructs you want to check. I also found it&#xA;interesting to hear Renee&amp;rsquo;s personal experience with the severity&#xA;levels: he&amp;rsquo;s typically on 3, sometimes 2, but 1 is too harsh.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Other than that, I was mainly hanging out at the Perl booth, a first&#xA;for me! The booth was staffed by Renee and Roman from Winterthur (CH),&#xA;two really nice guys whom I had a great time with, discussing&#xA;everything from Perl modules to freelancing.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;BTW, remember the blurb from the FrOSCamp website I quoted at the top&#xA;about creative commons licensed beer?&#xA;&lt;a href=&#34;http://www.freebeer.ch/&#34;&gt;That wasn&amp;rsquo;t a joke&lt;/a&gt;. FreeBeer is an organic&#xA;beer, produced by an independent brewery near Zurich, and the recipe&#xA;is online under a CC license. And it tastes great! A cloudy, full&#xA;blonde just how I like it :-)&lt;/p&gt;&#xA;</content>
   <category term="Perl"></category>
   <category term="Presenting"></category>
   <category term="SemanticWeb"></category>
  </entry>
 </feed>