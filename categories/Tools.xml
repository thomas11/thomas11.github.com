<?xml version="1.0" encoding="UTF-8"?> <feed xmlns="http://www.w3.org/2005/Atom">
  <title>Thomas Kappler&#39;s site. Mostly programming and books. Category &#34;Tools.&#34;</title>
  <link href="http://www.thomaskappler.net/categories/Tools/" rel="alternate"></link>
  <id>http://www.thomaskappler.net/categories/Tools/</id>
  <updated>2017-02-25T12:13:18-08:00</updated>
  <author>
   <name>Thomas Kappler</name>
   <uri>http://www.thomaskappler.net/</uri>
  </author>
  <entry>
   <title>Ack is awesome</title>
   <link href="http://www.thomaskappler.net/2015-09-09_favorite tools_ack.html" rel="alternate"></link>
   <updated>2015-09-09T00:00:00Z</updated>
   <id>tag:www.thomaskappler.net,2015-09-09:/2015-09-09_favorite tools_ack.html</id>
   <summary type="html">The grep replacement ack is an invaluable part of my toolbox. I&#39;ll explain why and show some examples and some tipps.</summary>
   <content type="html">&lt;p&gt;This is the second time I highlight &lt;a href=&#34;http://petdance.com/&#34;&gt;Andy Lester&amp;rsquo;s&lt;/a&gt; work&#xA;on my blog. Back in 2013 I reviewed his book&#xA;&lt;a href=&#34;2015-09-09_favorite tools_ack.html&#34;&gt;Land the Tech Job You Love&lt;/a&gt; which is my&#xA;favorite tech career guide. Now I want to highlight his open-source tool&#xA;&lt;a href=&#34;http://beyondgrep.com/&#34;&gt;ack&lt;/a&gt; which is &amp;ldquo;a tool like grep, optimized for&#xA;programmers&amp;rdquo;. I use it every day and I have observed many times that people who&#xA;don&amp;rsquo;t use it are slower at tasks that require locating files.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The ack website has a page&#xA;&lt;a href=&#34;http://beyondgrep.com/why-ack/&#34;&gt;&amp;ldquo;Top 10 reasons to use ack for source code&amp;rdquo;&lt;/a&gt;&#xA;which I don&amp;rsquo;t want to repeat here. All of these reasons are true in my&#xA;experience. I&amp;rsquo;ll just go through my personal main reasons to use ack.&lt;/p&gt;&#xA;&#xA;&lt;h3&gt;It&amp;rsquo;s easy to search only the right files&lt;/h3&gt;&#xA;&#xA;&lt;p&gt;Grep can search in explicitly listed files, or in all files in a directory&#xA;tree. Ack can search in files &lt;em&gt;of certain types&lt;/em&gt; under a directory tree.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I used to do &lt;code&gt;find . -name &amp;quot;*.xml&amp;quot; -exec grep -H foo &#39;{}&#39; \;&lt;/code&gt;. I guess &lt;code&gt;grep foo&#xA;$(find ...)&lt;/code&gt; would have been a bit easier, I learned this later.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Now I just do &lt;code&gt;ack --xml foo&lt;/code&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;And it&amp;rsquo;s even better than the find version because it doesn&amp;rsquo;t search in &lt;code&gt;.git&lt;/code&gt;&#xA;and similar directories. This unclutters the output and makes it run&#xA;faster. Perl&amp;rsquo;s optimized regex engine is pretty fast anyways.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;For every file type &lt;code&gt;--foo&lt;/code&gt; you can also request &lt;code&gt;--nofoo&lt;/code&gt; to exclude it.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;For certain types such as &lt;code&gt;--shell&lt;/code&gt; ack will even check the shebang line of&#xA;files that don&amp;rsquo;t have an extension.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;What&amp;rsquo;s more, while there are many predefined file types, you can define your&#xA;own, and they are not limited to a single extension.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;You can also use this functionality to simple list all files of a type, for&#xA;example to pipe them into another command. Simply add &lt;code&gt;-f&lt;/code&gt;: &lt;code&gt;ack -f --java&#xA;--xml&lt;/code&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;If you&amp;rsquo;d like to only consider files in subdirectories matching a certain&#xA;pattern, ack has you covered as well. &lt;code&gt;ack -g &#39;src/main&#39;&lt;/code&gt; searches only in&#xA;src/main folders.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;These are just the main ways to tell ack which files you&amp;rsquo;re interested&#xA;in. Combined, they save me a lot of time when locating files.&lt;/p&gt;&#xA;&#xA;&lt;h3&gt;Java example&lt;/h3&gt;&#xA;&#xA;&lt;p&gt;I mainly work in Java these days. My project root has a bunch of Maven modules&#xA;in it, each in its own subdirectory. Inside each of those is a &lt;code&gt;src/main&lt;/code&gt;, a&#xA;&lt;code&gt;src/test&lt;/code&gt;, and a &lt;code&gt;target&lt;/code&gt; folder for build artefacts.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;First, I don&amp;rsquo;t want to grep through the build artefacts ever. So I added&#xA;&lt;code&gt;--ignore-dir=target&lt;/code&gt; to my &lt;code&gt;.ackrc&lt;/code&gt;. I also want to ignore IntelliJ&amp;rsquo;s internal&#xA;project files, ending in .iml, which I ignore with &lt;code&gt;--ignore-file=match:\.iml$&lt;/code&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Second, I tend to search a limited number of sets of files. Usually it&amp;rsquo;s either&#xA;all files, or only Java files, or only XML files (Spring configuration). And&#xA;sometimes I want to search either of those only in main code, or only in test&#xA;code. I addressed this with a number of bash aliases that allow me to do all&#xA;that in two or three keystrokes. (Yes, IntelliJ can do this as well, but I have&#xA;other issues with it, and for many tasks the command line is superior.)&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;alias aj=&#39;ack --java&#39;&#xA;alias am=&#39;ack -v -g &#39;\&#39;&#39;src/test&#39;\&#39;&#39; | ack -x&#39;&#xA;alias ajm=&#39;ack --java -v -g &#39;\&#39;&#39;src/test&#39;\&#39;&#39; | ack -x&#39;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;The first one searches only Java files, the second one ignores src/test, and the&#xA;third one combines those two. The aliases for XML and src/test are equivalent. I&#xA;don&amp;rsquo;t use &lt;code&gt;-g src/main&lt;/code&gt; for non-test code, but &lt;code&gt;-v -g src/test&lt;/code&gt; which means&#xA;&amp;ldquo;everything but src/test`. That way it also searches top-level files that are&#xA;neither in main nor in test.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;So, for example, &lt;code&gt;axm FooFactory&lt;/code&gt; gives me all occurrences of FooFactory in XML&#xA;and related files, in src/main of any Maven module.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;We do need a small clutch here because ack can only either select files by path&#xA;(&lt;code&gt;-g&lt;/code&gt;), or search in files, but not both together. So we invoke it twice, once&#xA;to select the files and once to search in them.&lt;/p&gt;&#xA;&#xA;&lt;h3&gt;It&amp;rsquo;s fast and ergonomic&lt;/h3&gt;&#xA;&#xA;&lt;p&gt;The ack website already lists this: ack is fast. But I&amp;rsquo;d like to emphasize that&#xA;it&amp;rsquo;s fast not just in terms of runtime, but in interaction time. Instead of&#xA;typing &amp;ldquo;grep -R&amp;rdquo; you type &amp;ldquo;ack&amp;rdquo;, many times a day. And with its ways of&#xA;narrowing down the search as shown above, it obsoletes a whole bunch of piped&#xA;shell expressions involving &lt;code&gt;find&lt;/code&gt; and friends. I simply get to hit return&#xA;sooner, saving time and mental effort.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Another point that doesn&amp;rsquo;t immediately seem related to speed is ack&amp;rsquo;s formatting&#xA;of its output. When piped to another process, it&amp;rsquo;s mostly like grep&amp;rsquo;s. But when&#xA;ack writes to the console, it formats for readability, intelligently using line&#xA;breaks, colors, and highlighting. That makes it faster for me to scan the&#xA;results of my search.&lt;/p&gt;&#xA;&#xA;&lt;h3&gt;(Almost) great documentation&lt;/h3&gt;&#xA;&#xA;&lt;p&gt;ack&amp;rsquo;s documentation is great, which allows everyone to get the most out of&#xA;it. The &amp;ldquo;almost&amp;rdquo; is because it&amp;rsquo;s a bit scattered. There&amp;rsquo;s &lt;code&gt;ack --help&lt;/code&gt; which&#xA;lists the main options, useful as a quick reference. Then there&amp;rsquo;s the man page,&#xA;also available via &lt;code&gt;ack --man&lt;/code&gt; (useful on Windows). That distinction makes&#xA;sense, but there&amp;rsquo;s a third place, the full documentation on the ack&#xA;website. That&amp;rsquo;s something to be aware of when looking for info. It helps,&#xA;though, that Stackoverflow has a large number of ack questions, many answered by&#xA;Andy himself.&lt;/p&gt;&#xA;&#xA;&lt;h3&gt;It&amp;rsquo;s mostly like grep&lt;/h3&gt;&#xA;&#xA;&lt;p&gt;ack mostly uses the same flags than grep, and it behaves like grep. So all the&#xA;flags you&amp;rsquo;re used to, like &lt;code&gt;-i&lt;/code&gt; and &lt;code&gt;-v&lt;/code&gt;, are there. I never had an issue&#xA;switching between the two.&lt;/p&gt;&#xA;&#xA;&lt;h3&gt;Conclusion&lt;/h3&gt;&#xA;&#xA;&lt;p&gt;ack is one of those tools that may not sound all that impressive at first. After&#xA;all, it&amp;rsquo;s a glorified grep. But, in my experience, with ack the sum is greater&#xA;than its parts. The different improvements over grep work together and&#xA;accumulate to make a significant difference. I think and type less than with&#xA;grep and have more brainpower available for my actual task.&lt;/p&gt;&#xA;</content>
   <category term="Tools"></category>
  </entry>
  <entry>
   <title>How to serve a static directory with Plack</title>
   <link href="http://www.thomaskappler.net/2011-02-13_plack_static_howto.html" rel="alternate"></link>
   <updated>2011-02-13T00:00:00Z</updated>
   <id>tag:www.thomaskappler.net,2011-02-13:/2011-02-13_plack_static_howto.html</id>
   <summary type="html">From directory to http://localhost:5001/page.html as simply as possible.</summary>
   <content type="html">&lt;p&gt;You have a directory containing HTML files and would like to browse it&#xA;locally. There are absolute links like &lt;code&gt;/static/site.css&lt;/code&gt; in the HTML,&#xA;so just opening index.html would break those links.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Perl&amp;rsquo;s recent web superstar module &lt;a href=&#34;http://plackperl.org/&#34;&gt;Plack&lt;/a&gt; can&#xA;do it easily.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Create a file named &lt;code&gt;plack.psgi&lt;/code&gt; with the following content:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;#!/usr/bin/env perl&#xA;&#xA;use Plack::App::File;&#xA;&#xA;my $root = &amp;quot;/path/to/dir;&#xA;my $app = Plack::App::File-&amp;gt;new(root =&amp;gt; $root)-&amp;gt;to_app;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Then launch the &lt;code&gt;plackup&lt;/code&gt; utility by &lt;code&gt;plackup -a plack.psgi --port&#xA;5001&lt;/code&gt;--that&amp;rsquo;s it!&lt;/p&gt;&#xA;</content>
   <category term="Perl"></category>
   <category term="Tools"></category>
  </entry>
 </feed>