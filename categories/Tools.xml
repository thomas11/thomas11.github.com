<?xml version="1.0" encoding="UTF-8"?> <feed xmlns="http://www.w3.org/2005/Atom">
  <title>Thomas Kappler&#39;s site. Mostly programming and books. Category &#34;Tools.&#34;</title>
  <link href="http://www.thomaskappler.net/..\thomas11.github.com\categories/Tools/" rel="alternate"></link>
  <id>http://www.thomaskappler.net/..\thomas11.github.com\categories/Tools/</id>
  <updated>2020-09-20T13:01:57-07:00</updated>
  <author>
   <name>Thomas Kappler</name>
   <uri>http://www.thomaskappler.net/</uri>
  </author>
  <entry>
   <title>A short newbie guide to heap dump analysis for .Net</title>
   <link href="http://www.thomaskappler.net/2020-09-17-dotnet-heapdump-analysis.html" rel="alternate"></link>
   <updated>2020-09-17T00:00:00Z</updated>
   <id>tag:www.thomaskappler.net,2020-09-17:/2020-09-17-dotnet-heapdump-analysis.html</id>
   <summary type="html">You have a CLR (.Net) process dump and need to investigate a memory leak or a hang. What now?</summary>
   <content type="html">&lt;p&gt;This article is not meant to be comprehensive. Digging deep into heap dumps is a science and an art. This is meant to get you started, particularly if you&amp;rsquo;re new to .Net like I was not too long ago.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;First of all, how do you get a process dump? There are numerous ways, but here&amp;rsquo;s the simplest one: open Task Manager and right-click the offending process and select &amp;ldquo;Create dump file&amp;rdquo;. You can search the web for the automated ways.&lt;/p&gt;&#xA;&#xA;&lt;h2&gt;The shortcut: DebugDiag&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.microsoft.com/en-us/download/details.aspx?id=58210&#34;&gt;DebugDiag&lt;/a&gt; is a wonderful tool that runs a number of analyses for common issues on your dump and you don&amp;rsquo;t need to lift a finger or understand how it works. That&amp;rsquo;s why you should start with that. If it doesn&amp;rsquo;t expose your issue, you go on to the more manual tools.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Another neat thing about DebugDiag is that it produces a HTML report of the scans it ran and their results. This allows you to easily share findings with your team.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;It&amp;rsquo;s a standalone tool with a standard Windows installer, so just install and run. It&amp;rsquo;s pretty self-explanatory.&lt;/p&gt;&#xA;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Add your dump file with the &amp;ldquo;Add Data Files&amp;rdquo; button at the bottom.&lt;/li&gt;&#xA;&lt;li&gt;Check the analyses you want to run. When in doubt, check it.&lt;/li&gt;&#xA;&lt;li&gt;Click &amp;ldquo;Start Analysis&amp;rdquo; at the bottom.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&#xA;&lt;h2&gt;The heavy hitter: WinDbg&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/windows-hardware/drivers/debugger/debugger-download-tools&#34;&gt;WinDbg&lt;/a&gt; is a very comprehensive tool for debugging on Windows.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;There are actually two WindDbg&amp;rsquo;s - the regular one and WinDbg Preview. If you don&amp;rsquo;t know the regular one already, I recommend Preview. It has a much different and friendlier UI and will become the default at some point. I haven&amp;rsquo;t had any issues with it.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;WinDbg is a rich tool with extensive documentation. &lt;a href=&#34;https://docs.microsoft.com/en-us/windows-hardware/drivers/debugger/getting-started-with-windows-debugging&#34;&gt;https://docs.microsoft.com/en-us/windows-hardware/drivers/debugger/getting-started-with-windows-debugging&lt;/a&gt; can point you in the right direction. Stefan Geiger also has a neat &lt;a href=&#34;https://www.stefangeiger.ch/2019/05/11/windbg-cheat-sheet.html&#34;&gt;WinDbg Cheat Sheet for .NET Developers&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I&amp;rsquo;ll just throw out a few commands here that&amp;rsquo;ll help you get started and get a feel for it, and that helped me track down a tricky hang recently. If you&amp;rsquo;re lucky, they might already reveal the issue you&amp;rsquo;re debugging.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;!dumpheap -stat&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;prints something like&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;00007ff89984fd10      511        57232 System.Runtime.Caching&#xA;                                               .MemoryCacheEntry&#xA;&#xA;00007ff89f24b208    14640       351360 System.SizedReference&#xA;00007ff899850930    14640       351360 System.Runtime.Caching&#xA;                                    .MemoryCacheEqualityComparer&#xA;00007ff89984fef8    14640       351360 System.Runtime.Caching.Sref&#xA;&#xA;00007ff89984f8f0    14640       468480 System.Runtime.Caching&#xA;        .GCHandleRef`1[[System.Runtime.Caching.MemoryCacheStore,&#xA;                        System.Runtime.Caching]]&#xA;00007ff89984da50    14640       468480 System.Runtime.Caching&#xA;                                                  .UsageBucket[]&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Threads&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;!threads // show&#xA;~2s      // show details of a particular one&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;h3&gt;WinDbg extensions&lt;/h3&gt;&#xA;&#xA;&lt;p&gt;WinDbg supports extensions to load additional functionality at runtime. There are three you probably want to try: SOS is a must for debugging managed code, SOSEX and MEX provide useful helpers.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/framework/tools/sos-dll-sos-debugging-extension&#34;&gt;SOS&lt;/a&gt; &amp;ldquo;helps you debug managed programs in Visual Studio and in the Windows debugger (WinDbg.exe) by providing information about the internal Common Language Runtime (CLR) environment&amp;rdquo;. It comes with .Net but you need to load it in WinDbg:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;!load C:\Windows\Microsoft.NET\Framework64\v4.0.30319\SOS.dll)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;It provides a number of essential commands whose names are mostly self-explanatory:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;!sos.analyzeOOM&#xA;!sos.gcroot&#xA;!sos.finalizequeue&#xA;!sos.threadpool&#xA;!sos.threads&#xA;!sos.threadstate&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Next is &lt;a href=&#34;http://www.stevestechspot.com/default.aspx#a9fdcf4a4-6e09-4807-bc31-ac1adf836f6c&#34;&gt;SOSEX&lt;/a&gt;. Download and run&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;!load â€¦\sosex.dll&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;I liked the deadlock detection and the Finalizer queue analysis:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;!dlk&#xA;&#xA;!finq -stat&#xA;!finalizequeue&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Finally, you might want to try Microsoft&amp;rsquo;s &lt;a href=&#34;https://www.microsoft.com/en-us/download/details.aspx?id=53304&#34;&gt;MEX&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;MEX Debugging Extension for WinDbg can help you simplify common debugger tasks, and provides powerful text filtering capabilities to the debugger.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;!load mex.dll&#xA;!mex help&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;will get you started.&lt;/p&gt;&#xA;</content>
   <category term="Tools"></category>
   <category term=".Net"></category>
  </entry>
  <entry>
   <title>Windows and Powershell for Unix nerds</title>
   <link href="http://www.thomaskappler.net/2020-07-25_windows_for_unix_nerds.html" rel="alternate"></link>
   <updated>2020-07-25T00:00:00Z</updated>
   <id>tag:www.thomaskappler.net,2020-07-25:/2020-07-25_windows_for_unix_nerds.html</id>
   <summary type="html">A few years ago I joined Microsoft and started to work with .Net on Windows, coming from years of only using Linux. Here are some tips I learned along the way.</summary>
   <content type="html">&lt;nav&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&#34;#toc_0&#34;&gt;Windows&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#toc_1&#34;&gt;Clipboard&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#toc_2&#34;&gt;Shortcuts&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#toc_3&#34;&gt;Tools&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#toc_4&#34;&gt;WSL&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#toc_5&#34;&gt;Ripgrep&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#toc_6&#34;&gt;Powershell&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#toc_7&#34;&gt;Basics&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#toc_8&#34;&gt;Bash commands/expressions and their equivalents&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#toc_9&#34;&gt;Iterating and querying&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#toc_10&#34;&gt;Various tidbits&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#toc_11&#34;&gt;PSDrives&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#toc_12&#34;&gt;Modules&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#toc_13&#34;&gt;Object properties&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#toc_14&#34;&gt;Pitfalls&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#toc_15&#34;&gt;VerbosePreference and other globals&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#toc_16&#34;&gt;Pretty-printing JSON&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#toc_17&#34;&gt;Null and the empty string&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&lt;/nav&gt;&#xA;&#xA;&lt;div style=&#34;padding-top: 1em&#34;&gt;&#xA;Looking back, it&#39;s funny how easily I&#39;ve settled in to the Windows world. In college, I was the guy with the Linux shirts and a crush on GNU and the FSF. (I still think both have done lots of excellent work.) Thank you, Satya, for making Microsoft that much more appealing.&#xA;&lt;/div&gt;&#xA;&#xA;&lt;h2 id=&#34;toc_0&#34;&gt;Windows&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;Honestly, after years of using Windows almost exclusively I&amp;rsquo;m still not a fan, whereas C# and Powershell have really impressed me.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Mind you, Windows works fine. I don&amp;rsquo;t think about it much. The hardware and screen resolution support is great as you&amp;rsquo;d expect. Mandatory reboots used to be bad but are much reduced now.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;It&amp;rsquo;s just too GUI-focused and full of obscure corners and inconsistencies (ok, not much different from Linux). I miss poking around internals and setting up everything the way I like and trying different window managers. Ah, Linux.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;My main actual issue is performance. (Don&amp;rsquo;t even get me started on the ads but at least you can easily turn them off.) The kernel might be ok, but anti-malware and search indexing and a dozen other processes constantly blasting away in the background take a notable toll. Search can be turned off, of course. In general, it feels a little sluggish.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;You should &lt;em&gt;not&lt;/em&gt; turn off the built-in Defender security scans. However, for developers they can be a huge pain because your project changes every time you edit and build, and the scanner scans the new files, over and over. If you feel confident that no baddies can sneak in there, you can exclude folders from the Defender scan.&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Launch &amp;ldquo;Edit Group Policy&amp;rdquo; from Start Menu&lt;/li&gt;&#xA;&lt;li&gt;Go To: Administrative Templates -&amp;gt; Windows Components -&amp;gt; Windows Defender -&amp;gt; Exclusions&lt;/li&gt;&#xA;&lt;li&gt;Double Click Path Exclusions&lt;/li&gt;&#xA;&lt;li&gt;Click enable and add your paths, then click OK, OK, OK&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;h3 id=&#34;toc_1&#34;&gt;Clipboard&lt;/h3&gt;&#xA;&#xA;&lt;p&gt;Without fail, people who watch me work ask me about this when it pops up. Clipboard history is a super power that saves you so much window switching and cognitive overhead (where was that string again?) when you&amp;rsquo;re used to it.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Windows has it built in. Hit Windows-V instead of Ctrl-V and a little window with the history pops up. Select an entry and Enter pastes it, Shift-Enter pastes it without formatting.&lt;/p&gt;&#xA;&#xA;&lt;h3 id=&#34;toc_2&#34;&gt;Shortcuts&lt;/h3&gt;&#xA;&#xA;&lt;p&gt;There are plenty, of course. The ones I use constantly are&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Windows-Tab: visual overview of open windows&lt;/li&gt;&#xA;&lt;li&gt;Alt-Tab: switch between windows&lt;/li&gt;&#xA;&lt;li&gt;Windows-Up: maximize/unmaximize window&lt;/li&gt;&#xA;&lt;li&gt;Windows-Left/Right: fit window to left/right half of the screen. This one is neat because it also pops up miniatures of other windows so you can select one to take up the other half of the screen. Just hit Esc if you don&amp;rsquo;t want to. If you do, the two windows are paired and if you make one horizontally larger, the other one shrinks accordingly.&lt;/li&gt;&#xA;&lt;li&gt;Ctrl-Windows-left/right: switch between virtual desktops. Yes, Windows has them now! On the Windows-Tab window overview you can drag and drop windows between desktops.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;h2 id=&#34;toc_3&#34;&gt;Tools&lt;/h2&gt;&#xA;&#xA;&lt;h3 id=&#34;toc_4&#34;&gt;WSL&lt;/h3&gt;&#xA;&#xA;&lt;p&gt;With version 2, the &lt;a href=&#34;https://docs.microsoft.com/en-us/windows/wsl/about&#34;&gt;Windows Subsystem for Linux&lt;/a&gt; has become a gem. It&amp;rsquo;s easy to use and powerful. I&amp;rsquo;m not that experienced with it, so I&amp;rsquo;ll leave it at that, but you should definitely install it and try it out.&lt;/p&gt;&#xA;&#xA;&lt;h3 id=&#34;toc_5&#34;&gt;Ripgrep&lt;/h3&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/BurntSushi/ripgrep&#34;&gt;&lt;strong&gt;ripgrep&lt;/strong&gt;&lt;/a&gt; is a better grep on any system, but Windows doesn&amp;rsquo;t even have grep, just the wonky &lt;code&gt;sls&lt;/code&gt;, so ripgrep becomes a must have. Easy to install with a pre-built binary.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I&amp;rsquo;ve written about &lt;a href=&#34;/2015-09-09_favorite tools_ack.html&#34;&gt;Ack&lt;/a&gt; before and how it&amp;rsquo;s better than grep. Ripgrep is similar but faster and easier to install. Try it out!&lt;/p&gt;&#xA;&#xA;&lt;h2 id=&#34;toc_6&#34;&gt;Powershell&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;Powershell is a funny beast when you&amp;rsquo;re used to Bash. Believe it or not, though, I&amp;rsquo;ve become a fan. What I love about it is that it&amp;rsquo;s more of a &amp;ldquo;real&amp;rdquo; programming environment, while still being a very usable shell.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;What makes it real programming environment?&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Pipes transport typed objects, not just strings. This alone is huge.&lt;/li&gt;&#xA;&lt;li&gt;It has more handy built-ins, like for parsing JSON.&lt;/li&gt;&#xA;&lt;li&gt;It has built-in standard ways to implement common functionality like progress bars, &lt;code&gt;-Verbose&lt;/code&gt;, &lt;code&gt;-WhatIf&lt;/code&gt;.&lt;/li&gt;&#xA;&lt;li&gt;Function arguments can be typed and can be made mandatory or optional.&lt;/li&gt;&#xA;&lt;li&gt;Seamless interoperability with .Net. Load any DLL and call its static methods, instantiate its objects (as real typed objects in the shell), or access its constants.&lt;/li&gt;&#xA;&lt;li&gt;A module system to package, load, and unload functionality.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;p&gt;By the way, just ignore the Windows command prompt (&lt;code&gt;cmd&lt;/code&gt;). It&amp;rsquo;s awful and pointless with Powershell being present by default. Sadly, it&amp;rsquo;s still used in many docs and tutorials.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Whole books have been written about Powershell, so below are simply my slighlty polished notes that I took when i learned something I wanted to remember or reference later. I hope the selection is useful to others coming from *Nix.&lt;/p&gt;&#xA;&#xA;&lt;h3 id=&#34;toc_7&#34;&gt;Basics&lt;/h3&gt;&#xA;&#xA;&lt;p&gt;If you come from *Nix, you can start by using most of the basic shell commands you know like &lt;code&gt;ls&lt;/code&gt;. Their equivalents have a different name in PS, but PS comes with pre-defined aliases mapping the nix names to the PS names.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Each Powershell function supports the &amp;ldquo;common parameters&amp;rdquo;, such as &lt;code&gt;-Verbose&lt;/code&gt;. Full docs at &lt;code&gt;help about_CommonParameters&lt;/code&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Dash-parameters can be abbreviated as long as they are unique, e.g. &lt;code&gt;-re&lt;/code&gt; for &lt;code&gt;-Recursive&lt;/code&gt;.&lt;/p&gt;&#xA;&#xA;&lt;h3 id=&#34;toc_8&#34;&gt;Bash commands/expressions and their equivalents&lt;/h3&gt;&#xA;&#xA;&lt;table&gt;&#xA;&lt;thead&gt;&#xA;&lt;tr&gt;&#xA;&lt;th&gt;Bash&lt;/th&gt;&#xA;&lt;th&gt;Powershell&lt;/th&gt;&#xA;&lt;/tr&gt;&#xA;&lt;/thead&gt;&#xA;&#xA;&lt;tbody&gt;&#xA;&lt;tr&gt;&#xA;&lt;td&gt;cat&lt;/td&gt;&#xA;&lt;td&gt;&lt;code&gt;gc&lt;/code&gt; (alias of &lt;code&gt;Get-Content&lt;/code&gt;)&lt;/td&gt;&#xA;&lt;/tr&gt;&#xA;&#xA;&lt;tr&gt;&#xA;&lt;td&gt;cut&lt;/td&gt;&#xA;&lt;td&gt;No direct equivalent, but because PS passes typed objects through pipes, it&amp;rsquo;s rarely needed. See &lt;a href=&#34;http://stackoverflow.com/questions/24634022/what-is-an-equivalent-of-nix-cut-command-in-powershell&#34;&gt;What is an equivalent of *Nix &amp;lsquo;cut&amp;rsquo; command in Powershell?&lt;/a&gt; for some options.&lt;/td&gt;&#xA;&lt;/tr&gt;&#xA;&#xA;&lt;tr&gt;&#xA;&lt;td&gt;find&lt;/td&gt;&#xA;&lt;td&gt;&lt;code&gt;gci -Recurse&lt;/code&gt; (alias of &lt;code&gt;Get-ChildItem&lt;/code&gt;)&lt;/td&gt;&#xA;&lt;/tr&gt;&#xA;&#xA;&lt;tr&gt;&#xA;&lt;td&gt;head&lt;/td&gt;&#xA;&lt;td&gt;&lt;code&gt;gc file \| select -first 10&lt;/code&gt;&lt;/td&gt;&#xA;&lt;/tr&gt;&#xA;&#xA;&lt;tr&gt;&#xA;&lt;td&gt;jq&lt;/td&gt;&#xA;&lt;td&gt;Yes, PS can do much of what jq provides out of the box. Parse the JSON first with &lt;code&gt;ConvertFrom-Json&lt;/code&gt; which gives you an object with the JSON&amp;rsquo;s structure. Then pipe that to whatever filter and transformation commands you need.&lt;/td&gt;&#xA;&lt;/tr&gt;&#xA;&#xA;&lt;tr&gt;&#xA;&lt;td&gt;M-&lt;/td&gt;&#xA;&lt;td&gt;Use &lt;code&gt;$$&lt;/code&gt; as an argument, it evaluates to the last token of the previous command.&lt;/td&gt;&#xA;&lt;/tr&gt;&#xA;&#xA;&lt;tr&gt;&#xA;&lt;td&gt;.profile&lt;/td&gt;&#xA;&lt;td&gt;The path to the equivalent file is in &lt;code&gt;$profile&lt;/code&gt;.&lt;/td&gt;&#xA;&lt;/tr&gt;&#xA;&#xA;&lt;tr&gt;&#xA;&lt;td&gt;sum&lt;/td&gt;&#xA;&lt;td&gt;&lt;code&gt;measure -sum&lt;/code&gt;&lt;/td&gt;&#xA;&lt;/tr&gt;&#xA;&#xA;&lt;tr&gt;&#xA;&lt;td&gt;tail&lt;/td&gt;&#xA;&lt;td&gt;&lt;code&gt;gc -tail 10&lt;/code&gt;&lt;/td&gt;&#xA;&lt;/tr&gt;&#xA;&#xA;&lt;tr&gt;&#xA;&lt;td&gt;time&lt;/td&gt;&#xA;&lt;td&gt;&lt;code&gt;Measure-Command&lt;/code&gt;&lt;/td&gt;&#xA;&lt;/tr&gt;&#xA;&#xA;&lt;tr&gt;&#xA;&lt;td&gt;uniq&lt;/td&gt;&#xA;&lt;td&gt;&lt;code&gt;Get-Unique&lt;/code&gt;&lt;/td&gt;&#xA;&lt;/tr&gt;&#xA;&#xA;&lt;tr&gt;&#xA;&lt;td&gt;wc -l&lt;/td&gt;&#xA;&lt;td&gt;&lt;code&gt;measure -line&lt;/code&gt;&lt;/td&gt;&#xA;&lt;/tr&gt;&#xA;&#xA;&lt;tr&gt;&#xA;&lt;td&gt;which&lt;/td&gt;&#xA;&lt;td&gt;&lt;code&gt;Get-Command&lt;/code&gt; (no alias; &lt;code&gt;gc&lt;/code&gt; is used for &lt;code&gt;Get-Content&lt;/code&gt;)&lt;/td&gt;&#xA;&lt;/tr&gt;&#xA;&#xA;&lt;tr&gt;&#xA;&lt;td&gt;&amp;amp;&amp;amp;&lt;/td&gt;&#xA;&lt;td&gt;This one is annoying since it&amp;rsquo;s verbose and modifies global state: &lt;code&gt;$ErrorActionPreference=&#39;Stop&#39;; cmd1; cmd2&lt;/code&gt;&lt;/td&gt;&#xA;&lt;/tr&gt;&#xA;&lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&#xA;&lt;h3 id=&#34;toc_9&#34;&gt;Iterating and querying&lt;/h3&gt;&#xA;&#xA;&lt;p&gt;Pipe a collection to &lt;code&gt;?&lt;/code&gt;, alias of &lt;code&gt;Where-Object&lt;/code&gt;, to filter it.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;$clusters | ? { $_.status -eq &#39;running&#39; }&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Note the automatically defined variable &lt;code&gt;$_&lt;/code&gt; representing the current object.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Similarly, pipe a collection to &lt;code&gt;%&lt;/code&gt;, alias of &lt;code&gt;ForEach-Object&lt;/code&gt;, to do something with each member.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;For the common case of iterating and selecting a property of each object, PS has a built-in shortcut: just access the property on the list. Super useful. That is, the two commands below are equivalent:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;$clusters | % { $_.status }&#xA;$clusters.status&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;h3 id=&#34;toc_10&#34;&gt;Various tidbits&lt;/h3&gt;&#xA;&#xA;&lt;p&gt;&lt;code&gt;-contains&lt;/code&gt; is for collections, &lt;code&gt;-like&lt;/code&gt; is for strings. But &lt;code&gt;.Contains()&lt;/code&gt; is often easier.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;POST or PUT the content of a file using Invoke-WebRequest: &lt;code&gt;-Body (gc file.json)&lt;/code&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Arrays:&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;$docCounts = new-object int[] $indexes.Length&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;@()&lt;/code&gt; creates a new, empty, untyped one&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;+=&lt;/code&gt; adds, but internally creates a new array, so slow&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;p&gt;Splitting strings: &lt;code&gt;&amp;quot;&amp;quot;.Split(&amp;quot;str&amp;quot;)&lt;/code&gt; splits by any character in the given string. To split by a whole string, use &lt;code&gt;-split&lt;/code&gt;. It supports limiting the result size, too: &lt;code&gt;-split &amp;quot;str&amp;quot;, 2&lt;/code&gt;.&lt;/p&gt;&#xA;&#xA;&lt;h3 id=&#34;toc_11&#34;&gt;PSDrives&lt;/h3&gt;&#xA;&#xA;&lt;p&gt;PSDrives is a file system provider similar to like Fuse.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;get-psdrive&#xA;dir alias:&#xA;dir env:&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;New-PSDrive creates a new drive mapping.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;New-PSDrive -name Foo -PSProvider FileSystem -Root c:\Demo&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;h3 id=&#34;toc_12&#34;&gt;Modules&lt;/h3&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;Get-Module  # list loaded modules&#xA;Get-Module -ListAvailable  # list all available modules&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;After loading one, see what commands it added:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;Get-Command -Module &amp;lt;module&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;h3 id=&#34;toc_13&#34;&gt;Object properties&lt;/h3&gt;&#xA;&#xA;&lt;p&gt;Usually, PS objects have more properties than the shell shows. Use &lt;code&gt;Get-Member&lt;/code&gt;, alias &lt;code&gt;gm&lt;/code&gt;, to see them. It will also show methods and events. This is my first step to inspect an object returned from somewhere.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;What if you want only one property of an object in a pipe expression? &lt;code&gt;select&lt;/code&gt; pulls it out.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;$addresses | select LastName&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;However, you&amp;rsquo;ll notice that you don&amp;rsquo;t get a string with the value of LastName, you get a new object with a single property LastName. This is so that you can &lt;code&gt;select&lt;/code&gt; multiple properties. But often, you want a single property as a scalar, e.g., to pass it on to a command that takes string input, not object. &lt;code&gt;select -ExpandProperty&lt;/code&gt; will do that:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;&amp;gt; ($StackTrace | select Length).GetType().Name&#xA;PSCustomObject&#xA;&amp;gt; ($StackTrace | select -ExpandProperty Length).GetType().Name&#xA;Int32&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;h3 id=&#34;toc_14&#34;&gt;Pitfalls&lt;/h3&gt;&#xA;&#xA;&lt;h4 id=&#34;toc_15&#34;&gt;VerbosePreference and other globals&lt;/h4&gt;&#xA;&#xA;&lt;p&gt;At some point you will use the &lt;code&gt;-Verbose&lt;/code&gt; switch but see no verbose output. Or you will not use the switch and see it. What&amp;rsquo;s happening is there&amp;rsquo;s a global variable &lt;code&gt;VerbosePreference&lt;/code&gt;, and a few other similar ones, that controls this behavior. See &lt;code&gt;help about_Preference_Variables&lt;/code&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;You have no way of knowing what it&amp;rsquo;s set to without explicitly checking. Ugh. This is a really annoying example of global state.&lt;/p&gt;&#xA;&#xA;&lt;h4 id=&#34;toc_16&#34;&gt;Pretty-printing JSON&lt;/h4&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;| ConvertFrom-Json | ConvertTo-Json -MaxDepth 20&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Note the &lt;code&gt;-MaxDepth&lt;/code&gt;: the default is only 3, meaning PS will skip all parts of the object structure that are more than three levels deep. That&amp;rsquo;s bound to omit parts of your data, leaving you wondering where the hell it is.&lt;/p&gt;&#xA;&#xA;&lt;h4 id=&#34;toc_17&#34;&gt;Null and the empty string&lt;/h4&gt;&#xA;&#xA;&lt;p&gt;Generally, null is null and the empty string is the empty string. However, when function parameters or properties are annotated with types, like &lt;code&gt;[string]&lt;/code&gt;, Powershell tries to auto-convert argument to the given type. For some strange reason, &lt;code&gt;$null&lt;/code&gt; becomes the empty string for &lt;code&gt;[string]&lt;/code&gt; parameters. See &lt;a href=&#34;https://github.com/PowerShell/PowerShell/issues/4616&#34;&gt;this issue&lt;/a&gt; for details.&#xA;You need to use &lt;code&gt;[NullString]&lt;/code&gt; to be explicit.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;$c.Nodes[0].DonorHostname = $null&#xA;$c.Nodes[0].DonorHostname -eq $null&#xA;False&#xA;$c.Nodes[0].DonorHostname -eq &#39;&#39;&#xA;True&#xA;$c.Nodes[0].DonorHostname = [NullString]::Value&#xA;$c.Nodes[0].DonorHostname -eq $null&#xA;True&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;</content>
   <category term="Windows"></category>
   <category term="Tools"></category>
  </entry>
  <entry>
   <title>Ack is awesome</title>
   <link href="http://www.thomaskappler.net/2015-09-09_favorite tools_ack.html" rel="alternate"></link>
   <updated>2015-09-09T00:00:00Z</updated>
   <id>tag:www.thomaskappler.net,2015-09-09:/2015-09-09_favorite tools_ack.html</id>
   <summary type="html">The grep replacement ack is an invaluable part of my toolbox. I&#39;ll explain why and show some examples and some tipps.</summary>
   <content type="html">&lt;p&gt;This is the second time I highlight &lt;a href=&#34;http://petdance.com/&#34;&gt;Andy Lester&amp;rsquo;s&lt;/a&gt; work&#xA;on my blog. Back in 2013 I reviewed his book&#xA;&lt;a href=&#34;2015-09-09_favorite tools_ack.html&#34;&gt;Land the Tech Job You Love&lt;/a&gt; which is my&#xA;favorite tech career guide. Now I want to highlight his open-source tool&#xA;&lt;a href=&#34;http://beyondgrep.com/&#34;&gt;ack&lt;/a&gt; which is &amp;ldquo;a tool like grep, optimized for&#xA;programmers&amp;rdquo;. I use it every day and I have observed many times that people who&#xA;don&amp;rsquo;t use it are slower at tasks that require locating files.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The ack website has a page&#xA;&lt;a href=&#34;http://beyondgrep.com/why-ack/&#34;&gt;&amp;ldquo;Top 10 reasons to use ack for source code&amp;rdquo;&lt;/a&gt;&#xA;which I don&amp;rsquo;t want to repeat here. All of these reasons are true in my&#xA;experience. I&amp;rsquo;ll just go through my personal main reasons to use ack.&lt;/p&gt;&#xA;&#xA;&lt;h3&gt;It&amp;rsquo;s easy to search only the right files&lt;/h3&gt;&#xA;&#xA;&lt;p&gt;Grep can search in explicitly listed files, or in all files in a directory&#xA;tree. Ack can search in files &lt;em&gt;of certain types&lt;/em&gt; under a directory tree.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I used to do &lt;code&gt;find . -name &amp;quot;*.xml&amp;quot; -exec grep -H foo &#39;{}&#39; \;&lt;/code&gt;. I guess &lt;code&gt;grep foo&#xA;$(find ...)&lt;/code&gt; would have been a bit easier, I learned this later.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Now I just do &lt;code&gt;ack --xml foo&lt;/code&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;And it&amp;rsquo;s even better than the find version because it doesn&amp;rsquo;t search in &lt;code&gt;.git&lt;/code&gt;&#xA;and similar directories. This unclutters the output and makes it run&#xA;faster. Perl&amp;rsquo;s optimized regex engine is pretty fast anyways.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;For every file type &lt;code&gt;--foo&lt;/code&gt; you can also request &lt;code&gt;--nofoo&lt;/code&gt; to exclude it.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;For certain types such as &lt;code&gt;--shell&lt;/code&gt; ack will even check the shebang line of&#xA;files that don&amp;rsquo;t have an extension.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;What&amp;rsquo;s more, while there are many predefined file types, you can define your&#xA;own, and they are not limited to a single extension.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;You can also use this functionality to simple list all files of a type, for&#xA;example to pipe them into another command. Simply add &lt;code&gt;-f&lt;/code&gt;: &lt;code&gt;ack -f --java&#xA;--xml&lt;/code&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;If you&amp;rsquo;d like to only consider files in subdirectories matching a certain&#xA;pattern, ack has you covered as well. &lt;code&gt;ack -g &#39;src/main&#39;&lt;/code&gt; searches only in&#xA;src/main folders.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;These are just the main ways to tell ack which files you&amp;rsquo;re interested&#xA;in. Combined, they save me a lot of time when locating files.&lt;/p&gt;&#xA;&#xA;&lt;h3&gt;Java example&lt;/h3&gt;&#xA;&#xA;&lt;p&gt;I mainly work in Java these days. My project root has a bunch of Maven modules&#xA;in it, each in its own subdirectory. Inside each of those is a &lt;code&gt;src/main&lt;/code&gt;, a&#xA;&lt;code&gt;src/test&lt;/code&gt;, and a &lt;code&gt;target&lt;/code&gt; folder for build artefacts.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;First, I don&amp;rsquo;t want to grep through the build artefacts ever. So I added&#xA;&lt;code&gt;--ignore-dir=target&lt;/code&gt; to my &lt;code&gt;.ackrc&lt;/code&gt;. I also want to ignore IntelliJ&amp;rsquo;s internal&#xA;project files, ending in .iml, which I ignore with &lt;code&gt;--ignore-file=match:\.iml$&lt;/code&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Second, I tend to search a limited number of sets of files. Usually it&amp;rsquo;s either&#xA;all files, or only Java files, or only XML files (Spring configuration). And&#xA;sometimes I want to search either of those only in main code, or only in test&#xA;code. I addressed this with a number of bash aliases that allow me to do all&#xA;that in two or three keystrokes. (Yes, IntelliJ can do this as well, but I have&#xA;other issues with it, and for many tasks the command line is superior.)&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;alias aj=&#39;ack --java&#39;&#xA;alias am=&#39;ack -v -g &#39;\&#39;&#39;src/test&#39;\&#39;&#39; | ack -x&#39;&#xA;alias ajm=&#39;ack --java -v -g &#39;\&#39;&#39;src/test&#39;\&#39;&#39; | ack -x&#39;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;The first one searches only Java files, the second one ignores src/test, and the&#xA;third one combines those two. The aliases for XML and src/test are equivalent. I&#xA;don&amp;rsquo;t use &lt;code&gt;-g src/main&lt;/code&gt; for non-test code, but &lt;code&gt;-v -g src/test&lt;/code&gt; which means&#xA;&amp;ldquo;everything but src/test`. That way it also searches top-level files that are&#xA;neither in main nor in test.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;So, for example, &lt;code&gt;axm FooFactory&lt;/code&gt; gives me all occurrences of FooFactory in XML&#xA;and related files, in src/main of any Maven module.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;We do need a small clutch here because ack can only either select files by path&#xA;(&lt;code&gt;-g&lt;/code&gt;), or search in files, but not both together. So we invoke it twice, once&#xA;to select the files and once to search in them.&lt;/p&gt;&#xA;&#xA;&lt;h3&gt;It&amp;rsquo;s fast and ergonomic&lt;/h3&gt;&#xA;&#xA;&lt;p&gt;The ack website already lists this: ack is fast. But I&amp;rsquo;d like to emphasize that&#xA;it&amp;rsquo;s fast not just in terms of runtime, but in interaction time. Instead of&#xA;typing &amp;ldquo;grep -R&amp;rdquo; you type &amp;ldquo;ack&amp;rdquo;, many times a day. And with its ways of&#xA;narrowing down the search as shown above, it obsoletes a whole bunch of piped&#xA;shell expressions involving &lt;code&gt;find&lt;/code&gt; and friends. I simply get to hit return&#xA;sooner, saving time and mental effort.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Another point that doesn&amp;rsquo;t immediately seem related to speed is ack&amp;rsquo;s formatting&#xA;of its output. When piped to another process, it&amp;rsquo;s mostly like grep&amp;rsquo;s. But when&#xA;ack writes to the console, it formats for readability, intelligently using line&#xA;breaks, colors, and highlighting. That makes it faster for me to scan the&#xA;results of my search.&lt;/p&gt;&#xA;&#xA;&lt;h3&gt;(Almost) great documentation&lt;/h3&gt;&#xA;&#xA;&lt;p&gt;ack&amp;rsquo;s documentation is great, which allows everyone to get the most out of&#xA;it. The &amp;ldquo;almost&amp;rdquo; is because it&amp;rsquo;s a bit scattered. There&amp;rsquo;s &lt;code&gt;ack --help&lt;/code&gt; which&#xA;lists the main options, useful as a quick reference. Then there&amp;rsquo;s the man page,&#xA;also available via &lt;code&gt;ack --man&lt;/code&gt; (useful on Windows). That distinction makes&#xA;sense, but there&amp;rsquo;s a third place, the full documentation on the ack&#xA;website. That&amp;rsquo;s something to be aware of when looking for info. It helps,&#xA;though, that Stackoverflow has a large number of ack questions, many answered by&#xA;Andy himself.&lt;/p&gt;&#xA;&#xA;&lt;h3&gt;It&amp;rsquo;s mostly like grep&lt;/h3&gt;&#xA;&#xA;&lt;p&gt;ack mostly uses the same flags than grep, and it behaves like grep. So all the&#xA;flags you&amp;rsquo;re used to, like &lt;code&gt;-i&lt;/code&gt; and &lt;code&gt;-v&lt;/code&gt;, are there. I never had an issue&#xA;switching between the two.&lt;/p&gt;&#xA;&#xA;&lt;h3&gt;Conclusion&lt;/h3&gt;&#xA;&#xA;&lt;p&gt;ack is one of those tools that may not sound all that impressive at first. After&#xA;all, it&amp;rsquo;s a glorified grep. But, in my experience, with ack the sum is greater&#xA;than its parts. The different improvements over grep work together and&#xA;accumulate to make a significant difference. I think and type less than with&#xA;grep and have more brainpower available for my actual task.&lt;/p&gt;&#xA;</content>
   <category term="Tools"></category>
  </entry>
  <entry>
   <title>How to serve a static directory with Plack</title>
   <link href="http://www.thomaskappler.net/2011-02-13_plack_static_howto.html" rel="alternate"></link>
   <updated>2011-02-13T00:00:00Z</updated>
   <id>tag:www.thomaskappler.net,2011-02-13:/2011-02-13_plack_static_howto.html</id>
   <summary type="html">From directory to http://localhost:5001/page.html as simply as possible.</summary>
   <content type="html">&lt;p&gt;You have a directory containing HTML files and would like to browse it&#xA;locally. There are absolute links like &lt;code&gt;/static/site.css&lt;/code&gt; in the HTML,&#xA;so just opening index.html would break those links.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Perl&amp;rsquo;s recent web superstar module &lt;a href=&#34;http://plackperl.org/&#34;&gt;Plack&lt;/a&gt; can&#xA;do it easily.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Create a file named &lt;code&gt;plack.psgi&lt;/code&gt; with the following content:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;#!/usr/bin/env perl&#xA;&#xA;use Plack::App::File;&#xA;&#xA;my $root = &amp;quot;/path/to/dir;&#xA;my $app = Plack::App::File-&amp;gt;new(root =&amp;gt; $root)-&amp;gt;to_app;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Then launch the &lt;code&gt;plackup&lt;/code&gt; utility by &lt;code&gt;plackup -a plack.psgi --port&#xA;5001&lt;/code&gt;--that&amp;rsquo;s it!&lt;/p&gt;&#xA;</content>
   <category term="Perl"></category>
   <category term="Tools"></category>
  </entry>
 </feed>