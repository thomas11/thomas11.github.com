<?xml version="1.0" encoding="UTF-8"?> <feed xmlns="http://www.w3.org/2005/Atom">
  <title>Thomas Kappler&#39;s site. Mostly programming and books. Category &#34;Scala.&#34;</title>
  <link href="http://www.thomaskappler.net/categories/Scala/" rel="alternate"></link>
  <id>http://www.thomaskappler.net/categories/Scala/</id>
  <updated>2013-05-09T16:59:18+02:00</updated>
  <author>
   <name>Thomas Kappler</name>
   <uri>http://www.thomaskappler.net/</uri>
  </author>
  <entry>
   <title>Geneva JUG New Year&#39;s meeting 2011</title>
   <link href="http://www.thomaskappler.net/2011-01-18_geneva_jug_akka_scala.html" rel="alternate"></link>
   <updated>2011-01-18T00:00:00Z</updated>
   <id>tag:www.thomaskappler.net,2011-01-18:/2011-01-18_geneva_jug_akka_scala.html</id>
   <summary type="html">Iulian Dragos on Scala &amp; Jonas Bonér on Akka.</summary>
   <content type="html">&lt;p&gt;The &lt;a href=&#34;http://genevajug.ch/&#34;&gt;Geneva Java User&amp;rsquo;s Group&lt;/a&gt; had their annual&#xA;New Year&amp;rsquo;s meeting yesterday, with two invited speakers. Iulian Dragos&#xA;gave an Intro to Scala, and Jonas Bonér presented his actor library&#xA;&lt;a href=&#34;http://akka.io&#34;&gt;Akka&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Iulian works on Scala and with Scala with Martin Odersky at EPFL&#xA;Lausanne and Odersky&amp;rsquo;s consulting company Scala Solutions. For initial&#xA;motivation, he listed some companies already using Scala in&#xA;production. Apart from the ones known in the anglophone hacker web&#xA;like Twitter and Foursquare, some big European enterprises such as&#xA;Credit Suisse, UBS, and Siemens were on the list. Iulian&amp;rsquo;s&#xA;presentation was then a straightforward intro to Scala. Up to slide&#xA;13, I noted, it was all Perl in a different syntax :-) He then moved&#xA;on to more advanced features such as mix-ins. Their sensitivity to the&#xA;order in which they are included left the audience sceptical. The&#xA;parallel collections of the upcoming Scala 2.9, on the other hand,&#xA;looked great.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Overall a nice intro to Scala. It suffered a bit from lack of&#xA;practical examples for the advanced language features, but that&amp;rsquo;s&#xA;unavoidable given the time constraints. Speaker&amp;rsquo;s note: a laser&#xA;pointer would have been very helpful for going through sample code.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&#34;http://jonasboner.com&#34;&gt;Jonas Bonér&lt;/a&gt; is the principal author of Akka,&#xA;a very powerful actor framework written in Scala. Jonas uses Scala&#xA;since 2005. He loves Erlang and only moved on to the JVM world because&#xA;he had difficulties convincing others of its greatness. The natural&#xA;compromise was then to implement an Erlang-style platform using Scala&#xA;actors, which became Akka.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Akka is very optimized. An actor uses only 600 bytes (yes, bytes) of&#xA;memory, so you can spawn millions of them. Syntax is easy and&#xA;flexible: send a message to an actor with a single bang (&lt;code&gt;!&lt;/code&gt;), &lt;code&gt;!!&lt;/code&gt;&#xA;blocks, &lt;code&gt;!!!&lt;/code&gt; returns a &lt;code&gt;Future&lt;/code&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;A unique property of Akka is that it combines actors with Software&#xA;Transactional Memory, usually regarded as two separate ideas to tackle&#xA;concurrency. You write&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;import akka.stm. ...&#xA;&#xA;atomic {&#xA;    atomic {&#xA;        // Atomic blocks are composable, so they don&#39;t break&#xA;        // encapsulation like locks.&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;If you, for instance, send a message to an actor a1, which updates its&#xA;state atomically, messages another actor a2, which then also tries to&#xA;updates its state atomically but fails, then the whole chain will be&#xA;rolled back and retried, even if the messaging was&#xA;asynchronous. Powerful indeed.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Jonas presented a fascinating integration example towards the end of&#xA;this talk. He likes the Apache Camel integration framework. Akka comes&#xA;with a Camel module. One can define an actor with, for example,&#xA;&lt;code&gt;endpoint &amp;quot;file://foo&amp;quot;&lt;/code&gt;. Any change to &lt;code&gt;foo&lt;/code&gt; will then be send as a&#xA;message to the actor. The other way round works, too, of course&amp;ndash;think&#xA;websockets.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Almost as an aside, Jonas mentioned that Akka supports code hot-swap&#xA;like Erlang.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Akka looks like a very powerful framework indeed, to be investigated.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Jonas presented in a great, buddy-like way, like a fellow hacker&#xA;chatting over a beer. Some ranting and rambling only added to the&#xA;impact of the presentation. His slides were minimal and well&#xA;done&amp;ndash;great talk overall.&lt;/p&gt;&#xA;</content>
   <category term="Meetups"></category>
   <category term="Java"></category>
   <category term="Scala"></category>
  </entry>
 </feed>