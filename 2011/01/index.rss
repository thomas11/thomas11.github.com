<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>Thomas Kappler</title>
    <link>/</link>
    <description>Thomas Kappler.</description>
    <language>en</language>
    <docs>http://blogs.law.harvard.edu/tech/rss</docs>
    <generator>blosxom/2.1.2</generator>

  <item>
    <title>Geneva JUG New Year&amp;#8217;s meeting 2011</title>
    <link>/2011/01/18#2011-01-18_geneva_jug_akka_scala</link>
    <description>&lt;p&gt;The &lt;a href=&quot;&quot;&gt;Geneva Java User&amp;#8217;s Group&lt;/a&gt; had their annual New Year&amp;#8217;s meeting
yesterday, with two invited speakers. Iulian Dragos gave an Intro to
Scala, and Jonas Bonér presented his actor library
&lt;a href=&quot;http://akka.io&quot;&gt;Akka&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Iulian works on Scala and with Scala with Martin Odersky at EPFL
Lausanne and Odersky&amp;#8217;s consulting company Scala Solutions. For initial
motivation, he listed some companies already using Scala in
production. Apart from the ones known in the anglophone hacker web
like Twitter and Foursquare, some big European enterprises such as
Credit Suisse, UBS, and Siemens were on the list. Iulian&amp;#8217;s
presentation was then a straightforward intro to Scala. Up to slide
13, I noted, it was all Perl in a different syntax :-) He then moved
on to more advanced features such as mix-ins. Their sensitivity to the
order in which they are included left the audience sceptical. The
parallel collections of the upcoming Scala 2.9, on the other hand,
looked great.&lt;/p&gt;

&lt;p&gt;Overall a nice intro to Scala. It suffered a bit from lack of
practical examples for the advanced language features, but that&amp;#8217;s
unavoidable given the time constraints. Speaker&amp;#8217;s note: a laser
pointer would have been very helpful for going through sample code.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://jonasboner.com&quot;&gt;Jonas Bonér&lt;/a&gt; is the principal author of Akka,
a very powerful actor framework written in Scala. Jonas uses Scala
since 2005. He loves Erlang and only moved on to the JVM world because
he had difficulties convincing others of its greatness. The natural
compromise was then to implement an Erlang-style platform using Scala
actors, which became Akka.&lt;/p&gt;

&lt;p&gt;Akka is very optimized. An actor uses only 600 bytes (yes, bytes) of
memory, so you can spawn millions of them. Syntax is easy and
flexible: send a message to an actor with a single bang (&lt;code&gt;!&lt;/code&gt;), &lt;code&gt;!!&lt;/code&gt;
blocks, &lt;code&gt;!!!&lt;/code&gt; returns a &lt;code&gt;Future&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;A unique property of Akka is that it combines actors with Software
Transactional Memory, usually regarded as two separate ideas to tackle
concurrency. You write&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import akka.stm. ...

atomic {
    atomic {
        // Atomic blocks are composable, so they don&apos;t break
        // encapsulation like locks.
    }
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you, for instance, send a message to an actor a1, which updates its
state atomically, messages another actor a2, which then also tries to
updates its state atomically but fails, then the whole chain will be
rolled back and retried, even if the messaging was
asynchronous. Powerful indeed.&lt;/p&gt;

&lt;p&gt;Jonas presented a fascinating integration example towards the end of
this talk. He likes the Apache Camel integration framework. Akka comes
with a Camel module. One can define an actor with, for example,
&lt;code&gt;endpoint &quot;file://foo&quot;&lt;/code&gt;. Any change to &lt;code&gt;foo&lt;/code&gt; will then be send as a
message to the actor. The other way round works, too, of course&amp;#8212;think
websockets.&lt;/p&gt;

&lt;p&gt;Almost as an aside, Jonas mentioned that Akka supports code hot-swap
like Erlang.&lt;/p&gt;

&lt;p&gt;Akka looks like a very powerful framework indeed, to be investigated.&lt;/p&gt;

&lt;p&gt;Jonas presented in a great, buddy-like way, like a fellow hacker
chatting over a beer. Some ranting and rambling only added to the
impact of the presentation. His slides were minimal and well
done&amp;#8212;great talk overall.&lt;/p&gt;
</description>
  </item>
  <item>
    <title>Book: Leading Lean Software Development by Mary and Tom Poppendieck</title>
    <link>/2011/01/05#2011-01-05_review_leading_lean_software_development</link>
    <description>&lt;p&gt;A book on software development with the subtitle &lt;em&gt;Results are not the
point&lt;/em&gt;? Is that just attention-grabbing provocation or are the authors
on to something?&lt;/p&gt;

&lt;p&gt;This is one of the first books on the management and organization of
software development that I read, so take the following notes with a
grain salt due to my lack of perspective.&lt;/p&gt;

&lt;p&gt;The Poppendiecks have been consulting on applying lean principles to
software development for years, and they have written on it before in
&lt;em&gt;Lean Software Development&lt;/em&gt; and &lt;em&gt;Implementing Lean Software
Development&lt;/em&gt; (see &lt;a href=&quot;http://www.poppendieck.com/&quot;&gt;their website&lt;/a&gt;).  The
&amp;#8220;Leading &amp;#8230;&amp;#8221; book builds on these two.  A colleague recommended and
lent this book to me, so I read it out of order.  That, and the fact
that I&amp;#8217;m not familiar with the whole &amp;#8220;lean&amp;#8221; concept beyond some
rudimentary basics, made the book somewhat difficult to digest.  Each
chapter made sense to me, but my brain is still struggling to assemble
the content into a coherent whole.&lt;/p&gt;

&lt;p&gt;Lacking the foundations of Lean, I had to look at the book at a
generic guide on best practices in management, organization, and
communication. Maybe that&amp;#8217;s not a bad way of approaching such a book.
Its structure certainly makes sense from that point of view.  Six
chapters address major factors in successful product design and
delivery: Systems Thinking, Technical Excellence, Reliable Delivery,
Relentless Improvement, Great People, Aligned Leaders.&lt;/p&gt;

&lt;p&gt;In the introduction, the authors note that since everyone sees the
world through a particular &amp;#8220;frame&amp;#8221;, different people and thus
organizations might see their surroundings in vastly different ways.
This limits the questions you ask and the alternatives you consider.
When things don&amp;#8217;t work out, your frame of reference may have been off.
Building on this observation, the book&amp;#8217;s chapters are composed of
frames, that is different views on the development process.
Real-world examples introduce and connect the frames.  This structure
allows the authors to focus on individual aspects of success while
keeping the full range of software projects in view.&lt;/p&gt;

&lt;p&gt;With 24 frames, the book packs a surprising amount of content into 250
pages. Fully summarizing it would be time-consuming and pointless&amp;#8212;the
book itself is readable and without filler content. Nevertheless, a
few chapters or frames stood out for me.&lt;/p&gt;

&lt;p&gt;In Technical Excellence, the authors make a strong point for
emphasizing quality, for instance through test-driven development and
evolutionary iterations, and excellence, through valuing expertise
and avoiding the senseless &amp;#8220;promotion&amp;#8221; of the best developers to
managers. These points are not new to developers, but it&amp;#8217;s great to
see them put forth so strongly in a management book.&lt;/p&gt;

&lt;p&gt;Aligned Leaders contains several nuggets of insight into teams and
leadership that I found fascinating.  I&amp;#8217;ve never lead a team larger
than two part-time programmers, so I&amp;#8217;m sure someone with experience
would read these chapters through a different frame.  The authors
state that knowledge workers must necessarily be independent and
self-directed; if their job doesn&amp;#8217;t allow that, they cannot do their
best work.  Therefore, the role of a manager can only be to set the
tone and to otherwise focus on &lt;em&gt;making people better&lt;/em&gt;&amp;#8212;through caring,
respect, and coaching.&lt;/p&gt;

&lt;p&gt;Overall, the book impressed me with its combination of insightful
content, clear and natural writing, and constant referral to
real-world examples.  You might want to start with the authors&amp;#8217;
introductory &lt;em&gt;Lean Software Development&lt;/em&gt;, though, to better understand
the underlying ideas.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Leading Lean Software Development&lt;/em&gt; by Mary and Tom
Poppendieck. Addison-Wesley, 2010.&lt;/p&gt;
</description>
  </item>
  </channel>
</rss>
