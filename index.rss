<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>Thomas Kappler</title>
    <link>/</link>
    <description>Thomas Kappler's personal/programming site.</description>
    <language>en</language>
    <docs>http://blogs.law.harvard.edu/tech/rss</docs>
    <generator>blosxom/2.1.2</generator>

  <item>
    <title>Categories</title>
    <link>/2011/02/15#foo</link>
    <description>&lt;p&gt;This is sort of a table of contents or index by categories.&lt;/p&gt;

&lt;p&gt;Perl:
<ul><li><a href="2011-02-13_plack_static_howto.html">2011-02-13_plack_static_howto.html</a></li><li><a href="2010-09-20-yapceu_talks.html">2010-09-20-yapceu_talks.html</a></li></ul>&lt;/p&gt;

&lt;p&gt;Java:
<ul><li><a href="2010-11-11-java_anon_classes_are_too_verbose.html">2010-11-11-java_anon_classes_are_too_verbose.html</a></li><li><a href="2011-01-18.html">2011-01-18.html</a></li></ul>&lt;/p&gt;
</description>
  </item>
  <item>
    <title>Welcome</title>
    <link>/2011/03/06#about</link>
    <description>&lt;p&gt;Welcome! I&amp;#8217;m Thomas Kappler, sometimes known as thomas11 on the web.
I write about programming and other things
&lt;a href=&quot;http://news.ycombinator.com/&quot;&gt;hackers&lt;/a&gt; might find interesting.&lt;/p&gt;

&lt;p&gt;Feel free to drop me a line contact me at tkappler@gmail.com.&lt;/p&gt;

&lt;h2 id=&quot;mini-bio&quot;&gt;Mini-Bio&lt;/h2&gt;

&lt;p&gt;I studied Computer Science at &lt;a href=&quot;&quot;&gt;KIT&lt;/a&gt;, Karlsruhe, Germany. Prof. Ralf
Reussner, Prof. Pankaj Jalote, and Dr. Heiko Koziolek have made
possible a fantastic experience writing
&lt;a href=&quot;publications/2008-02-04_Towards_Automatic_Construction.html&quot;&gt;my thesis&lt;/a&gt;
at IIT Delhi, India. &lt;a href=&quot;http://www.rene-witte.net/&quot;&gt;Dr. Ren√© Witte&lt;/a&gt;
initiated me to the strange world of academic research and writing and
let me do some cool stuff and write about it. Thanks!&lt;/p&gt;

&lt;p&gt;Until April 2011 I was at the
&lt;a href=&quot;http://www.isb-sib.ch&quot;&gt;Swiss Institute of Bioinformatics&lt;/a&gt; in Geneva,
Switzerland, developing tools for biologists, from web apps to storage
backends to RDF to Perl hacks.&lt;/p&gt;

&lt;p&gt;Now I&amp;#8217;m hacking medical applications at
&lt;a href=&quot;http://www.nhumi.com&quot;&gt;Nhumi Technologies&lt;/a&gt; in Zurich.&lt;/p&gt;

&lt;p&gt;You can find more business-y info
&lt;a href=&quot;http://www.linkedin.com/in/thomaskappler&quot;&gt;on LinkedIn&lt;/a&gt;.&lt;/p&gt;
</description>
  </item>
  <item>
    <title>The Perl Nature</title>
    <link>/2011/02/12#The%20Perl%20Nature</link>
    <description>&lt;p&gt;I write about Perl sometimes.&lt;/p&gt;

&lt;p&gt;<ul><li><a href="2011-02-13_plack_static_howto.html">2011-02-13_plack_static_howto.html</a></li><li><a href="2010-09-20-yapceu_talks.html">2010-09-20-yapceu_talks.html</a></li></ul>&lt;/p&gt;
</description>
  </item>
  <item>
    <title>How to serve a static directory with Plack</title>
    <link>/2011/03/06#2011-02-13_plack_static_howto</link>
    <description>&lt;p&gt;You have a directory containing HTML files and would like to browse it
locally. There are absolute links like &lt;code&gt;/static/site.css&lt;/code&gt; in the HTML,
so just opening index.html would break those links.&lt;/p&gt;

&lt;p&gt;Perl&amp;#8217;s recent web superstar module
&lt;a href=&quot;wordpress-local/docroot/wp-content/themes/ub_swiss/&quot;&gt;Plack&lt;/a&gt; can do it
easily.&lt;/p&gt;

&lt;p&gt;Create a file named &lt;code&gt;plack.psgi&lt;/code&gt; with the following content:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/usr/bin/env perl

use Plack::App::File;

my &amp;#036;root = &quot;/path/to/dir;
my &amp;#036;app = Plack::App::File-&amp;gt;new(root =&amp;gt; &amp;#036;root)-&amp;gt;to_app;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then launch the &lt;code&gt;plackup&lt;/code&gt; utility by &lt;code&gt;plackup -a plack.psgi --port
5001&lt;/code&gt;&amp;#8212;that&amp;#8217;s it!&lt;/p&gt;
</description>
  </item>
  <item>
    <title>Book: Talent is Overrated by Geoff Colvin</title>
    <link>/2011/03/06#2011-02-06_review%20talent%20is%20overrated</link>
    <description>&lt;p&gt;Geoff Colvin&amp;#8217;s
&lt;a href=&quot;http://www.amazon.com/Talent-Overrated-Separates-World-Class-Performers/dp/1591842948/ref=sr_1_1?ie=UTF8&amp;amp;qid=1297014218&amp;amp;sr=8-1&quot;&gt;Talent is Overrated&lt;/a&gt;
opens with presenting new research findings showing that top
performers do not have &amp;#8220;innate gifts&amp;#8221;. Instead, their achievements are
the result of lots of &lt;em&gt;deliberate practice&lt;/em&gt;. The author backs this
claim with different research findings and exemplary biographies, then
explains the nature of great performance and the kind of practice
necessary to achieve it, concluding with a chapter on motivation and
passion.&lt;/p&gt;

&lt;p&gt;I liked this book so much that I took extensive notes, which you find
below. Here&amp;#8217;s the summary: I think it is an important work that might
change the way you think about personal and professional
development. From practice design to motivation and passion and the
nature of great performance, Colvin covers the subject from all angles
and backs his findings with lots of references.&lt;/p&gt;

&lt;h2 id=&quot;talentdoesntexistreally&quot;&gt;Talent doesn&amp;#8217;t exist? Really?&lt;/h2&gt;

&lt;p&gt;This is hard to believe when thinking of such prodigies as Einstein,
Mozart, or Michael Jordan. Colvin knows this and goes to great lengths
to present these studies and explain how, in his view, these top
performers really got to be so good. He walks the reader through the
childhoods of Mozart and Tiger Woods, and it&amp;#8217;s indeed surprising what
we find here: an extreme practice regime starting at two years of age,
designed by an expert in the field, and tens of thousands of hours of
practice before both appeared in the public as masters of their
field. Whether they have/had innate talent or not, their success
certainly didn&amp;#8217;t come easily. The author also presents a study showing
that while chess masters are incredibly good at remembering chess
boards, this only holds for boards with real, valid
positions. Presented with boards breaking the rules of chess, they do
no better than amateurs. Their memory must therefore be the result of
the years of chess training.&lt;/p&gt;

&lt;p&gt;Colvin further points out the incredible progress that has occurred
across the board in the last hundred years even though our genes
didn&amp;#8217;t change in such a short time. A 1908 Olympics record is today&amp;#8217;s
top high school level.&lt;/p&gt;

&lt;p&gt;Concluding his introduction, Colvin points out what an influence on
our lives the belief in innate talent has. Parents and teachers direct
kids to follow a course where they think they might have
talent. People themselves limit themselves and skip opportunities in
the belief to lack the necessary talent to go beyond the average.&lt;/p&gt;

&lt;h2 id=&quot;deliberatepractice&quot;&gt;Deliberate Practice&lt;/h2&gt;

&lt;p&gt;So what is this deliberate practice that leads to outstanding results,
while most people work for years without seeing much improvement? It
is designed, it can be (and is!) repeated a lot, it allows continuous
feedback, it is mentally highly demanding, and finally, it is not
fun&amp;#8212;otherwise, quips Colvin, everyone would do it. If they knew how
to design such practice, that is.&lt;/p&gt;

&lt;p&gt;The abovementioned attributes of deliberate practice show that it is
nothing like the actual work one is practicing for. This explains why
working in a job even for decades does not necessarily produce
masters.&lt;/p&gt;

&lt;p&gt;It is not quite clear whether a top performer can design her own
practice, or if she needs a coach who is an expert in training design
and can judge objectively. Tiger Woods, for instance, is still taking
lessons, while the Comedian Chris Rock designs and practices his
routines by himself.&lt;/p&gt;

&lt;p&gt;A pretty incredible story concludes this part of the book. Among the
first thinking about the design of a training regime to produce
world-class results was the Hungarian psychologist Laszlo Polgar. He
went all the way and found, via a newspaper add, a woman willing to
have children with him to raise in a way carefully designed to make
them word-class chess players. Surprisingly enough, he found one and
they had three girls&amp;#8212;all of whom became grand masters after a
childhood of rigorous training.&lt;/p&gt;

&lt;p&gt;Can we pin down a general effect of deliberate practice? What does it
do that other kinds of practice don&amp;#8217;t do? For Colvin, it&amp;#8217;s avoiding
automaticity. The brain tends to automate repeated activities to save
mental energy. This automation stops improvement. It also makes one
vulnerable to distractions because they break the pattern triggering
the automated routine. Instead, top performers remain conscious of
their activity throughout their training.&lt;/p&gt;

&lt;h2 id=&quot;howdeliberatepracticeworks&quot;&gt;How deliberate practice works&lt;/h2&gt;

&lt;p&gt;For Colvin, &amp;#8220;perceiving more&amp;#8221; is the key: more indicators, further
ahead, with less information. His chess example of the Big Blue
vs. Kasparov is a little doubtful, I felt he didn&amp;#8217;t make clear the
difference in reasoning between the human player thinking in patterns
and the computer evaluating a large number of positions in advance.&lt;/p&gt;

&lt;p&gt;Colving also points out here that knowledge plays an important
role. Experts have more and it&amp;#8217;s better consolidated. Jeff Immelt,
then head of GE, launched a study showing that among his managers,
domain knowledge beat general management knowledge. This is old news
for developers suffering under non-technical IT management, so it&amp;#8217;s
good that a business author like Colvin, who writes for Fortune in his
day job, points that out. The consolidation of knowledge affects
memory, too. No one can hold more than nine items in their mind
simultaneously (for most people it&amp;#8217;s seven items), but the items can
be bigger. A chess amateur might remember a single position, while a
master remembers a whole board.&lt;/p&gt;

&lt;h2 id=&quot;applyingtheprinciplesinourownlives&quot;&gt;Applying the principles in our own lives&lt;/h2&gt;

&lt;p&gt;The author distinguishes three models of practice depending on the
kind of task to be practiced.&lt;/p&gt;

&lt;p&gt;The music model: You know what you want to convey, like classical
music is written down, and one needs to convey it effectively. One can
break the task down into pieces and practice them independently, with
immediate feedback either by a coach or on video. A good addition is
to watch top performers and analyze what they are doing well, then
compare one&amp;#8217;s own performance to theirs, repeating the process over
and over.&lt;/p&gt;

&lt;p&gt;The chess model, known as the &amp;#8220;case method&amp;#8221; in the business world:
like chess players study individual moves from recorded games, one
studies lots of example problems. Ideally there is a known, but yet
hidden, solution, so that after deciding on an action, one can compare
one&amp;#8217;s own choice with the known one, like a chess student would study
a master&amp;#8217;s game. Of course, for practical problems it&amp;#8217;s often not
clear what the solution is, if it even exists&amp;#8212;it helps to discuss
with coaches and peers in that case.&lt;/p&gt;

&lt;p&gt;The sports model: Sports is different from classical music in that no
two situations are ever exactly alike. One practices by working on
basic conditioning and skill development. Basic conditioning in sports
is strength and endurance training, and working on cognitive skills,
math and basic science in intellectual fields of work. Skill
development means practicing certain situations repeatedly, such as
sales calls.&lt;/p&gt;

&lt;p&gt;Having this basic framework for thinking about practice, we need to
look at the practice itself. Colvin highlights three points that many
do not follow in their practice. First, there needs to be a clear goal
of what one wants to achieve, and what steps exactly will be necessary
to get there. Second, metacognition during training is crucial:
observing oneself to get a correct assessment of one&amp;#8217;s mental
processes. Third, get as much specific feedback as possible and
analyze it.&lt;/p&gt;

&lt;h2 id=&quot;innovationandcreativity&quot;&gt;Innovation and creativity&lt;/h2&gt;

&lt;p&gt;The combined impact of the internet and globalization leads to a
massive commoditization. To thrive in this environment, creativity and
innovation are key. Can we apply the principles of great performance
here?&lt;/p&gt;

&lt;p&gt;Colvin doesn&amp;#8217;t believe that creative works are the result of a flash
of insight. The evidence is conflicting. Colvin presents some
fascinating work of Dean Keith Simonton, John Hayes (CMU), and Howard
Gardner (&amp;#8220;Creative Minds&amp;#8221;). The summary is that &amp;#8220;great innovators are
nourished by knowledge&amp;#8221;; innovation grows from the past.&lt;/p&gt;

&lt;h2 id=&quot;greatperformanceinyouthandage&quot;&gt;Great performance in youth and age&lt;/h2&gt;

&lt;p&gt;In this chapter, Colvin first examines what kinds of homes are
conducive for kids to achieving top performance, then looks into
maintaining top performance in old age.&lt;/p&gt;

&lt;p&gt;This chapter didn&amp;#8217;t work as well for me as the others. His opening
teaser of the average age of Nobel prize winners now being six years
older than 100 years ago seems obvious: as science advances, things
get more and more complex, requiring more study to understand what&amp;#8217;s
been done before.&lt;/p&gt;

&lt;p&gt;Colvin&amp;#8217;s findings on the right kind of environment for children are
mainly based on Benjamin Bloom&amp;#8217;s research, and seem plausible, but
remain too general. The environment must be child-oriented and
supportive. A strong work ethic based on the goals of excelling and
spending one&amp;#8217;s time constructively is necessary.&lt;/p&gt;

&lt;h2 id=&quot;wheredoesthepassioncomefrom&quot;&gt;Where does the passion come from?&lt;/h2&gt;

&lt;p&gt;The final chapter addresses the deepest question the book asks: why do
all that hard practice? Who does it and why, and why don&amp;#8217;t the others
do the same?&lt;/p&gt;

&lt;p&gt;Colvin first reviews the research on motivation, which agrees that
intrinsic beats extrinsic motivation by far. But how is intrinsic
motivation linked to deliberate practice? Possibly through &lt;em&gt;flow&lt;/em&gt;. To
experience flow, the difficulty level needs to be just
right. Repeating the same task or practice too often makes it too
easy, so top performers could be driven to setting the bar higher and
higher to keep the flow experience.  This I found very insightful and
exciting, since Csikszentmihalyi&amp;#8217;s book
&lt;a href=&quot;http://www.amazon.com/Flow-Psychology-Experience-Mihaly-Csikszentmihalyi/dp/0061339202/ref=sr_1_1?ie=UTF8&amp;amp;qid=1297013636&amp;amp;sr=8-1&quot;&gt;Flow&lt;/a&gt;
is next on my reading list.&lt;/p&gt;

&lt;p&gt;However, it doesn&amp;#8217;t explain why people put themselves through the
grueling practice required for the very top, including lots of
failure. The author leaves this point open, saying that we simply
don&amp;#8217;t understand fully what&amp;#8217;s behind motivation and passion. He adds
an interesting observation, though: examining the childhood
experiences of many top athletes, he found that their passion for
their sport wasn&amp;#8217;t there from the start. It only developed after a few
years of practice, once they started to become really good.&lt;/p&gt;
</description>
  </item>
  <item>
    <title>Geneva JUG New Year&amp;#8217;s meeting 2011</title>
    <link>/2011/03/06#2011-01-18_geneva_jug_akka_scala</link>
    <description>&lt;p&gt;The &lt;a href=&quot;&quot;&gt;Geneva Java User&amp;#8217;s Group&lt;/a&gt; had their annual New Year&amp;#8217;s meeting
yesterday, with two invited speakers. Iulian Dragos gave an Intro to
Scala, and Jonas Bon√©r presented his actor library
&lt;a href=&quot;http://akka.io&quot;&gt;Akka&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Iulian works on Scala and with Scala with Martin Odersky at EPFL
Lausanne and Odersky&amp;#8217;s consulting company Scala Solutions. For initial
motivation, he listed some companies already using Scala in
production. Apart from the ones known in the anglophone hacker web
like Twitter and Foursquare, some big European enterprises such as
Credit Suisse, UBS, and Siemens were on the list. Iulian&amp;#8217;s
presentation was then a straightforward intro to Scala. Up to slide
13, I noted, it was all Perl in a different syntax :-) He then moved
on to more advanced features such as mix-ins. Their sensitivity to the
order in which they are included left the audience sceptical. The
parallel collections of the upcoming Scala 2.9, on the other hand,
looked great.&lt;/p&gt;

&lt;p&gt;Overall a nice intro to Scala. It suffered a bit from lack of
practical examples for the advanced language features, but that&amp;#8217;s
unavoidable given the time constraints. Speaker&amp;#8217;s note: a laser
pointer would have been very helpful for going through sample code.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://jonasboner.com&quot;&gt;Jonas Bon√©r&lt;/a&gt; is the principal author of Akka,
a very powerful actor framework written in Scala. Jonas uses Scala
since 2005. He loves Erlang and only moved on to the JVM world because
he had difficulties convincing others of its greatness. The natural
compromise was then to implement an Erlang-style platform using Scala
actors, which became Akka.&lt;/p&gt;

&lt;p&gt;Akka is very optimized. An actor uses only 600 bytes (yes, bytes) of
memory, so you can spawn millions of them. Syntax is easy and
flexible: send a message to an actor with a single bang (&lt;code&gt;!&lt;/code&gt;), &lt;code&gt;!!&lt;/code&gt;
blocks, &lt;code&gt;!!!&lt;/code&gt; returns a &lt;code&gt;Future&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;A unique property of Akka is that it combines actors with Software
Transactional Memory, usually regarded as two separate ideas to tackle
concurrency. You write&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import akka.stm. ...

atomic {
    atomic {
        // Atomic blocks are composable, so they don&apos;t break
        // encapsulation like locks.
    }
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you, for instance, send a message to an actor a1, which updates its
state atomically, messages another actor a2, which then also tries to
updates its state atomically but fails, then the whole chain will be
rolled back and retried, even if the messaging was
asynchronous. Powerful indeed.&lt;/p&gt;

&lt;p&gt;Jonas presented a fascinating integration example towards the end of
this talk. He likes the Apache Camel integration framework. Akka comes
with a Camel module. One can define an actor with, for example,
&lt;code&gt;endpoint &quot;file://foo&quot;&lt;/code&gt;. Any change to &lt;code&gt;foo&lt;/code&gt; will then be send as a
message to the actor. The other way round works, too, of course&amp;#8212;think
websockets.&lt;/p&gt;

&lt;p&gt;Almost as an aside, Jonas mentioned that Akka supports code hot-swap
like Erlang.&lt;/p&gt;

&lt;p&gt;Akka looks like a very powerful framework indeed, to be investigated.&lt;/p&gt;

&lt;p&gt;Jonas presented in a great, buddy-like way, like a fellow hacker
chatting over a beer. Some ranting and rambling only added to the
impact of the presentation. His slides were minimal and well
done&amp;#8212;great talk overall.&lt;/p&gt;
</description>
  </item>
  <item>
    <title>Book: Leading Lean Software Development by Mary and Tom Poppendieck</title>
    <link>/2011/03/06#2011-01-05_review%20leading%20lean%20software%20development</link>
    <description>&lt;p&gt;A book on software development with the subtitle &lt;em&gt;Results are not the
point&lt;/em&gt;? Is that just attention-grabbing provocation or are the authors
on to something?&lt;/p&gt;

&lt;p&gt;This is one of the first books on the management and organization of
software development that I read, so take the following notes with a
grain salt due to my lack of perspective.&lt;/p&gt;

&lt;p&gt;The Poppendiecks have been consulting on applying lean principles to
software development for years, and they have written on it before in
&lt;em&gt;Lean Software Development&lt;/em&gt; and &lt;em&gt;Implementing Lean Software
Development&lt;/em&gt; (see &lt;a href=&quot;http://www.poppendieck.com/&quot;&gt;their website&lt;/a&gt;).  The
&amp;#8220;Leading &amp;#8230;&amp;#8221; book builds on these two.  A colleague recommended and
lent this book to me, so I read it out of order.  That, and the fact
that I&amp;#8217;m not familiar with the whole &amp;#8220;lean&amp;#8221; concept beyond some
rudimentary basics, made the book somewhat difficult to digest.  Each
chapter made sense to me, but my brain is still struggling to assemble
the content into a coherent whole.&lt;/p&gt;

&lt;p&gt;Lacking the foundations of Lean, I had to look at the book at a
generic guide on best practices in management, organization, and
communication. Maybe that&amp;#8217;s not a bad way of approaching such a book.
Its structure certainly makes sense from that point of view.  Six
chapters address major factors in successful product design and
delivery: Systems Thinking, Technical Excellence, Reliable Delivery,
Relentless Improvement, Great People, Aligned Leaders.&lt;/p&gt;

&lt;p&gt;In the introduction, the authors note that since everyone sees the
world through a particular &amp;#8220;frame&amp;#8221;, different people and thus
organizations might see their surroundings in vastly different ways.
This limits the questions you ask and the alternatives you consider.
When things don&amp;#8217;t work out, your frame of reference may have been off.
Building on this observation, the book&amp;#8217;s chapters are composed of
frames, that is different views on the development process.
Real-world examples introduce and connect the frames.  This structure
allows the authors to focus on individual aspects of success while
keeping the full range of software projects in view.&lt;/p&gt;

&lt;p&gt;With 24 frames, the book packs a surprising amount of content into 250
pages. Fully summarizing it would be time-consuming and
pointless&amp;#8212;-the book itself is readable and without filler
content. Nevertheless, a few chapters or frames stood out for me.&lt;/p&gt;

&lt;p&gt;In Technical Excellence, the authors make a strong point for
emphasizing quality, for instance through test-driven development and
evolutionary iterations, and excellence, through valuing expertise
and avoiding the senseless &amp;#8220;promotion&amp;#8221; of the best developers to
managers. These points are not new to developers, but it&amp;#8217;s great to
see them put forth so strongly in a management book.&lt;/p&gt;

&lt;p&gt;Aligned Leaders contains several nuggets of insight into teams and
leadership that I found fascinating.  I&amp;#8217;ve never lead a team larger
than two part-time programmers, so I&amp;#8217;m sure someone with experience
would read these chapters through a different frame.  The authors
state that knowledge workers must necessarily be independent and
self-directed; if their job doesn&amp;#8217;t allow that, they cannot do their
best work.  Therefore, the role of a manager can only be to set the
tone and to otherwise focus on &lt;em&gt;making people better&lt;/em&gt;&amp;#8212;-through
caring, respect, and coaching.&lt;/p&gt;

&lt;p&gt;Overall, the book impressed me with its combination of insightful
content, clear and natural writing, and constant referral to
real-world examples.  You might want to start with the authors&amp;#8217;
introductory &lt;em&gt;Lean Software Development&lt;/em&gt;, though, to better understand
the underlying ideas.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Leading Lean Software Development&lt;/em&gt; by Mary and Tom
Poppendieck. Addison-Wesley, 2010.&lt;/p&gt;
</description>
  </item>
  <item>
    <title>Java anonymous classes are too verbose</title>
    <link>/2011/01/11#2010-11-11-java_anon_classes_are_too_verbose</link>
    <description>&lt;p&gt;Java doesn&amp;#8217;t have first-class functions or closures, but you can
emulate some of that with anonymous classes. Alas, they are just too
cumbersome and verbose&amp;#8212;it&amp;#8217;s not elegant anymore if you need more LoC
than with the iterative loop.&lt;/p&gt;

&lt;p&gt;Recently at work, I wanted to execute some code for each member of a
List, and I needed to know which iteration step I was at. A
straightforward solution is, obviously, the classic for loop:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;for (int i = 0; i &amp;lt; keyword.getSynonyms(); i++) {
    String synonym = keyword.getSynonyms().get(i);
    // do something
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That&amp;#8217;s fine in many cases, but it has two problems. The extra line to
get at the List element is annoying. More importantly, depending on
the List implementation the &lt;code&gt;get(i)&lt;/code&gt; operation might be in O(n),
requiring another scan of the list each time.&lt;/p&gt;

&lt;p&gt;So we could iterate normally and count ourselves:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;int order = 0;
for (String synonym : keyword.getSynonyms()) {
    // do something
    order++;
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It&amp;#8217;s better, but I needed several such loops, and I wondered if I
couldn&amp;#8217;t write all that plumbing just once. I came up with this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public abstract class Counting&amp;lt;T, E extends Throwable&amp;gt;
{        
    public void loop(Iterable&amp;lt;T&amp;gt; things) throws E
    {
        int step = 0;
        for (T t : things)
        {
            iteration(t, step);
            step++;
        }
    }

    public abstract void iteration(T thing, int step) throws E;
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As the loop body can throw exceptions, and we might want to declare
the specific kind of exception, this needs to be an additional generic
type. This breaks if you need more than one exception type.&lt;/p&gt;

&lt;p&gt;The above loop then becomes&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;new Counting&amp;lt;String, SQLException&amp;gt;()
{
    @Override public void iteration(String synonym, int step)
    throws SQLException
    {
        // do something
    }
}.loop( keyword.getSynonyms() );&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Hmmm. Even after writing an abstract class to extract the repeated
parts, and not counting my preference for opening-brace-on-new-line, I
still haven&amp;#8217;t saved a single line. Can I have &lt;code&gt;map&lt;/code&gt; and first-class
functions, please? Time for Scala?&lt;/p&gt;
</description>
  </item>
  <item>
    <title>Watching some YAPC::EU 2010 presentations</title>
    <link>/2011/01/15#2010-09-20-yapceu_talks</link>
    <description>&lt;p&gt;In August, Perl mongers gathered in Pisa for the annual
&lt;a href=&quot;http://conferences.yapceurope.org/ye2010/&quot;&gt;YAPC::EU&lt;/a&gt;, one of the
biggest Perl meetings. I couldn&amp;#8217;t make it there, but at least I
finally got to check out the
&lt;a href=&quot;http://www.youtube.com/user/yapceu2010&quot;&gt;presentation recordings&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Unfortunately, the recordings are pretty bad, for the most part. The
speakers are hard or impossible to hear, and worse, the slides are
unreadable. For technical presentations with code, that&amp;#8217;s a
dealbreaker. I know one doesn&amp;#8217;t complain about volunteer efforts,
especially when one cannot make a reasonable suggestion for
improvement. So all I want to say is that it would be great if the
organizers of next years YAPC::EU could improve on that.&lt;/p&gt;

&lt;p&gt;But then, it just means I gotta go myself next time. It&amp;#8217;s a community
event, after all.&lt;/p&gt;

&lt;p&gt;Anyway, I still made some notes on what I saw. Here are the
interesting bits.&lt;/p&gt;

&lt;p&gt;Leon Timmerman presented
&lt;a href=&quot;http://www.youtube.com/watch?v=DKo4PUKuZ8I&quot;&gt;&lt;em&gt;An alternative to XS&lt;/em&gt;&lt;/a&gt;. He
said that while XS is flexible and mature, it&amp;#8217;s yet another new
language to learn and it&amp;#8217;s not trivial. Instead, Leon is working on
using C++ templates to do the same job. Let&amp;#8217;s see how that works out.&lt;/p&gt;

&lt;p&gt;Dave Rolsky showed off
&lt;a href=&quot;http://www.youtube.com/user/yapceu2010#g/c/6546F3721A196286&quot;&gt;&lt;em&gt;Fey and Fey::ORM&lt;/em&gt;&lt;/a&gt;. It&amp;#8217;s
too bad I couldn&amp;#8217;t really follow his talk nor see any of the slides,
because I&amp;#8217;m having a really hard time with the ORMs I&amp;#8217;ve seen and I
was wondering if I&amp;#8217;m just too dumb. In his introduction Dave says that
the same happened to him, so he wrote Fey as a different kind of
ORM. I might be grossly misrepresenting, from memory, what he actually
said. I will keep Fey on the radar.&lt;/p&gt;

&lt;p&gt;Aaron Crane&amp;#8217;s
&lt;a href=&quot;http://www.youtube.com/user/yapceu2010#grid/user/348D7F53EB2BBDCA&quot;&gt;&lt;em&gt;Perl on Speed: Multicore Programming for Mortals&lt;/em&gt;&lt;/a&gt;
has clear audio, but no slides. Aaron prefers processes over
threads. It&amp;#8217;s easier, the OS does advanced scheduling for you, and not
having shared memory forces you to write a clear architecture with
data being passed at clear boundaries. Processes are cheap on Linux
anyway. However, I wonder to what extent that preference for processes
is due to
&lt;a href=&quot;http://perldoc.perl.org/perlthrtut.html#Performance-considerations&quot;&gt;Perl&amp;#8217;s less-than-optimal thread implementation&lt;/a&gt;. Erlang
processes are super cheap and work great into the thousands, per core.&lt;/p&gt;

&lt;p&gt;SawyerX presented
&lt;a href=&quot;http://www.youtube.com/user/yapceu2010#g/c/6C2680AF9864471D&quot;&gt;&lt;em&gt;When Perl Met Android&lt;/em&gt;&lt;/a&gt;,
which I found really interesting. I didn&amp;#8217;t know about SL4A, the
Scripting Layer for Android. It runs an RPC server that speaks JSON,
so different languages can easily interface with it. I only watched
the first half of Sawyer&amp;#8217;s talk as the second half consists of code
samples that you can&amp;#8217;t see in the recording. But it was good to learn
that Android.pm supports almost all of the Android API: dialogs,
sensors, GPS, text-to-speech, etc. It also supports daemons. Someone
got Plack to run&amp;#8212;-local web apps!&lt;/p&gt;

&lt;p&gt;And the price for the funniest announcement goes to Dave Cross for
Perl Vogue. &amp;#8220;Is Plack the new Black?&amp;#8221; Dave
&lt;a href=&quot;http://www.youtube.com/watch?v=Ykc4p6CeCuY&quot;&gt;announced&lt;/a&gt;
&lt;a href=&quot;http://www.perlvogue.com&quot;&gt;www.perlvogue.com&lt;/a&gt;, where Perl fashionistas
check out the latest trends.&lt;/p&gt;

&lt;p&gt;Wow, amazing how many presentations you can watch when you stop two
minutes in for most of them :-)&lt;/p&gt;
</description>
  </item>
  <item>
    <title>Towards Automatic Construction of Reusable Prediction Models for Component-Based Performance Engineering</title>
    <link>/2011/03/06#2008-02-04_Towards_Automatic_Construction</link>
    <description>&lt;p&gt;T. Kappler, H. Koziolek, K. Krogmann, and R. H. Reussner. &lt;em&gt;Towards
Automatic Construction of Reusable Prediction Models for
Component-Based Performance Engineering&lt;/em&gt;. In Proc. Software
Engineering 2008, ser. LNI, K. Herrmann and B. Br√ºgge, editors,
vol. 121, Munich, Germany, Feb. 18-22, 2008, pp. 140‚Äì154.&lt;/p&gt;

&lt;p&gt;Accepted for the Software Engineering Conference Munich 2008 (SE08).&lt;/p&gt;

&lt;p&gt;Many thanks to my co-authors for making that happen, and especially to
Prof. Dr. Reussner and Dr. Heiko Koziolek for the great mentoring, and
for letting me write the thesis at IIT Delhi.&lt;/p&gt;

&lt;p&gt;BibTeX:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@STRING{SE2008 = &quot;Software Engineering 2008&quot;}

@inproceedings{Kappler2008a,
  author = &quot;Kappler, Thomas and Koziolek, Heiko and Krogmann,
            Klaus and Reussner, Ralf H.&quot;,
  editor = &quot;Herrmann, Korbinian and Br{\&quot;u}gge, Bernd&quot;,
  title = &quot;Towards Automatic Construction of Reusable Prediction
           Models for Component-Based Performance Engineering&quot;,
  publisher = &quot;Bonner K{\&quot;o}llen Verlag&quot;,
  series = &quot;LNI&quot;,
  number = &quot;121&quot;,
  volume = &quot;121&quot;,
  year = &quot;2008&quot;,
  address = &quot;Munich, Germany&quot;,
  booktitle = SE2008,
  pages = &quot;140--154&quot;,
  month = &quot;February&quot; # &quot;18--22&quot;
}&lt;/code&gt;&lt;/pre&gt;
</description>
  </item>
  </channel>
</rss>
