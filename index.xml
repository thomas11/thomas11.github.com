<?xml version="1.0" encoding="UTF-8"?> <feed xmlns="http://www.w3.org/2005/Atom">
  <title>Thomas Kappler&#39;s site. Mostly programming and books.</title>
  <link href="http://www.thomaskappler.net/" rel="alternate"></link>
  <id>http://www.thomaskappler.net/</id>
  <updated>2013-06-05T07:28:12+02:00</updated>
  <author>
   <name>Thomas Kappler</name>
   <uri>http://www.thomaskappler.net/</uri>
  </author>
  <entry>
   <title>&#34;Land the Tech Job You Love&#34; by Andy Lester</title>
   <link href="http://www.thomaskappler.net/2013-06-05_review_land_the_tech_job_you_love.html" rel="alternate"></link>
   <updated>2013-06-05T00:00:00Z</updated>
   <id>tag:www.thomaskappler.net,2013-06-05:/2013-06-05_review_land_the_tech_job_you_love.html</id>
   <summary type="html">A great resource for job hunting techies, concise and full of valuable advice.</summary>
   <content type="html">&lt;p&gt;Every so often in a hacker&amp;rsquo;s life it&amp;rsquo;s time to get a new job. In my&#xA;own experience, and based on what I hear from peers, this is often a&#xA;pretty painful process. A few issues stand out for me: &amp;ldquo;selling&amp;rdquo;&#xA;yourself instead of being too shy, working your contacts, and thinking&#xA;like the hiring manager.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Andy Lester has written a concise book of 250 pages that addresses&#xA;these issues and many more. It has been a veritable eye-opener for me.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Andy has been a software developer and open source hacker for a long&#xA;time, but he has also been hiring technical people for a long time and&#xA;so knows both sides.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The book covers the whole process of a job search from finding open&#xA;positions, preparing your resume and writing a cover letter, to&#xA;interviewing with all its subtleties. It&amp;rsquo;s more than a collection of&#xA;&amp;ldquo;do this, do that&amp;rdquo; lists, though. What impressed me most is the focus&#xA;Andy puts on attitude and on the reasons why you should do this or&#xA;that. He emphasizes shifting your thinking from focusing on yourself&#xA;to focusing on how to help the company you&amp;rsquo;re applying at and their&#xA;hiring manager. This advice guides each step in the job search and&#xA;will put you way ahead of the candidates sending out stock cover&#xA;letters and talking about what &lt;em&gt;they&lt;/em&gt; want.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I&amp;rsquo;m trying not to gush here, but I find myself hard-pressed to find&#xA;negative points. Naturally, a book like this cannot cover all&#xA;situations you might find yourself in. But it&amp;rsquo;s a great resource to&#xA;get you started and has lots of pointers to additional resources. I&#xA;find myself reaching for this book again and again, also thanks to the&#xA;plentiful examples and concise checklists.&lt;/p&gt;&#xA;</content>
   <category term="Books"></category>
   <category term="Career"></category>
  </entry>
  <entry>
   <title>Riak and Neo4j @zhgeeks</title>
   <link href="http://www.thomaskappler.net/2013-05-23_riak_and_neo4j_zhgeeks2.html" rel="alternate"></link>
   <updated>2013-05-23T00:00:00Z</updated>
   <id>tag:www.thomaskappler.net,2013-05-23:/2013-05-23_riak_and_neo4j_zhgeeks2.html</id>
   <summary type="html">We had two great zhgeeks meetups recently: Sean Cribbs spoke about Riak and eventual consistency, and Jim Webber presented Neo4j. Sean&#39;s talk was also an intro to distributed systems with a list of foundational papers that I list in this post.</summary>
   <content type="html">&lt;p&gt;This past April we at &lt;a href=&#34;http://www.meetup.com/zhgeeks/&#34;&gt;zhgeeks&lt;/a&gt; had&#xA;the opportunity to host two great database-centric meetups.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;As an aside, I can now say &amp;ldquo;we&amp;rdquo; because &lt;a href=&#34;Muharem&#xA;Hrnjadovic&#34;&gt;Muharem Hrnjadovic&lt;/a&gt;, founder and organizer of zhgeeks, added me as a&#xA;co-organizer. Make no mistake, I didn&amp;rsquo;t do much so far and all credit&#xA;for zhgeeks goes to Muharem. I will get more involved in organizing&#xA;future meetups, though. We have a couple of good ideas, by the way, so&#xA;stay tuned!&lt;/p&gt;&#xA;&#xA;&lt;p&gt;First, &lt;a href=&#34;http://jimwebber.org/&#34;&gt;Jim Webber&lt;/a&gt;, Chief Scientist at&#xA;&lt;a href=&#34;http://www.neotechnology.com/&#34;&gt;Neo Technology&lt;/a&gt;, presented&#xA;&lt;a href=&#34;http://www.meetup.com/zhgeeks/events/97436192/&#34;&gt;Neo4j and connected data&lt;/a&gt;.&#xA;This was a relatively high-level talk where Jim spent the first half&#xA;or so on pointing out use cases for graph databases and the problem&#xA;domains for which they are best suited&amp;mdash;not surprisingly, domains&#xA;with highly interconnected data. Later on Jim showed Neo4J&amp;rsquo;s new query&#xA;language Cypher, which is a very expressive textual query language for&#xA;graphs.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;img src=&#34;/static/posts/jim webber zhgeeks.jpg&#34; /&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Jim&amp;rsquo;s a great speaker with lots of wit and plenty of humorous slides.&#xA;The audience&amp;mdash;one of the largest we had so far at zhgeeks&amp;mdash;was&#xA;captured.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;After Jim&amp;rsquo;s presentation we had a brief talk by Florian MÃ¼ller,&#xA;co-founder of &lt;a href=&#34;http://jooik.com/&#34;&gt;jooik&lt;/a&gt;, about how they use Neo4j in&#xA;their startup. It&amp;rsquo;s always a pleasure to hear of that kind of&#xA;real-world experience.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Later in April we had &lt;a href=&#34;http://seancribbs.com/&#34;&gt;Sean Cribbs&lt;/a&gt; from&#xA;&lt;a href=&#34;http://basho.com/&#34;&gt;Basho&lt;/a&gt;, makers of the&#xA;&lt;a href=&#34;http://basho.com/riak/&#34;&gt;Riak&lt;/a&gt; distributed database, presenting&#xA;&lt;a href=&#34;http://www.meetup.com/zhgeeks/events/107680222/&#34;&gt;Understanding Eventual Consistency and Riak&lt;/a&gt;.&#xA;This was again an awesome talk. Sean wasn&amp;rsquo;t afraid to go into some&#xA;technical details of distributed systems which I appreciated very&#xA;much. He structured the talk as a tour of some of the most influential&#xA;papers in distributed systems, pointing out how Riak implements each&#xA;technique and deals with the trade-offs involved. I found this to be a&#xA;great overview of the field, so I made a list of the papers and&#xA;resources Sean mentioned.&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Sean recommends the&#xA;&lt;a href=&#34;http://the-paper-trail.org/blog/&#34;&gt;Paper Trail&lt;/a&gt; blog by Henry&#xA;Robinson that has great write-ups on important topics in&#xA;distributed systems.&lt;/li&gt;&#xA;&lt;li&gt;Fischer, Lynn, Patterson 1985:&#xA;&lt;a href=&#34;http://cs-www.cs.yale.edu/homes/arvind/cs425/doc/fischer.pdf&#34;&gt;Impossibility of Distributed Consensus with One Faulty Process (pdf)&lt;/a&gt;&#xA;introduces the &amp;ldquo;FLP impossiblity&amp;rdquo;: in an asynchronous setting&#xA;there is no distributed algorithm that solves the consensus&#xA;problem of several nodes agreeing on a common value. Paper Trail&#xA;has a&#xA;&lt;a href=&#34;http://the-paper-trail.org/blog/a-brief-tour-of-flp-impossibility/&#34;&gt;good post&lt;/a&gt;&#xA;on this paper.&lt;/li&gt;&#xA;&lt;li&gt;Fox, Brewer 1999:&#xA;&lt;a href=&#34;http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.24.3690&amp;amp;rep=rep1&amp;amp;type=pdf&#34;&gt;Harvest, yield, and scalable tolerant systems (pdf)&lt;/a&gt;&#xA;focuses on what kind of compromises a distributed system can make&#xA;in case of node failures or partitions. Yield is the probability&#xA;of completing a request and harvest is a measure of the accuracy&#xA;of the response, defined as the fraction of the existing data the&#xA;system used to come up with the response. Coda Hale wrote a great&#xA;&lt;a href=&#34;http://codahale.com/you-cant-sacrifice-partition-tolerance/&#34;&gt;overview article on Harvest, yield and the CAP theorem&lt;/a&gt;.&lt;/li&gt;&#xA;&lt;li&gt;Finally, Sean touched on Leslie Lamport&amp;rsquo;s work on safety and&#xA;liveness of distributed systems in his 1977 paper&#xA;&lt;a href=&#34;http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.137.9454&#34;&gt;Proving the Correctness of Multiprocess Programs&lt;/a&gt;.&#xA;Sean did a great job of relating Lamport&amp;rsquo;s results to currently&#xA;existing algorithms and systems. The basic question is, if you&#xA;have F failures, how many nodes that are still up do you need to&#xA;respond? If you need F + 1 (at least one), it is an eventually&#xA;consistent system. A majority of nodes, 2F + 1, corresponds to&#xA;&lt;a href=&#34;http://research.microsoft.com/users/lamport/pubs/pubs.html#paxos-simple&#34;&gt;Paxos&lt;/a&gt;&#xA;and two-phase-commit. A super majority, 3F + 1, is called&#xA;&lt;a href=&#34;http://en.wikipedia.org/wiki/Byzantine_fault_tolerance&#34;&gt;Byzantine fault tolerance&lt;/a&gt;.&lt;/li&gt;&#xA;&lt;li&gt;Riak itself is heavily based on the&#xA;&lt;a href=&#34;http://www.allthingsdistributed.com/files/amazon-dynamo-sosp2007.pdf&#34;&gt;Amazon dynamo paper (pdf)&lt;/a&gt;.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;p&gt;Finally, Sean recommended the talk&#xA;&lt;a href=&#34;http://vimeo.com/52414903&#34;&gt;data structures in Riak&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;A question from the audience was what other solutions in the&#xA;bewildering space of distributed systems and databases were similar to&#xA;Riak. Among the open source ones Sean thought&#xA;&lt;a href=&#34;http://www.project-voldemort.com/voldemort/&#34;&gt;Voldemort&lt;/a&gt; to be the&#xA;closest, followed by &lt;a href=&#34;http://cassandra.apache.org/&#34;&gt;Cassandra&lt;/a&gt;.&lt;/p&gt;&#xA;</content>
   <category term="Meetups"></category>
   <category term="Databases"></category>
  </entry>
  <entry>
   <title>The examples from Tony Hoare&#39;s 1978 paper &#34;Communicating sequential processes&#34; in Go</title>
   <link href="http://www.thomaskappler.net/2013-05-09_hoares_csp_in_go.html" rel="alternate"></link>
   <updated>2013-05-09T00:00:00Z</updated>
   <id>tag:www.thomaskappler.net,2013-05-09:/2013-05-09_hoares_csp_in_go.html</id>
   <summary type="html">Tony Hoare&#39;s &#34;Communicating sequential processes&#34; is not only a very influential Computer Science paper, but it was also a main inspiration for Go. It is full of examples written in a pseudo-code designed for the paper. I translated all these examples to Go, with unit tests.</summary>
   <content type="html">&lt;p&gt;&lt;a href=&#34;https://github.com/thomas11/csp&#34;&gt;The code is on github&lt;/a&gt; as usual. I&#xA;documented it pretty extensively, and you can&#xA;&lt;a href=&#34;http://godoc.org/github.com/thomas11/csp&#34;&gt;read the documentation&lt;/a&gt;&#xA;nicely formatted on godoc.org, so there&amp;rsquo;s not much left to say here.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The point of this exercise was not to produce something usable in&#xA;production code, but to fully understand Hoare&amp;rsquo;s paper. It&amp;rsquo;s easy to&#xA;convince yourself you understood something after reading it, but only&#xA;doing or teaching makes you fully grasp it. It was an enlightening&#xA;experience, and it&amp;rsquo;s impressive to see how far ahead of his time Hoare&#xA;was when writing this. Concurrency became a big topic outside of&#xA;academia only in the last few years.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;This little project was submitted to&#xA;&lt;a href=&#34;https://news.ycombinator.com/item?id=5512600&#34;&gt;Hacker News&lt;/a&gt; and&#xA;&lt;a href=&#34;http://www.reddit.com/r/golang/comments/1bv65p/the_examples_from_tony_hoares_seminal_1978_paper/&#34;&gt;Reddit&lt;/a&gt;&#xA;(not by me) and attracted some good comments.&lt;/p&gt;&#xA;</content>
   <category term="Go"></category>
   <category term="Books"></category>
  </entry>
  <entry>
   <title>&#34;The Leprechauns of Software Engineering&#34; by Laurent Bossavit</title>
   <link href="http://www.thomaskappler.net/2013-04-15_leprechauns_of_software_engineering.html" rel="alternate"></link>
   <updated>2013-04-15T00:00:00Z</updated>
   <id>tag:www.thomaskappler.net,2013-04-15:/2013-04-15_leprechauns_of_software_engineering.html</id>
   <summary type="html">An amazing little book about a deep but not widely recognized problem in software development: &#34;How folklore turns into fact and what to do about it&#34;. Strongly recommended.</summary>
   <content type="html">&lt;p&gt;I&amp;rsquo;ll let the author introduce&#xA;&lt;a href=&#34;https://leanpub.com/leprechauns&#34;&gt;the book&lt;/a&gt; himself:&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;The software profession has a problem, widely recognized but which&#xA;nobody seems willing to do anything about. You can think of this&#xA;problem as a variant of the well known &amp;ldquo;telephone game&amp;rdquo;, where some&#xA;trivial rumor is repeated from one person to the next until it has&#xA;become distorted beyond recognition and blown up out of all&#xA;proportion.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Unfortunately, the objects of this telephone game are generally&#xA;considered cornerstone truths of the discipline, to the point that&#xA;their acceptance now seems to hinder further progress.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&#34;https://twitter.com/Morendil&#34;&gt;Bossavit&lt;/a&gt; researches the origin and the&#xA;facts behind some of these cornerstone beliefs such as the 10x&#xA;variation in productivity between developers and the famous&#xA;cost-of-change curve. What he finds isn&amp;rsquo;t pretty: often, there are&#xA;hardly any facts.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Methodically, Bossavit follows reference after reference of the&#xA;publications making these widely believed claims. He shows examples of&#xA;&amp;ldquo;telephone game&amp;rdquo; where sources are misrepresented or exaggerated,&#xA;either through careless reading or through bending them into shape for&#xA;one&amp;rsquo;s own theories.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;For instance, in chapter seven, &amp;ldquo;Chapter 7: Whoâs Afraid of The Big&#xA;Bad Waterfall?&amp;ldquo;, Bossavit shows how the now infamous, rigid waterfall&#xA;development methodology is commonly attributed to the 1970 paper&#xA;&amp;ldquo;Managing the Development of Large Software Systems&amp;rdquo; by Winston Royce.&#xA;He shows how there are now two camps interpreting this paper quite&#xA;differently. Agile revisionists say Royce actually tried to show how&#xA;such a rigid process must fail and how an iterative and incremental&#xA;one is superior. Defenders of more structured approaches say Royce&amp;rsquo;s&#xA;process was misrepresented and, while it uses a formal lifecycle&#xA;model, is not as inflexible as it&amp;rsquo;s made out to be. The problem is,&#xA;according to Bossavit both camps are wrong. For starters, the term&#xA;&amp;ldquo;waterfall&amp;rdquo; does not appear once in Royce&amp;rsquo;s paper. Also, Royce does&#xA;affirm that he considers the sequential waterfall model sound, but&#xA;only if iterative loops are added between certain phases.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;This is one of those books where you could quote every other&#xA;paragraph. I was shocked by how dangerously misrepresented some&#xA;studies were in papers citing them, and gripped by Bossavit&amp;rsquo;s&#xA;methodical deconstruction of the issues. Misleading graphs get a good&#xA;treatment: &amp;ldquo;You should cultivate a reflex of always asking this&#xA;question: what does one data point on this curve represent?&amp;ldquo;.&#xA;Similarly, fishy statistics abound.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Every programmer ought to read this book to become aware of how shaky&#xA;the underpinnings of some central beliefs of our profession are. Of&#xA;course, one should not throw the baby out with the bathwater: a claim&#xA;can be true even if a particular paper supporting it is not solid.&#xA;Nevertheless, the book opened my eyes to an issue I wasn&amp;rsquo;t really&#xA;aware of before. As Bossavit says: &amp;ldquo;But we have now reached the most&#xA;pressing problem in software engineering: low standards for research&#xA;publications.&amp;rdquo; After reading his book, I must agree.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;My former colleague &lt;a href=&#34;https://twitter.com/jervenbolleman&#34;&gt;Jerven&lt;/a&gt; made&#xA;me aware of this book, thanks!&#xA;&lt;a href=&#34;https://leanpub.com/leprechauns&#34;&gt;&amp;ldquo;The Leprechauns of Software Engineering&amp;rdquo;&lt;/a&gt;&#xA;is available directly from the author via Leanpub, in DRM-free&#xA;formats.&lt;/p&gt;&#xA;</content>
   <category term="Books"></category>
  </entry>
  <entry>
   <title>dwmstatus in Go</title>
   <link href="http://www.thomaskappler.net/2013-02-11_dwmstatus_in_go.html" rel="alternate"></link>
   <updated>2013-02-11T00:00:00Z</updated>
   <id>tag:www.thomaskappler.net,2013-02-11:/2013-02-11_dwmstatus_in_go.html</id>
   <summary type="html">I ported dwmstatus to Go, a utility to set the title of the X root window, which dwm uses to set the content of the status bar.</summary>
   <content type="html">&lt;p&gt;Recently I tried out the minimalist &lt;a href=&#34;http://dwm.suckless.org/&#34;&gt;dwm&lt;/a&gt;&#xA;window manager. I don&amp;rsquo;t know yet if I&amp;rsquo;ll stick with it, but it gave me&#xA;a nice excuse to hack a bit of Go.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Like most window managers, dwm has a status bar that can show useful&#xA;information like time and date, battery status etc. It uses a simple&#xA;and clever approach to set the contents of the status bar: it&amp;rsquo;s simply&#xA;the title of the normally invisible X root window. So all we need is a&#xA;simple utility that periodically generates a string and sets it as the&#xA;root window title.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;dwm comes with a little C program that does just that,&#xA;&lt;a href=&#34;http://dwm.suckless.org/dwmstatus/&#34;&gt;dwmstatus&lt;/a&gt;. I thought it&amp;rsquo;d be a&#xA;fun little exercise to do the same in Go, using Andrew Gallant&amp;rsquo;s&#xA;&lt;a href=&#34;http://godoc.org/github.com/BurntSushi/xgb&#34;&gt;xgb&lt;/a&gt; package. It was a&#xA;pleasure to use, works as advertised and closely follows the XGB&#xA;protocol so that all the documentation out there still applies.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The result is&#xA;&lt;a href=&#34;https://github.com/thomas11/dwmstatus&#34;&gt;github.com/thomas11/dwmstatus&lt;/a&gt;,&#xA;with a whopping 54 lines of code. That&amp;rsquo;s a lot shorter than the 128&#xA;lines of the C version, although that one also displays some default&#xA;content which mine does not. Two things stood out to me that made the&#xA;Go implementation clear and easy to write.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The &lt;code&gt;time&lt;/code&gt; package has a great API that uses channels where&#xA;appropriate. The &lt;code&gt;Tick&lt;/code&gt; function returns a channel that keeps sending&#xA;the current time in the given interval. That let&amp;rsquo;s us write the&#xA;periodic updates to the status bar like this:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;c := time.Tick(interval)&#xA;for now := range c {&#xA;    genTitle(now, &amp;amp;status)&#xA;    // ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Functions are first-class values in Go. That offers a simple and&#xA;convenient way of separating the core functionality of dwmstatus,&#xA;periodically updating the root window title, from generating the&#xA;actual status bar content, where each user might wish to show&#xA;different things. In the Go version I defined a type that&amp;rsquo;s simply a&#xA;function that, given the current time and a buffer, writes the new&#xA;status bar content into the buffer. The main entry function of&#xA;dwmstatus accepts such a function and calls it for each update,&#xA;without knowing anything about it:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;type GenTitleFunc func(now time.Time, b *bytes.Buffer)&#xA;...&#xA;// Start the process of updating the status bar. genTitle will&#xA;// be called repeatedly in the given interval.&#xA;func Run(interval time.Duration, genTitle GenTitleFunc) {&#xA;    // ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;There&amp;rsquo;s a sample implementation of &lt;code&gt;GenTitleFunc&lt;/code&gt; in dwmstatus/main.go&#xA;that I use on my Linux system to show time and date and the battery&#xA;status.&lt;/p&gt;&#xA;</content>
   <category term="Go"></category>
  </entry>
  <entry>
   <title>GDG DevFest Zurich with an intro to Go</title>
   <link href="http://www.thomaskappler.net/2012-12-10_gdg_devfest_zurich.html" rel="alternate"></link>
   <updated>2012-12-10T00:00:00Z</updated>
   <id>tag:www.thomaskappler.net,2012-12-10:/2012-12-10_gdg_devfest_zurich.html</id>
   <summary type="html">The Google Developers Group Zurich organized a great weekend of talks, hacking and networking in October. Unexpectedly, I got to present Go in an hour-long hands-on tutorial.</summary>
   <content type="html">&lt;p&gt;Before October, I had never made it to a&#xA;&lt;a href=&#34;http://www.gdgzh.ch/&#34;&gt;GDG Zurich&lt;/a&gt; event, but the&#xA;&lt;a href=&#34;https://sites.google.com/site/gdgdevfestzurich/&#34;&gt;DevFest 2012&lt;/a&gt; they&#xA;announced sounded too interesting to pass it up. I don&amp;rsquo;t want to bore&#xA;you with the minutiae of how it went down, so let me just say it was a&#xA;great and very well organized weekend. By my rough guess about 100&#xA;hackers showed up, which I found quite impressive. After casual&#xA;introductions and drinks on Friday night we spent Saturday and Sunday&#xA;in the Zurich youth hostel for talks and hacking. Big thanks to the&#xA;organizers Vadim, Michel, Corsin and Robert (see&#xA;&lt;a href=&#34;https://sites.google.com/site/gdgdevfestzurich/home/orga&#34;&gt;here&lt;/a&gt;), you&#xA;did a great job.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I really enjoyed the presentations about AppEngine by Jerome Mouton&#xA;and about the new Google Drive SDK by Nicolas Garnier. Would love to&#xA;play with these at some point.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The rest of Saturday was spent chatting and getting to know people,&#xA;until at some point I mentioned working with &lt;a href=&#34;http://golang.org/&#34;&gt;Go&lt;/a&gt;&#xA;at &lt;a href=&#34;http://nhumi.com/&#34;&gt;Nhumi&lt;/a&gt; and people got very interested. Almost&#xA;everyone had read about it, but no one had used it. There happened to&#xA;be a free slot left for a codelab on Sunday morning, so I soon found&#xA;myself with a job to do.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Since I didn&amp;rsquo;t have much time I just roughly followed the&#xA;&lt;a href=&#34;http://tour.golang.org/&#34;&gt;Tour of Go&lt;/a&gt;, skipping ahead a little&#xA;sometimes. This was a good decision as the Go devs have put a lot of&#xA;thought into its structure. In addition, I made just six&#xA;&lt;a href=&#34;https://docs.google.com/presentation/d/1ZOgBTvAoveph4NneI05dV20qn7YUbQeioaEP0D8_4uU/edit?usp=sharing&#34;&gt;slides summarizing some Go essentials from my point of view&lt;/a&gt;.&#xA;This was my &amp;ldquo;main points about Go&amp;rdquo; slide:&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Fun and productive&lt;/li&gt;&#xA;&lt;li&gt;Interfaces&lt;/li&gt;&#xA;&lt;li&gt;Different &amp;ldquo;OO&amp;rdquo;: embedded structs, methods&lt;/li&gt;&#xA;&lt;li&gt;Concurrency&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;p&gt;I gave a code example for each of the latter three points. The&#xA;audience of about 20 seemed to follow along easily and there were&#xA;plenty of questions. It was neat to respond to questions and remarks&#xA;directly by demonstrating things live in the&#xA;&lt;a href=&#34;http://play.golang.org/&#34;&gt;Go Playground&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Thanks everyone for coming, and have fun with Go!&lt;/p&gt;&#xA;</content>
   <category term="Go"></category>
   <category term="Presenting"></category>
   <category term="Meetups"></category>
  </entry>
  <entry>
   <title>Intro to Artificial Intelligence Online Course</title>
   <link href="http://www.thomaskappler.net/2011-12-22_intro_to_ai_course.html" rel="alternate"></link>
   <updated>2011-12-22T00:00:00Z</updated>
   <id>tag:www.thomaskappler.net,2011-12-22:/2011-12-22_intro_to_ai_course.html</id>
   <summary type="html">The online class was a bold experiment, bringing Stanford teaching by Sebastian Thun and Peter Norvig to over 100,000 students. I loved the experience and got a lot out of it. Here are some thoughts and selected notes.</summary>
   <content type="html">&lt;p&gt;I had always been interested in AI but ended up choosing different&#xA;majors in college. Naturally, this&#xA;&lt;a href=&#34;https://www.ai-class.com/&#34;&gt;online AI class&lt;/a&gt; couldn&amp;rsquo;t make up for that&#xA;by itself given the time constraints, but I feel it did a great job on&#xA;bringing the students up to speed in the important basics of the&#xA;field. The range of topics was wide enough to serve as a solid&#xA;foundation for further reading:&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;How to think of environments&lt;/li&gt;&#xA;&lt;li&gt;Searching through state spaces, A* search&lt;/li&gt;&#xA;&lt;li&gt;Probability and Bayes Rule&lt;/li&gt;&#xA;&lt;li&gt;Bayes Networks, D-Separation and probabilistic inference&lt;/li&gt;&#xA;&lt;li&gt;Sampling methods&lt;/li&gt;&#xA;&lt;li&gt;Machine Learning basics and k-nearest neighbors&lt;/li&gt;&#xA;&lt;li&gt;Planning under uncertainty, Markov Decision Processes&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;p&gt;The online format worked great. I enjoyed the little quizzes during&#xA;the course of each lecture because they made me pay more attention and&#xA;helped retention.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Due to work and other constraints I couldn&amp;rsquo;t give the class as much&#xA;time as I wanted, but I still finished with a score of 88%. Nothing&#xA;special given that I have a CS degree, but not too bad either. In any&#xA;case I&amp;rsquo;m proud that I took the time to sit down every week and do&#xA;this, and of having been part of this huge experiment that will&#xA;probably shape the future of learning.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Below are some of my class notes. They are not complete and you&amp;rsquo;d be&#xA;better off taking the class yourself&amp;mdash;it&amp;rsquo;s&#xA;&lt;a href=&#34;http://www.udacity.com/overview/Course/cs271&#34;&gt;available on udacity&lt;/a&gt;&#xA;now.&lt;/p&gt;&#xA;&#xA;&lt;hr /&gt;&#xA;&#xA;&lt;h2&gt;1 Welcome to AI&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;AI in a nutshell: an agent observes its environments through sensors,&#xA;and can influence it through actuators. The &lt;em&gt;control plan&lt;/em&gt; mapping&#xA;sensor input to activator output is the focus of AI. The repeated&#xA;cycle of input and output is the &lt;em&gt;Perception Action Cycle&lt;/em&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Classifying environments:&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;An environment is &lt;em&gt;fully observable&lt;/em&gt; if an agent can, at all&#xA;times, make all observations to make the optimal choice, i.e., see&#xA;the entire state of the environment (chess). If this is not&#xA;possible and the agent has to memorize previous observations&#xA;(poker), it is &lt;em&gt;partially observable&lt;/em&gt;.&lt;/li&gt;&#xA;&lt;li&gt;It can be deterministic (chess) or stochastic (dice games).&lt;/li&gt;&#xA;&lt;li&gt;The agent&amp;rsquo;s actuators can be discrete or continuous (e.g. throwing&#xA;darts: infinite possibilities of angles and acceleration).&lt;/li&gt;&#xA;&lt;li&gt;It can be benign or adversarial.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;h2&gt;2 Problem Solving&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;Definition of a problem:&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;initial state&lt;/li&gt;&#xA;&lt;li&gt;actions(s) = {a1, a2, &amp;hellip;}&lt;/li&gt;&#xA;&lt;li&gt;result(s, a) = s&amp;rsquo;&lt;/li&gt;&#xA;&lt;li&gt;goaltest(s) = T|F&lt;/li&gt;&#xA;&lt;li&gt;pathcost(s-a-&amp;gt;s-a-&amp;gt;s-&amp;hellip;) -&amp;gt; n&lt;/li&gt;&#xA;&lt;li&gt;stepcost(s, a, s&amp;rsquo;) -&amp;gt; n&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;p&gt;&lt;em&gt;State space&lt;/em&gt; = explored + frontier + unexplored&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;em&gt;Tree search&lt;/em&gt;: until the goal is reached, take a choice from the&#xA;frontier and apply all actions to it. This is a whole family of&#xA;algorithms, since the removal of the choice is critical.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;In breadth-first tree search, the three sections of the state space&#xA;correspond to three vertical regions of the tree.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Tree search backtracks, since for each tree node, the one we came from&#xA;is just another frontier node.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;We can turn the tree search into a graph search by remembering which&#xA;nodes we&amp;rsquo;ve seen already.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;In &lt;em&gt;uniform cost search&lt;/em&gt; we pick the cheapest choice first.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;For finding the goal in the shortest route as in hops, breadth-first&#xA;is optimal while depth-first is not. For finding the goal via the&#xA;cheapest route, uniform cost is optimal.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Uniform cost search is related to topological maps: we fan out from a&#xA;starting point, in circles of increasing distance from the starting&#xA;point.&lt;/p&gt;&#xA;&#xA;&lt;h3&gt;A* search&lt;/h3&gt;&#xA;&#xA;&lt;p&gt;&lt;code&gt;f = g + h&lt;/code&gt; where g(p) is the path cost and h(p) = h(final state of p)&#xA;is the estimated distance to the goal.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;A* search does not end when the goal is reached&amp;mdash;there might be&#xA;other, shorter paths. The goal test happens after selecting the next&#xA;path to be taken off the frontier.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;A* finds the lowest cost path if, for all s, h(s) &amp;lt;= true cost. In&#xA;other words, h is &lt;em&gt;optimistic&lt;/em&gt; or &lt;em&gt;admissible&lt;/em&gt;, it never overestimates.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Problem solving works when:&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;the domain is fully observable,&lt;/li&gt;&#xA;&lt;li&gt;the domain is known (available actions),&lt;/li&gt;&#xA;&lt;li&gt;the domain is discrete (finite number of actions),&lt;/li&gt;&#xA;&lt;li&gt;the domain is deterministic, and&lt;/li&gt;&#xA;&lt;li&gt;the domain is static.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;p&gt;For the implementation of paths and state spaces the core data&#xA;structure is the &lt;em&gt;node&lt;/em&gt;, with four fields: state, action (it took to&#xA;get there), cost (total), parent (preceding state). A linked list of&#xA;nodes represents a path. The two main data structures dealing with&#xA;nodes are the frontier and the explored list. The frontier is a&#xA;priority queue with an additional set for membership test. The&#xA;explored list can be a simple set.&lt;/p&gt;&#xA;&#xA;&lt;h2&gt;3 Probability in AI&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;&lt;em&gt;Bayes Networks&lt;/em&gt;: nodes are random variables. Edges signify&#xA;probabilistic influence. It&amp;rsquo;s a compact representation of a&#xA;probability distribution over a very large joint distribution of all&#xA;involved variables. The state space has the size 2^n even if the&#xA;variables were all binary.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;If X and Y are independent, &lt;code&gt;P(X,Y) = P(X)*P(Y)&lt;/code&gt;. The P(X) and P(Y)&#xA;are called &lt;em&gt;marginals&lt;/em&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;First, some simple probability review:&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Total probability: &lt;code&gt;P(Y) = P(Y|X=i)*P(X=i)&lt;/code&gt; summed over all i.&lt;/li&gt;&#xA;&lt;li&gt;Negation: &lt;code&gt;P(-X|Y) = 1 - P(X|Y)&lt;/code&gt;.&lt;/li&gt;&#xA;&lt;li&gt;Joint probabilities: &lt;code&gt;P(X,Y) = P(Y=y|X=x) * P(X=x)&lt;/code&gt; and vice&#xA;versa.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;h3&gt;Bayes Rule&lt;/h3&gt;&#xA;&#xA;&lt;p&gt;&lt;code&gt;P(A|B) = P(B|A)\*P(A) / P(B)&lt;/code&gt;. In this formula, P(B|A) is the&#xA;&lt;em&gt;likelihood&lt;/em&gt;, P(A) the &lt;em&gt;prior&lt;/em&gt;, P(B) the &lt;em&gt;marginal likelihood&lt;/em&gt;, and&#xA;P(A|B) the &lt;em&gt;posterior&lt;/em&gt;. The marginal likelihood can be replaced by the&#xA;total probability.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Drawing Bayes Rule with two nodes A and B is a Bayesian network with&#xA;two nodes A-&amp;gt;B!&lt;/p&gt;&#xA;&#xA;&lt;p&gt;How many parameters do we need to specify a Bayes Network of two&#xA;variables? Three: P(A) (from which we derive P(-A)), P(B|A), and&#xA;P(B|-A).&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Observe that using Bayes Rule, the normalizer is the same for both&#xA;P(A|B) and P(-A|B). The two cases sum to 1. So we can compute Bayes&#xA;Rule in a different way, effectively ignoring the normalizer:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;P&#39;(A|B)  = P(B|A)  P(A)&#xA;P&#39;(-A|B) = P(B|-A) P(-A)&#xA;&#xA;P(A|B)  = &amp;lt;eta&amp;gt;P&#39;(A|B)&#xA;P(-A|B) = &amp;lt;eta&amp;gt;P&#39;(-A|B)&#xA;&#xA;&amp;lt;eta&amp;gt; = 1 / (P&#39;(A|B) + P&#39;(-A|B))&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;We defer the calculation of the normalizer.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Exploiting &lt;em&gt;conditional independence&lt;/em&gt;: if T1 and T2 with values x and&#xA;y depend on A, what is P(t1|t2), given P(A), P(x|A) and P(y|A)? Using&#xA;total probability, it is &lt;code&gt;P(t2|t1,A) * P(A|t1) + P(t2|t1,-A) *&#xA;P(-A|t1)&lt;/code&gt;. But if we know A and T1 and T2 are independent, knowledge&#xA;of the first test gives me no more information about the second test.&#xA;So we can simplify this to &lt;code&gt;P(t2|A)P(A|t1) + P(t2|-A)P(-A|t1)&lt;/code&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Absolute independence does not imply conditional independence, and&#xA;vice versa.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;em&gt;Confounding causes&lt;/em&gt;: two (unobservable) nodes influence one output&#xA;variable. There&amp;rsquo;s no connection between the two influencing&#xA;variables&amp;mdash;if P(A) = x, then P(A|B=b) = x.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;em&gt;Explaining away&lt;/em&gt;: independence does not imply conditional&#xA; independence. If we have&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;S   R&#xA; \ /&#xA;  H&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;then S and R are independent. But if we observe H, they are not&#xA;independent anymore&amp;mdash;its value gives us a clue which one is more&#xA;likely.&lt;/p&gt;&#xA;&#xA;&lt;h2&gt;Bayes Networks&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;The joint probability of a BN is the product of the probabilities of&#xA;its nodes, conditioned on their incoming arcs.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;How many parameters define a BN? If the above product is &lt;code&gt;P(A) P(B)&#xA;P(C|A,B) P(D|C) P(E|C)&lt;/code&gt;, it&amp;rsquo;s ten. P(A) and P(B) are one each. P(D|C)&#xA;and P(E|C) are two each, for each possible value of C. P(C|A,B) is 4:&#xA;all combinations of A and B.&lt;/p&gt;&#xA;&#xA;&lt;h3&gt;D-Separation&lt;/h3&gt;&#xA;&#xA;&lt;p&gt;This is about &lt;em&gt;conditional independence&lt;/em&gt; in BNs, also called&#xA;&lt;em&gt;reachability&lt;/em&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;To determine independence of variables in a graph (like a BN), think&#xA;about &amp;ldquo;would knowing X help me to know more about Y?&amp;rdquo; More formally,&#xA;variables are dependent if they are connected by a path of &lt;em&gt;unknown&lt;/em&gt;&#xA;variables.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;code&gt;A -&amp;gt; UNKNOWN -&amp;gt; B&lt;/code&gt; is an &lt;em&gt;active triplet&lt;/em&gt;, &lt;code&gt;A -&amp;gt; KNOWN -&amp;gt; B&lt;/code&gt; is&#xA;&lt;em&gt;inactive&lt;/em&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;This also goes for upstream relations&amp;mdash;this is the &amp;ldquo;explaining away&amp;rdquo;&#xA;case.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;See &lt;a href=&#34;http://www.cs.ubc.ca/~murphyk/Bayes/bnintro.html&#34;&gt;Bayes Ball&lt;/a&gt; for&#xA;an easy test of conditional independence in BNs.&lt;/p&gt;&#xA;&#xA;&lt;h2&gt;4 Probabilistic Inference&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;Given a BN, we can ask &amp;ldquo;for these inputs, what are the outputs?&amp;rdquo; We&#xA;call the input &lt;em&gt;evidence&lt;/em&gt;, the output &lt;em&gt;query&lt;/em&gt;, and the interior nodes&#xA;&lt;em&gt;hidden variables&lt;/em&gt;. The answer is a complete probability distribution&#xA;over the query variables, called the &lt;em&gt;posterior distribution&lt;/em&gt;: P(Q1,&#xA;Q2, &amp;hellip;|E1=e1, &amp;hellip;).&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Evidence nodes whose value we don&amp;rsquo;t know, and query nodes we don&amp;rsquo;t&#xA;care about are hidden!&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The obvious question is which evidence has the most likely result,&#xA;i.e., the argmax over the above P(&amp;hellip;).&lt;/p&gt;&#xA;&#xA;&lt;h3&gt;Enumeration&lt;/h3&gt;&#xA;&#xA;&lt;p&gt;&lt;em&gt;Conditional probability&lt;/em&gt;: &lt;code&gt;P(Q|E) = P(Q,E) / P(E)&lt;/code&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Enumerating a BN, here for the burglary/earthquake -&amp;gt; alarm -&amp;gt;&#xA;John/Mary calls network. We sum over the probability product for all&#xA;combinations of the hidden variables (&amp;ldquo;Se&amp;rdquo; = sum over e).&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;Se(Sa( P(+b) P(e) P(A|+b,e)P(+j|a)P(+m,a) ))&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Moving invariants out of inner loops:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;P(+b) S( P(e) S(P(A|+b,e)P(+j|a)P(+m,a)) )&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;That&amp;rsquo;s still not good enough. The next step is to &lt;em&gt;maximize&#xA;independence&lt;/em&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;A &amp;ldquo;linear&amp;rdquo; BN where each node points to one other node will take O(n),&#xA;while one where each node is connected to all other nodes will take&#xA;(2^n).&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The next optimization is &lt;em&gt;variable elimination&lt;/em&gt; (4.8). First, joining&#xA;factors. Let&amp;rsquo;s say we have P&amp;reg; and P(T|R). We combine them into&#xA;P(R,T) by multiplying their tables together, through all combinations&#xA;of r and t. Then, elimination (also called marginalization): turn&#xA;P(R,T) into P(T) by summing up the P(R,T) table over r.&lt;/p&gt;&#xA;&#xA;&lt;h2&gt;Approximate Inference Sampling&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;Flip coin repeatedly, count outcomes to estimate the joint probability&#xA;distribution. In a BN&lt;/p&gt;&#xA;&#xA;&lt;p&gt;If the count of each sampled variable is chosen according to the probability&#xA;tables, the sampling approaches the true probability distribution with&#xA;infinite samples, then the sampling method is &lt;em&gt;consistent&lt;/em&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;em&gt;Rejection sampling&lt;/em&gt;: to estimate the distribution for a conditional&#xA;variable, we go through the samples and reject all those that don&amp;rsquo;t&#xA;match the condition (evidence). The problem is that if the evidence is&#xA;unlikely we need to reject most samples.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;em&gt;Likelihood weighting&lt;/em&gt; fixes this problem. We fix the evidence&#xA;variables and sample the rest, so we can keep all samples. However,&#xA;the distribution is inconsistent. To make it consistent, we attach a&#xA;probabilistic weight to each sample. For instance, if rain has a&#xA;probability of 0.4 and we&amp;rsquo;re sampling P(grass wet|rain), we are forced&#xA;to choose the 0.4 probability entry for rain in its table, so we&#xA;weight the sample with 0.4.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;em&gt;Gibb&amp;rsquo;s Sampling&lt;/em&gt; takes all evidence into account. It&amp;rsquo;s based on&#xA;Markov Chain Monte Carlo (MCMC). The idea is to sample one variable at&#xA;a time, conditioned on all the others. We initialize all variables for&#xA;the first sample. In each following iteration, we choose one variable&#xA;at random and resample it. So we randomly walk the space of variable&#xA;assignments. Even though each iteration depends on the previous one,&#xA;the method is consistent.&lt;/p&gt;&#xA;&#xA;&lt;h3&gt;Approximate Inference Sampling&lt;/h3&gt;&#xA;&#xA;&lt;p&gt;We can Flip a coin repeatedly and count the outcomes to estimate the&#xA;joint probability distribution. If the count of each sampled variable&#xA;is chosen according to the probability tables, the sampling approaches&#xA;the true probability distribution with infinite samples, then the&#xA;sampling method is &lt;em&gt;consistent&lt;/em&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;em&gt;Rejection sampling&lt;/em&gt;: to estimate the distribution for a conditional&#xA;variable, we go through the samples and reject all those that don&amp;rsquo;t&#xA;match the condition (evidence). The problem is that if the evidence is&#xA;unlikely we need to reject most samples.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;em&gt;Likelihood weighting&lt;/em&gt; fixes this problem. We fix the evidence&#xA;variables and sample the rest, so we can keep all samples. However,&#xA;the distribution is inconsistent. To make it consistent, we attach a&#xA;probabilistic weight to each sample. For instance, if rain has a&#xA;probability of 0.4 and we&amp;rsquo;re sampling P(grass wet|rain), we are forced&#xA;to choose the 0.4 probability entry for rain in its table, so we&#xA;weight the sample with 0.4.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;em&gt;Gibb&amp;rsquo;s Sampling&lt;/em&gt; takes all evidence into account. It&amp;rsquo;s based on&#xA;Markov Chain Monte Carlo (MCMC). The idea is to sample one variable at&#xA;a time, conditioned on all the others. We initialize all variables for&#xA;the first sample. In each following iteration, we choose one variable&#xA;at random and resample it. So we randomly walk the space of variable&#xA;assignments. Even though each iteration depends on the previous one,&#xA;the method is consistent.&lt;/p&gt;&#xA;&#xA;&lt;h2&gt;5 Machine Learning&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;&lt;em&gt;Machine learning&lt;/em&gt; is learning models from data. (Later note: it&amp;rsquo;s&#xA;interesting to compare this definition with Andrew Ng&amp;rsquo;s from the&#xA;Stanford Machine Learning class on coursera: giving computers the&#xA;ability to learn without being explicitly programmed.)&lt;/p&gt;&#xA;&#xA;&lt;h3&gt;Supervised Learning&lt;/h3&gt;&#xA;&#xA;&lt;p&gt;Given a &lt;em&gt;feature vector&lt;/em&gt; &lt;code&gt;x1, ..., xn -&amp;gt; y&lt;/code&gt;, y is the &lt;em&gt;target label&lt;/em&gt; or&#xA;&lt;em&gt;predictor&lt;/em&gt;. A set of feature vectors with their target labels is&#xA;called the data.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;em&gt;Occam&amp;rsquo;s Razor&lt;/em&gt;: prefer the simpler hypothesis. There is a conflict&#xA;between generalization error and training data error. Minimizing the&#xA;latter leads to overfitting.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;em&gt;Maximum Likelihood&lt;/em&gt;: given a number of discrete data points y_i, find&#xA;the P(x) that maximizes the likelihood of x in the data. With two&#xA;discrete outcomes H and S: &lt;code&gt;p(S) = q&lt;/code&gt;, &lt;code&gt;p(y_i) = q&lt;/code&gt; if y_i=S, 1-q&#xA;otherwise. Then &lt;code&gt;p(data) = multover(p(y_i) = q^(count(y_i=H) *&#xA;(1-q)^(count(Y_i=S))&lt;/code&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;We can do the counts, now we have to determine q. Maximizing p(data)&#xA;is equivalent to maximizing log(p(data)).&lt;/p&gt;&#xA;&#xA;&lt;p&gt;We can construct a BN modeling the problem. If we have a dictionary&#xA;with 12 words, the BN will have 23 parameters: 1 for P(spam), and 12&#xA;each for the spam and ham distributions. The parameters are estimated&#xA;by supervised learning using an ML estimator with training data.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;To determine whether a message is spam, given the prior P(S), we&#xA;multiply the prior with the probabilities of each word of occuring in&#xA;a spam message, and divide by this expression plus the equivalent one&#xA;for ham (total probability). Normal Bayes Theorem.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;When determing the p(w) that a word is spam by counting its occurences&#xA;in the test data spam, we risk overfitting. When a word does not occur&#xA;in the test data, the P(S) of a message containing that word will&#xA;always be 0.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;em&gt;Laplace smoothing&lt;/em&gt; addresses this. Instead of p(x) = count(x)/N, we&#xA;add a smoothing factor: &lt;code&gt;p(x) = count(x)+k / count(x) + N&lt;/code&gt;, where N is&#xA;the number of total different values.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Cross-validation: find the Laplacian k by cross-validating repeatedly.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Supervised learning can be classification (what we&amp;rsquo;ve done until now),&#xA;and regression: make continuous predictions, such as for tomorrow&amp;rsquo;s&#xA;temperature.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Suggestively: what&amp;rsquo;s the best curve through the data points? The one&#xA;that hits each point would be good, but it&amp;rsquo;s overfit of course.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Linear regression formally: Given x11, &amp;hellip;, x1n -&amp;gt; y1 to xm1, &amp;hellip;, xmn&#xA;-&amp;gt; ym, we want f(x) = y. In two dimensions: f(x) = w1*x + w0.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;We minimize the loss function modeling the residual error.&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;LOSS = sum_j(yj - w1*xj - w0)^2.&lt;/li&gt;&#xA;&lt;li&gt;w1* = argmin_w(L)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;p&gt;Because we minimize quadratic error, outliers penalize&#xA;disproportionately.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Logistic regression: if f(x) is a linear regression, z = 1 / 1 +&#xA;e^(-f(x)).&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Gradient descent: iterative method. The i+1 guess is the ith guess&#xA;minus its gradient times a small alpha (0.01). Gradient descent gets&#xA;trapped in local minima.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Which linear separator (if there is one) is preferrable? The one that&#xA;maximizes the margin, i.e., the distance to the closer data&#xA;points. This ensures that future real data will probably be on the&#xA;right side. SVMs and Boosting are popular to find this separator.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;SVMs work with kernels to enable linear separation. For instance, if&#xA;points are circular around the origin, and class + is closer than&#xA;class -, there is no linear separator. But if we map the points to&#xA;their distance from origin, there is.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;So far, all methods of supervised learning were parametric. The number&#xA;of parameters was independent of the data.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;In non-parametric methods, the number of params can grow over time.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;em&gt;Conformate&lt;/em&gt; plans are plans that are guaranteed to reach a goal&#xA;without sensing the world.&lt;/p&gt;&#xA;&#xA;&lt;h2&gt;9 Planning under uncertainty&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;We&amp;rsquo;ve covered planning, uncertainty, and learning before, but not in&#xA;combination. Where planning and uncertainty intersect, we will look at&#xA;&lt;em&gt;(Partially observable) Markov Decision Processes&lt;/em&gt; (MDPs). In&#xA;combination with learning, we&amp;rsquo;ll look at &lt;em&gt;Reinforcement Learning&lt;/em&gt;.&lt;/p&gt;&#xA;&#xA;&lt;h3&gt;MDPs&lt;/h3&gt;&#xA;&#xA;&lt;p&gt;We have states, actions, and a state transition matrix where&#xA;&lt;code&gt;T(s,a,s&#39;) = P(s&#39;|a,s)&lt;/code&gt;. A reward function R(s) defines the goal to&#xA;achieve. For now, the rewards are simply attached to states. The&#xA;problem is then to attach an action to each state so that R(s) is&#xA;maximized.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;A &lt;em&gt;policy&lt;/em&gt; assigns actions to any state (except absorbing states).&lt;/p&gt;&#xA;&#xA;&lt;p&gt;In a stochastic environment, what&amp;rsquo;s the problem with the tree approach&#xA;of conventional planning? Large branching factor, deep trees, many&#xA;states visited more than once.&lt;/p&gt;&#xA;</content>
   <category term="AI&amp;ML"></category>
   <category term="Courses"></category>
  </entry>
  <entry>
   <title>Overriding Blosxom&#39;s Time Stamping</title>
   <link href="http://www.thomaskappler.net/2011-03-20_overriding_blosxoms_mtime.html" rel="alternate"></link>
   <updated>2011-03-20T00:00:00Z</updated>
   <id>tag:www.thomaskappler.net,2011-03-20:/2011-03-20_overriding_blosxoms_mtime.html</id>
   <summary type="html">Blosxom sorts articles by the input file&#39;s mtime. Here&#39;s a patch to override that.</summary>
   <content type="html">&lt;p&gt;&lt;a href=&#34;http://blosxom.sourceforge.net/&#34;&gt;Blosxom&lt;/a&gt;, the Perl blog engine&#xA;powering this site, is amazingly flexible due to its plugin&#xA;architecture. But one aspect of its behavior is not customizable&#xA;through a plugin: it determines an article&amp;rsquo;s date by the time of the&#xA;last modification (&lt;code&gt;mtime&lt;/code&gt;) of the file containing it.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I wanted the ability to date files to arbitrary points in time, since&#xA;I sometimes write up things I did or saw long after the fact. Also, I&#xA;didn&amp;rsquo;t like that editing a published article pushes it to the front&#xA;again.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Instead, I wanted Blosxom to take an article&amp;rsquo;s date from its file&#xA;name. I follow a consistent naming scheme where each article is in a&#xA;file named &lt;code&gt;year-month-day_title&lt;/code&gt;. After parsing the date at the&#xA;beginning, we can use &lt;code&gt;DateTime&lt;/code&gt; to construct a fake &lt;code&gt;mtime&lt;/code&gt; based on&#xA;the result. If the parsing fails, we fall back to Blosxom&amp;rsquo;s standard&#xA;routine. Here&amp;rsquo;s the patch.&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;--- blosxom.cgi.orig    2011-03-20 10:33:29.002204071 +0100&#xA;+++ blosxom.cgi.mtime   2011-03-20 10:41:30.718204071 +0100&#xA;@@ -404,8 +404,35 @@&#xA;                 )&#xA;             {&#xA;&#xA;+                # thomas11: save the regex matched groups in variables&#xA;+                # to preserve them from future regex matches and for&#xA;+                # readability.&#xA;+                my $path = $1;&#xA;+                my $file_basename = $2;&#xA;+&#xA;+                # thomas11: Use the date in the file name, as in&#xA;+                # 2011-03-13_title, rather than the actual file mtime. I&#xA;+                # sometimes publish articles long after writing the&#xA;+                # initial version.&#xA;+                my $mtime;&#xA;+                if ($File::Find::name =~ /(\d{4})-(\d{2})-(\d{2})_.+/) {&#xA;+                    my ($year, $month, $day) = ($1, $2, $3);&#xA;+                    use DateTime;&#xA;+                    my $dt = DateTime-&amp;gt;new(&#xA;+                        year       =&amp;gt; $year,&#xA;+                        month      =&amp;gt; $month,&#xA;+                        day        =&amp;gt; $day,&#xA;+                        hour       =&amp;gt; 0,&#xA;+                        minute     =&amp;gt; 0,&#xA;+                        second     =&amp;gt; 0,&#xA;+                        nanosecond =&amp;gt; 0,&#xA;+                        time_zone  =&amp;gt; &#39;Europe/Zurich&#39;,&#xA;+                      );&#xA;+                    $mtime = $dt-&amp;gt;epoch();&#xA;+                } else {&#xA;                 # read modification time&#xA;-                my $mtime = stat($File::Find::name)-&amp;gt;mtime or return;&#xA;+                    $mtime = stat($File::Find::name)-&amp;gt;mtime or return;&#xA;+                }&#xA;&#xA;                 # to show or not to show future entries&#xA;                 return unless ( $show_future_entries or $mtime &amp;lt; time );&#xA;@@ -415,15 +442,15 @@&#xA;&#xA;                 # static rendering bits&#xA;                 my $static_file&#xA;-                    = &amp;quot;$static_dir/$1/index.&amp;quot; . $static_flavours[0];&#xA;+                    = &amp;quot;$static_dir/$path/index.&amp;quot; . $static_flavours[0];&#xA;                 if (   param(&#39;-all&#39;)&#xA;                     or !-f $static_file&#xA;                     or stat($static_file)-&amp;gt;mtime &amp;lt; $mtime )&#xA;                 {&#xA;-                    $indexes{$1} = 1;&#xA;+                    $indexes{$path} = 1;&#xA;                     $d = join( &#39;/&#39;, ( nice_date($mtime) )[ 5, 2, 3 ] );&#xA;                     $indexes{$d} = $d;&#xA;-                    $indexes{ ( $1 ? &amp;quot;$1/&amp;quot; : &#39;&#39; ) . &amp;quot;$2.$file_extension&amp;quot; } = 1&#xA;+                    $indexes{ ( $path ? &amp;quot;$path/&amp;quot; : &#39;&#39; ) . &amp;quot;$file_basename.$file_extension&amp;quot; } = 1&#xA;                         if $static_entries;&#xA;                 }&#xA;             }&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;</content>
   <category term="Perl"></category>
  </entry>
  <entry>
   <title>&#34;Confessions of a Public Speaker&#34; by Scott Berkun</title>
   <link href="http://www.thomaskappler.net/2011-03-20_review_confessions_of_a_public_speaker.html" rel="alternate"></link>
   <updated>2011-03-20T00:00:00Z</updated>
   <id>tag:www.thomaskappler.net,2011-03-20:/2011-03-20_review_confessions_of_a_public_speaker.html</id>
   <summary type="html">Excellent. A must-read if you want to improve your public speaking.</summary>
   <content type="html">&lt;p&gt;Scott Berkun is a former software engineer who changed his career to&#xA;being an author and public speaker. This is an interesting career&#xA;path, and in this book Berkun tells the story of how he got into&#xA;public speaking and what he picked up on the long road of mastering&#xA;this skill.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&#34;http://www.scottberkun.com/books/the-book-confessions-of-a-public-speaker/&#34;&gt;Confessions&lt;/a&gt;&#xA;is a book on public speaking, but not in a reference or text book kind&#xA;of way. In the author&amp;rsquo;s own words, it&amp;rsquo;s &amp;ldquo;highly personal and&#xA;opinionated&amp;rdquo;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Berkun mostly builds the chapters around personal stories,&#xA;experiences&amp;mdash;good and bad&amp;mdash;he had when speaking, and the lessons&#xA;learned from these experiences. While there are also plenty of&#xA;literature references to back up some claims, the meat of the book is&#xA;in this personal approach. And indeed, after reading this book one&#xA;gets the impression that this approach is essential, because in the&#xA;end successful public speaking is measured by the degree to which the&#xA;speaker emotionally captures the audience. Beyond listing tricks and&#xA;guidelines to slide design, although he touches on these subjects,&#xA;Berkun focuses on capturing the audience.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Below you&amp;rsquo;ll find notes and brief summaries I made for most of the&#xA;chapters. If you&amp;rsquo;re interested in the subject or if you simply need to&#xA;present once in a while, I strongly recommend reading the book.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;With &lt;em&gt;I Can&amp;rsquo;t See You Naked&lt;/em&gt;, Berkun starts off with a chapter to put&#xA;you at ease: no one cares as much as you do when things go&#xA;wrong. People care and remember when it went right. It&amp;rsquo;s a long&#xA;learning process to become good at presenting, and Berkun remarks &amp;ldquo;if&#xA;you&amp;rsquo;d like to be good at something, the first thing to go out the&#xA;window is the notion of perfection&amp;rdquo;. Perfection stops you from&#xA;learning and taking chances. Be yourself and be useful, with the&#xA;mistakes you make.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;em&gt;The Attack Of The Butterflies&lt;/em&gt; deals with being afraid of the&#xA;stage. Being nervous when facing a crowd is built in to humans through&#xA;evolution and there&amp;rsquo;s nothing you can do about that.  But fear is also&#xA;good because it focuses attention. All interesting things in life come&#xA;with fears: asking the cute girl for a date, applying for a job,&#xA;writing a novel.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;So what to do to make that fear manageable and even useful? Practice a&#xA;lot. By actually standing up and imagining a crowd and&#xA;presenting. Apart from improving the presentation, it makes you&#xA;comfortable and alerts to potential problems. Also, on the day of the&#xA;talk, arrive early and get accustomed to the room and the tech.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The chapter &lt;em&gt;$30,000 An Hour&lt;/em&gt; explains the lecture circuit and the&#xA;economics of public speaking. Since it&amp;rsquo;s not a goal of mine to earn&#xA;money by speaking, it wasn&amp;rsquo;t that relevant to me, but has some&#xA;interesting information. There&amp;rsquo;s a list of exemplary fees for a&#xA;one-hour lecture, topped by Bill Clinton at $150,000+.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;em&gt;How To Work A Tough Room&lt;/em&gt; is actually about the room! Berkun says its&#xA;importance is vastly underestimated and calls for more real theaters.&#xA;He presents his density theory: that not the absolute size of the&#xA;crowd matters, but its density. Facing a mostly empty room, do what&#xA;you can to make them come forward. Offer rewards!&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;em&gt;Do Not Eat The Microphone&lt;/em&gt; is titled after the expression meaning the&#xA;moment when the audience&amp;rsquo;s confidence in having its needs met is lost,&#xA;and people stop listening. How to avoid that? Berkun says, besides&#xA;following the more technical basics of good presentations, the key is&#xA;in thinking your talk through thoroughly. &amp;ldquo;All good public speaking is&#xA;based on good private thinking&amp;rdquo;. Berkun fights the myth of spontaneous&#xA;inspiration&amp;ndash;good public speeches are the product of lots of work and&#xA;practice.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Of course you also need to get your deep thoughts across. Prepare&#xA;doing four things: 1. take a strong position in the title, 2. think&#xA;carefully about your audience, 3. make your points as concise as&#xA;possible, and 4. know likely counterarguments.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;em&gt;The Science Of Not Boring People&lt;/em&gt; goes deeper into some techniques to&#xA;ensure keeping the audience with you. This highly useful chapter&#xA;covers pacing and rhythm, story telling, involving the audience, and&#xA;other subjects.  .&lt;/p&gt;&#xA;&#xA;&lt;p&gt;At some point you&amp;rsquo;ll have given a few presentations, and like in every&#xA;other field,&#xA;&lt;a href=&#34;/2011-02-06_review_talent_is_overrated.html&#34;&gt;feedback is the key to improve&lt;/a&gt;. Berkun gives tips on what questions to ask&#xA;your audience as well as on practicing by yourself at home.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;em&gt;The Clutch Is Your Friend&lt;/em&gt; gives extra advice for lectures where the&#xA;goal is to actually teach the audience something, as opposed to, for&#xA;instance, merely giving an overview of a topic or a motivational&#xA;speech. The alternate title is &amp;ldquo;Why Teaching Is Almost Impossible&amp;rdquo;&amp;ndash;in&#xA;Berkun&amp;rsquo;s view, given the difficulties in teaching a large group of&#xA;people effectively, you can only prepare and follow a few simple rules&#xA;and hope for the best. The rules: small numbers win, make it active&#xA;and interesting, and start with an insight that interests the&#xA;students.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;With &lt;em&gt;Confessions&lt;/em&gt;, a great and funny chapter ends the book: Berkun&#xA;confesses some tricks he uses and some thoughts going through his mind&#xA;frequently when speaking. You learn that everything is allowed as long&#xA;as you capture your audience, and after all, &amp;ldquo;the easiest way to be&#xA;interesting is to be honest&amp;rdquo;. If you want to know if Berkun wears&#xA;underwear when giving a talk, read this chapter.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The book has several useful appendices with concise extra information,&#xA;such as How To Make A Point. Also, the references are great. To keep&#xA;in mind: Donald A. Bligh, &lt;em&gt;What&amp;rsquo;s the Use of Lectures&lt;/em&gt;, and Ken Bain,&#xA;&lt;em&gt;What the Best College Teachers Do&lt;/em&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;As I said before, a great book, recommended without hesitation.&lt;/p&gt;&#xA;</content>
   <category term="Books"></category>
   <category term="Presenting"></category>
  </entry>
  <entry>
   <title>How to serve a static directory with Plack</title>
   <link href="http://www.thomaskappler.net/2011-02-13_plack_static_howto.html" rel="alternate"></link>
   <updated>2011-02-13T00:00:00Z</updated>
   <id>tag:www.thomaskappler.net,2011-02-13:/2011-02-13_plack_static_howto.html</id>
   <summary type="html">From directory to http://localhost:5001/page.html as simply as possible.</summary>
   <content type="html">&lt;p&gt;You have a directory containing HTML files and would like to browse it&#xA;locally. There are absolute links like &lt;code&gt;/static/site.css&lt;/code&gt; in the HTML,&#xA;so just opening index.html would break those links.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Perl&amp;rsquo;s recent web superstar module &lt;a href=&#34;http://plackperl.org/&#34;&gt;Plack&lt;/a&gt; can&#xA;do it easily.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Create a file named &lt;code&gt;plack.psgi&lt;/code&gt; with the following content:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;#!/usr/bin/env perl&#xA;&#xA;use Plack::App::File;&#xA;&#xA;my $root = &amp;quot;/path/to/dir;&#xA;my $app = Plack::App::File-&amp;gt;new(root =&amp;gt; $root)-&amp;gt;to_app;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Then launch the &lt;code&gt;plackup&lt;/code&gt; utility by &lt;code&gt;plackup -a plack.psgi --port&#xA;5001&lt;/code&gt;&amp;ndash;that&amp;rsquo;s it!&lt;/p&gt;&#xA;</content>
   <category term="Perl"></category>
   <category term="Nitty Gritty"></category>
  </entry>
  <entry>
   <title>&#34;Talent is Overrated&#34; by Geoff Colvin</title>
   <link href="http://www.thomaskappler.net/2011-02-06_review_talent_is_overrated.html" rel="alternate"></link>
   <updated>2011-02-06T00:00:00Z</updated>
   <id>tag:www.thomaskappler.net,2011-02-06:/2011-02-06_review_talent_is_overrated.html</id>
   <summary type="html">Fascinating and important. How top performers really get to be so great. Don&#39;t let a false notion of innate talent stop you.</summary>
   <content type="html">&lt;p&gt;Geoff Colvin&amp;rsquo;s&#xA;&lt;a href=&#34;http://www.amazon.com/Talent-Overrated-Separates-World-Class-Performers/dp/1591842948/ref=sr_1_1?ie=UTF8&amp;amp;qid=1297014218&amp;amp;sr=8-1&#34;&gt;Talent is Overrated&lt;/a&gt;&#xA;opens with presenting new research findings showing that top&#xA;performers do not have &amp;ldquo;innate gifts&amp;rdquo;. Instead, their achievements are&#xA;the result of lots of &lt;em&gt;deliberate practice&lt;/em&gt;. The author backs this&#xA;claim with different research findings and exemplary biographies, then&#xA;explains the nature of great performance and the kind of practice&#xA;necessary to achieve it, concluding with a chapter on motivation and&#xA;passion.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I liked this book so much that I took extensive notes, which you find&#xA;below. Here&amp;rsquo;s the summary: I think it is an important work that might&#xA;change the way you think about personal and professional&#xA;development. From practice design to motivation and passion and the&#xA;nature of great performance, Colvin covers the subject from all angles&#xA;and backs his findings with lots of references.&lt;/p&gt;&#xA;&#xA;&lt;h2&gt;Talent doesn&amp;rsquo;t exist? Really?&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;This is hard to believe when thinking of such prodigies as Einstein,&#xA;Mozart, or Michael Jordan. Colvin knows this and goes to great lengths&#xA;to present these studies and explain how, in his view, these top&#xA;performers really got to be so good. He walks the reader through the&#xA;childhoods of Mozart and Tiger Woods, and it&amp;rsquo;s indeed surprising what&#xA;we find here: an extreme practice regime starting at two years of age,&#xA;designed by an expert in the field, and tens of thousands of hours of&#xA;practice before both appeared in the public as masters of their&#xA;field. Whether they have/had innate talent or not, their success&#xA;certainly didn&amp;rsquo;t come easily. The author also presents a study showing&#xA;that while chess masters are incredibly good at remembering chess&#xA;boards, this only holds for boards with real, valid&#xA;positions. Presented with boards breaking the rules of chess, they do&#xA;no better than amateurs. Their memory must therefore be the result of&#xA;the years of chess training.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Colvin further points out the incredible progress that has occurred&#xA;across the board in the last hundred years even though our genes&#xA;didn&amp;rsquo;t change in such a short time. A 1908 Olympics record is today&amp;rsquo;s&#xA;top high school level.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Concluding his introduction, Colvin points out what an influence on&#xA;our lives the belief in innate talent has. Parents and teachers direct&#xA;kids to follow a course where they think they might have&#xA;talent. People themselves limit themselves and skip opportunities in&#xA;the belief to lack the necessary talent to go beyond the average.&lt;/p&gt;&#xA;&#xA;&lt;h2&gt;Deliberate Practice&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;So what is this deliberate practice that leads to outstanding results,&#xA;while most people work for years without seeing much improvement? It&#xA;is designed, it can be (and is!) repeated a lot, it allows continuous&#xA;feedback, it is mentally highly demanding, and finally, it is not&#xA;fun&amp;ndash;otherwise, quips Colvin, everyone would do it. If they knew how&#xA;to design such practice, that is.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The abovementioned attributes of deliberate practice show that it is&#xA;nothing like the actual work one is practicing for. This explains why&#xA;working in a job even for decades does not necessarily produce&#xA;masters.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;It is not quite clear whether a top performer can design her own&#xA;practice, or if she needs a coach who is an expert in training design&#xA;and can judge objectively. Tiger Woods, for instance, is still taking&#xA;lessons, while the Comedian Chris Rock designs and practices his&#xA;routines by himself.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;A pretty incredible story concludes this part of the book. Among the&#xA;first thinking about the design of a training regime to produce&#xA;world-class results was the Hungarian psychologist Laszlo Polgar. He&#xA;went all the way and found, via a newspaper add, a woman willing to&#xA;have children with him to raise in a way carefully designed to make&#xA;them word-class chess players. Surprisingly enough, he found one and&#xA;they had three girls&amp;ndash;all of whom became grand masters after a&#xA;childhood of rigorous training.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Can we pin down a general effect of deliberate practice? What does it&#xA;do that other kinds of practice don&amp;rsquo;t do? For Colvin, it&amp;rsquo;s avoiding&#xA;automaticity. The brain tends to automate repeated activities to save&#xA;mental energy. This automation stops improvement. It also makes one&#xA;vulnerable to distractions because they break the pattern triggering&#xA;the automated routine. Instead, top performers remain conscious of&#xA;their activity throughout their training.&lt;/p&gt;&#xA;&#xA;&lt;h2&gt;How deliberate practice works&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;For Colvin, &amp;ldquo;perceiving more&amp;rdquo; is the key: more indicators, further&#xA;ahead, with less information. His chess example of the Big Blue&#xA;vs. Kasparov is a little doubtful, I felt he didn&amp;rsquo;t make clear the&#xA;difference in reasoning between the human player thinking in patterns&#xA;and the computer evaluating a large number of positions in advance.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Colving also points out here that knowledge plays an important&#xA;role. Experts have more and it&amp;rsquo;s better consolidated. Jeff Immelt,&#xA;then head of GE, launched a study showing that among his managers,&#xA;domain knowledge beat general management knowledge. This is old news&#xA;for developers suffering under non-technical IT management, so it&amp;rsquo;s&#xA;good that a business author like Colvin, who writes for Fortune in his&#xA;day job, points that out. The consolidation of knowledge affects&#xA;memory, too. No one can hold more than nine items in their mind&#xA;simultaneously (for most people it&amp;rsquo;s seven items), but the items can&#xA;be bigger. A chess amateur might remember a single position, while a&#xA;master remembers a whole board.&lt;/p&gt;&#xA;&#xA;&lt;h2&gt;Applying the principles in our own lives&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;The author distinguishes three models of practice depending on the&#xA;kind of task to be practiced.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The music model: You know what you want to convey, like classical&#xA;music is written down, and one needs to convey it effectively. One can&#xA;break the task down into pieces and practice them independently, with&#xA;immediate feedback either by a coach or on video. A good addition is&#xA;to watch top performers and analyze what they are doing well, then&#xA;compare one&amp;rsquo;s own performance to theirs, repeating the process over&#xA;and over.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The chess model, known as the &amp;ldquo;case method&amp;rdquo; in the business world:&#xA;like chess players study individual moves from recorded games, one&#xA;studies lots of example problems. Ideally there is a known, but yet&#xA;hidden, solution, so that after deciding on an action, one can compare&#xA;one&amp;rsquo;s own choice with the known one, like a chess student would study&#xA;a master&amp;rsquo;s game. Of course, for practical problems it&amp;rsquo;s often not&#xA;clear what the solution is, if it even exists&amp;ndash;it helps to discuss&#xA;with coaches and peers in that case.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The sports model: Sports is different from classical music in that no&#xA;two situations are ever exactly alike. One practices by working on&#xA;basic conditioning and skill development. Basic conditioning in sports&#xA;is strength and endurance training, and working on cognitive skills,&#xA;math and basic science in intellectual fields of work. Skill&#xA;development means practicing certain situations repeatedly, such as&#xA;sales calls.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Having this basic framework for thinking about practice, we need to&#xA;look at the practice itself. Colvin highlights three points that many&#xA;do not follow in their practice. First, there needs to be a clear goal&#xA;of what one wants to achieve, and what steps exactly will be necessary&#xA;to get there. Second, metacognition during training is crucial:&#xA;observing oneself to get a correct assessment of one&amp;rsquo;s mental&#xA;processes. Third, get as much specific feedback as possible and&#xA;analyze it.&lt;/p&gt;&#xA;&#xA;&lt;h2&gt;Innovation and creativity&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;The combined impact of the internet and globalization leads to a&#xA;massive commoditization. To thrive in this environment, creativity and&#xA;innovation are key. Can we apply the principles of great performance&#xA;here?&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Colvin doesn&amp;rsquo;t believe that creative works are the result of a flash&#xA;of insight. The evidence is conflicting. Colvin presents some&#xA;fascinating work of Dean Keith Simonton, John Hayes (CMU), and Howard&#xA;Gardner (&amp;ldquo;Creative Minds&amp;rdquo;). The summary is that &amp;ldquo;great innovators are&#xA;nourished by knowledge&amp;rdquo;; innovation grows from the past.&lt;/p&gt;&#xA;&#xA;&lt;h2&gt;Great performance in youth and age&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;In this chapter, Colvin first examines what kinds of homes are&#xA;conducive for kids to achieving top performance, then looks into&#xA;maintaining top performance in old age.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;This chapter didn&amp;rsquo;t work as well for me as the others. His opening&#xA;teaser of the average age of Nobel prize winners now being six years&#xA;older than 100 years ago seems obvious: as science advances, things&#xA;get more and more complex, requiring more study to understand what&amp;rsquo;s&#xA;been done before.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Colvin&amp;rsquo;s findings on the right kind of environment for children are&#xA;mainly based on Benjamin Bloom&amp;rsquo;s research, and seem plausible, but&#xA;remain too general. The environment must be child-oriented and&#xA;supportive. A strong work ethic based on the goals of excelling and&#xA;spending one&amp;rsquo;s time constructively is necessary.&lt;/p&gt;&#xA;&#xA;&lt;h2&gt;Where does the passion come from?&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;The final chapter addresses the deepest question the book asks: why do&#xA;all that hard practice? Who does it and why, and why don&amp;rsquo;t the others&#xA;do the same?&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Colvin first reviews the research on motivation, which agrees that&#xA;intrinsic beats extrinsic motivation by far. But how is intrinsic&#xA;motivation linked to deliberate practice? Possibly through &lt;em&gt;flow&lt;/em&gt;. To&#xA;experience flow, the difficulty level needs to be just&#xA;right. Repeating the same task or practice too often makes it too&#xA;easy, so top performers could be driven to setting the bar higher and&#xA;higher to keep the flow experience.  This I found very insightful and&#xA;exciting, since Csikszentmihalyi&amp;rsquo;s book&#xA;&lt;a href=&#34;http://www.amazon.com/Flow-Psychology-Experience-Mihaly-Csikszentmihalyi/dp/0061339202/ref=sr_1_1?ie=UTF8&amp;amp;qid=1297013636&amp;amp;sr=8-1&#34;&gt;Flow&lt;/a&gt;&#xA;is next on my reading list.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;However, it doesn&amp;rsquo;t explain why people put themselves through the&#xA;grueling practice required for the very top, including lots of&#xA;failure. The author leaves this point open, saying that we simply&#xA;don&amp;rsquo;t understand fully what&amp;rsquo;s behind motivation and passion. He adds&#xA;an interesting observation, though: examining the childhood&#xA;experiences of many top athletes, he found that their passion for&#xA;their sport wasn&amp;rsquo;t there from the start. It only developed after a few&#xA;years of practice, once they started to become really good.&lt;/p&gt;&#xA;</content>
   <category term="Books"></category>
   <category term="Personal Development"></category>
  </entry>
  <entry>
   <title>Geneva JUG New Year&#39;s meeting 2011</title>
   <link href="http://www.thomaskappler.net/2011-01-18_geneva_jug_akka_scala.html" rel="alternate"></link>
   <updated>2011-01-18T00:00:00Z</updated>
   <id>tag:www.thomaskappler.net,2011-01-18:/2011-01-18_geneva_jug_akka_scala.html</id>
   <summary type="html">Iulian Dragos on Scala &amp; Jonas BonÃ©r on Akka.</summary>
   <content type="html">&lt;p&gt;The &lt;a href=&#34;http://genevajug.ch/&#34;&gt;Geneva Java User&amp;rsquo;s Group&lt;/a&gt; had their annual&#xA;New Year&amp;rsquo;s meeting yesterday, with two invited speakers. Iulian Dragos&#xA;gave an Intro to Scala, and Jonas BonÃ©r presented his actor library&#xA;&lt;a href=&#34;http://akka.io&#34;&gt;Akka&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Iulian works on Scala and with Scala with Martin Odersky at EPFL&#xA;Lausanne and Odersky&amp;rsquo;s consulting company Scala Solutions. For initial&#xA;motivation, he listed some companies already using Scala in&#xA;production. Apart from the ones known in the anglophone hacker web&#xA;like Twitter and Foursquare, some big European enterprises such as&#xA;Credit Suisse, UBS, and Siemens were on the list. Iulian&amp;rsquo;s&#xA;presentation was then a straightforward intro to Scala. Up to slide&#xA;13, I noted, it was all Perl in a different syntax :-) He then moved&#xA;on to more advanced features such as mix-ins. Their sensitivity to the&#xA;order in which they are included left the audience sceptical. The&#xA;parallel collections of the upcoming Scala 2.9, on the other hand,&#xA;looked great.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Overall a nice intro to Scala. It suffered a bit from lack of&#xA;practical examples for the advanced language features, but that&amp;rsquo;s&#xA;unavoidable given the time constraints. Speaker&amp;rsquo;s note: a laser&#xA;pointer would have been very helpful for going through sample code.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&#34;http://jonasboner.com&#34;&gt;Jonas BonÃ©r&lt;/a&gt; is the principal author of Akka,&#xA;a very powerful actor framework written in Scala. Jonas uses Scala&#xA;since 2005. He loves Erlang and only moved on to the JVM world because&#xA;he had difficulties convincing others of its greatness. The natural&#xA;compromise was then to implement an Erlang-style platform using Scala&#xA;actors, which became Akka.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Akka is very optimized. An actor uses only 600 bytes (yes, bytes) of&#xA;memory, so you can spawn millions of them. Syntax is easy and&#xA;flexible: send a message to an actor with a single bang (&lt;code&gt;!&lt;/code&gt;), &lt;code&gt;!!&lt;/code&gt;&#xA;blocks, &lt;code&gt;!!!&lt;/code&gt; returns a &lt;code&gt;Future&lt;/code&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;A unique property of Akka is that it combines actors with Software&#xA;Transactional Memory, usually regarded as two separate ideas to tackle&#xA;concurrency. You write&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;import akka.stm. ...&#xA;&#xA;atomic {&#xA;    atomic {&#xA;        // Atomic blocks are composable, so they don&#39;t break&#xA;        // encapsulation like locks.&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;If you, for instance, send a message to an actor a1, which updates its&#xA;state atomically, messages another actor a2, which then also tries to&#xA;updates its state atomically but fails, then the whole chain will be&#xA;rolled back and retried, even if the messaging was&#xA;asynchronous. Powerful indeed.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Jonas presented a fascinating integration example towards the end of&#xA;this talk. He likes the Apache Camel integration framework. Akka comes&#xA;with a Camel module. One can define an actor with, for example,&#xA;&lt;code&gt;endpoint &amp;quot;file://foo&amp;quot;&lt;/code&gt;. Any change to &lt;code&gt;foo&lt;/code&gt; will then be send as a&#xA;message to the actor. The other way round works, too, of course&amp;ndash;think&#xA;websockets.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Almost as an aside, Jonas mentioned that Akka supports code hot-swap&#xA;like Erlang.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Akka looks like a very powerful framework indeed, to be investigated.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Jonas presented in a great, buddy-like way, like a fellow hacker&#xA;chatting over a beer. Some ranting and rambling only added to the&#xA;impact of the presentation. His slides were minimal and well&#xA;done&amp;ndash;great talk overall.&lt;/p&gt;&#xA;</content>
   <category term="Meetups"></category>
   <category term="Java"></category>
   <category term="Scala"></category>
  </entry>
  <entry>
   <title>&#34;Leading Lean Software Development&#34; by Mary and Tom Poppendieck</title>
   <link href="http://www.thomaskappler.net/2011-01-05_review_leading_lean_software_development.html" rel="alternate"></link>
   <updated>2011-01-05T00:00:00Z</updated>
   <id>tag:www.thomaskappler.net,2011-01-05:/2011-01-05_review_leading_lean_software_development.html</id>
   <summary type="html">Insightful, clear and thought-provoking; though not a comprehensive hands-on guide.</summary>
   <content type="html">&lt;p&gt;A book on software development with the subtitle &lt;em&gt;Results are not the&#xA;point&lt;/em&gt;? Is that just attention-grabbing provocation or are the authors&#xA;on to something?&lt;/p&gt;&#xA;&#xA;&lt;p&gt;This is one of the first books on the management and organization of&#xA;software development that I read, so take the following notes with a&#xA;grain salt due to my lack of perspective.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The Poppendiecks have been consulting on applying lean principles to&#xA;software development for years, and they have written on it before in&#xA;&lt;em&gt;Lean Software Development&lt;/em&gt; and &lt;em&gt;Implementing Lean Software&#xA;Development&lt;/em&gt; (see &lt;a href=&#34;http://www.poppendieck.com/&#34;&gt;their website&lt;/a&gt;).  The&#xA;&amp;ldquo;Leading &amp;hellip;&amp;rdquo; book builds on these two.  A colleague recommended and&#xA;lent this book to me, so I read it out of order.  That, and the fact&#xA;that I&amp;rsquo;m not familiar with the whole &amp;ldquo;lean&amp;rdquo; concept beyond some&#xA;rudimentary basics, made the book somewhat difficult to digest.  Each&#xA;chapter made sense to me, but my brain is still struggling to assemble&#xA;the content into a coherent whole.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Lacking the foundations of Lean, I had to look at the book at a&#xA;generic guide on best practices in management, organization, and&#xA;communication. Maybe that&amp;rsquo;s not a bad way of approaching such a book.&#xA;Its structure certainly makes sense from that point of view.  Six&#xA;chapters address major factors in successful product design and&#xA;delivery: Systems Thinking, Technical Excellence, Reliable Delivery,&#xA;Relentless Improvement, Great People, Aligned Leaders.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;In the introduction, the authors note that since everyone sees the&#xA;world through a particular &amp;ldquo;frame&amp;rdquo;, different people and thus&#xA;organizations might see their surroundings in vastly different ways.&#xA;This limits the questions you ask and the alternatives you consider.&#xA;When things don&amp;rsquo;t work out, your frame of reference may have been off.&#xA;Building on this observation, the book&amp;rsquo;s chapters are composed of&#xA;frames, that is different views on the development process.&#xA;Real-world examples introduce and connect the frames.  This structure&#xA;allows the authors to focus on individual aspects of success while&#xA;keeping the full range of software projects in view.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;With 24 frames, the book packs a surprising amount of content into 250&#xA;pages. Fully summarizing it would be time-consuming and pointless&amp;ndash;the&#xA;book itself is readable and without filler content. Nevertheless, a&#xA;few chapters or frames stood out for me.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;In Technical Excellence, the authors make a strong point for&#xA;emphasizing quality, for instance through test-driven development and&#xA;evolutionary iterations, and excellence, through valuing expertise&#xA;and avoiding the senseless &amp;ldquo;promotion&amp;rdquo; of the best developers to&#xA;managers. These points are not new to developers, but it&amp;rsquo;s great to&#xA;see them put forth so strongly in a management book.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Aligned Leaders contains several nuggets of insight into teams and&#xA;leadership that I found fascinating.  I&amp;rsquo;ve never lead a team larger&#xA;than two part-time programmers, so I&amp;rsquo;m sure someone with experience&#xA;would read these chapters through a different frame.  The authors&#xA;state that knowledge workers must necessarily be independent and&#xA;self-directed; if their job doesn&amp;rsquo;t allow that, they cannot do their&#xA;best work.  Therefore, the role of a manager can only be to set the&#xA;tone and to otherwise focus on &lt;em&gt;making people better&lt;/em&gt;&amp;ndash;through caring,&#xA;respect, and coaching.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Overall, the book impressed me with its combination of insightful&#xA;content, clear and natural writing, and constant referral to&#xA;real-world examples.  You might want to start with the authors&amp;rsquo;&#xA;introductory &lt;em&gt;Lean Software Development&lt;/em&gt;, though, to better understand&#xA;the underlying ideas.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;em&gt;Leading Lean Software Development&lt;/em&gt; by Mary and Tom&#xA;Poppendieck. Addison-Wesley, 2010.&lt;/p&gt;&#xA;</content>
   <category term="Books"></category>
  </entry>
  <entry>
   <title>Java anonymous classes are too verbose</title>
   <link href="http://www.thomaskappler.net/2010-11-11-java_anon_classes_are_too_verbose.html" rel="alternate"></link>
   <updated>2010-11-11T00:00:00Z</updated>
   <id>tag:www.thomaskappler.net,2010-11-11:/2010-11-11-java_anon_classes_are_too_verbose.html</id>
   <summary type="html">No fun emulating closures.</summary>
   <content type="html">&lt;p&gt;Java doesn&amp;rsquo;t have first-class functions or closures, but you can&#xA;emulate some of that with anonymous classes. Alas, they are just too&#xA;cumbersome and verbose&amp;ndash;it&amp;rsquo;s not elegant anymore if you need more LoC&#xA;than with the iterative loop.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Recently at work, I wanted to execute some code for each member of a&#xA;List, and I needed to know which iteration step I was at. A&#xA;straightforward solution is, obviously, the classic for loop:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;for (int i = 0; i &amp;lt; keyword.getSynonyms(); i++) {&#xA;    String synonym = keyword.getSynonyms().get(i);&#xA;    // do something&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;That&amp;rsquo;s fine in many cases, but it has two problems. The extra line to&#xA;get at the List element is annoying. More importantly, depending on&#xA;the List implementation the &lt;code&gt;get(i)&lt;/code&gt; operation might be in O(n),&#xA;requiring another scan of the list each time.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;So we could iterate normally and count ourselves:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;int order = 0;&#xA;for (String synonym : keyword.getSynonyms()) {&#xA;    // do something&#xA;    order++;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;It&amp;rsquo;s better, but I needed several such loops, and I wondered if I&#xA;couldn&amp;rsquo;t write all that plumbing just once. I came up with this:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;public abstract class Counting&amp;lt;T, E extends Throwable&amp;gt;&#xA;{        &#xA;    public void loop(Iterable&amp;lt;T&amp;gt; things) throws E&#xA;    {&#xA;        int step = 0;&#xA;        for (T t : things)&#xA;        {&#xA;            iteration(t, step);&#xA;            step++;&#xA;        }&#xA;    }&#xA;&#xA;    public abstract void iteration(T thing, int step) throws E;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;As the loop body can throw exceptions, and we might want to declare&#xA;the specific kind of exception, this needs to be an additional generic&#xA;type. This breaks if you need more than one exception type.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The above loop then becomes&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;new Counting&amp;lt;String, SQLException&amp;gt;()&#xA;{&#xA;    @Override public void iteration(String synonym, int step)&#xA;    throws SQLException&#xA;    {&#xA;        // do something&#xA;    }&#xA;}.loop( keyword.getSynonyms() );&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Hmmm. Even after writing an abstract class to extract the repeated&#xA;parts, and not counting my preference for opening-brace-on-new-line, I&#xA;still haven&amp;rsquo;t saved a single line. Can I have &lt;code&gt;map&lt;/code&gt; and first-class&#xA;functions, please? Time for Scala?&lt;/p&gt;&#xA;</content>
   <category term="Java"></category>
   <category term="Functional Programming"></category>
  </entry>
  <entry>
   <title>Watching some YAPC::EU 2010 presentations</title>
   <link href="http://www.thomaskappler.net/2010-09-20-yapceu_talks.html" rel="alternate"></link>
   <updated>2010-09-20T00:00:00Z</updated>
   <id>tag:www.thomaskappler.net,2010-09-20:/2010-09-20-yapceu_talks.html</id>
   <summary type="html">Where Plack is the new black. And recording talks is difficult.</summary>
   <content type="html">&lt;p&gt;In August, Perl mongers gathered in Pisa for the annual&#xA;&lt;a href=&#34;http://conferences.yapceurope.org/ye2010/&#34;&gt;YAPC::EU&lt;/a&gt;, one of the&#xA;biggest Perl meetings. I couldn&amp;rsquo;t make it there, but at least I&#xA;finally got to check out the&#xA;&lt;a href=&#34;http://www.youtube.com/user/yapceu2010&#34;&gt;presentation recordings&lt;/a&gt;.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Unfortunately, the recordings are pretty bad, for the most part. The&#xA;speakers are hard or impossible to hear, and worse, the slides are&#xA;unreadable. For technical presentations with code, that&amp;rsquo;s a&#xA;dealbreaker. I know one doesn&amp;rsquo;t complain about volunteer efforts,&#xA;especially when one cannot make a reasonable suggestion for&#xA;improvement. So all I want to say is that it would be great if the&#xA;organizers of next year&amp;rsquo;s YAPC::EU could improve on that.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;But then, it just means I gotta go myself next time. It&amp;rsquo;s a community&#xA;event, after all.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Anyway, I still made some notes on what I saw. Here are the&#xA;interesting bits.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Leon Timmerman presented&#xA;&lt;a href=&#34;http://www.youtube.com/watch?v=DKo4PUKuZ8I&#34;&gt;&lt;em&gt;An alternative to XS&lt;/em&gt;&lt;/a&gt;. He&#xA;said that while XS is flexible and mature, it&amp;rsquo;s yet another new&#xA;language to learn and it&amp;rsquo;s not trivial. Instead, Leon is working on&#xA;using C++ templates to do the same job. Let&amp;rsquo;s see how that works out.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Dave Rolsky showed off&#xA;&lt;a href=&#34;http://www.youtube.com/user/yapceu2010#g/c/6546F3721A196286&#34;&gt;&lt;em&gt;Fey and Fey::ORM&lt;/em&gt;&lt;/a&gt;. It&amp;rsquo;s&#xA;too bad I couldn&amp;rsquo;t really follow his talk nor see any of the slides,&#xA;because I&amp;rsquo;m having a really hard time with the ORMs I&amp;rsquo;ve seen and I&#xA;was wondering if I&amp;rsquo;m just too dumb. In his introduction Dave says that&#xA;the same happened to him, so he wrote Fey as a different kind of&#xA;ORM. I might be grossly misrepresenting, from memory, what he actually&#xA;said. I will keep Fey on the radar.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Aaron Crane&amp;rsquo;s&#xA;&lt;a href=&#34;http://www.youtube.com/user/yapceu2010#grid/user/348D7F53EB2BBDCA&#34;&gt;&lt;em&gt;Perl on Speed: Multicore Programming for Mortals&lt;/em&gt;&lt;/a&gt;&#xA;has clear audio, but no slides. Aaron prefers processes over&#xA;threads. It&amp;rsquo;s easier, the OS does advanced scheduling for you, and not&#xA;having shared memory forces you to write a clear architecture with&#xA;data being passed at clear boundaries. Processes are cheap on Linux&#xA;anyway. However, I wonder to what extent that preference for processes&#xA;is due to&#xA;&lt;a href=&#34;http://perldoc.perl.org/perlthrtut.html#Performance-considerations&#34;&gt;Perl&amp;rsquo;s less-than-optimal thread implementation&lt;/a&gt;. Erlang&#xA;processes are super cheap and work great into the thousands, per core.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;SawyerX presented&#xA;&lt;a href=&#34;http://www.youtube.com/user/yapceu2010#g/c/6C2680AF9864471D&#34;&gt;&lt;em&gt;When Perl Met Android&lt;/em&gt;&lt;/a&gt;,&#xA;which I found really interesting. I didn&amp;rsquo;t know about SL4A, the&#xA;Scripting Layer for Android. It runs an RPC server that speaks JSON,&#xA;so different languages can easily interface with it. I only watched&#xA;the first half of Sawyer&amp;rsquo;s talk as the second half consists of code&#xA;samples that you can&amp;rsquo;t see in the recording. But it was good to learn&#xA;that Android.pm supports almost all of the Android API: dialogs,&#xA;sensors, GPS, text-to-speech, etc. It also supports daemons. Someone&#xA;got Plack to run&amp;mdash;local web apps!&lt;/p&gt;&#xA;&#xA;&lt;p&gt;And the price for the funniest announcement goes to Dave Cross for&#xA;Perl Vogue. &amp;ldquo;Is Plack the new Black?&amp;rdquo; Dave&#xA;&lt;a href=&#34;http://www.youtube.com/watch?v=Ykc4p6CeCuY&#34;&gt;announced&lt;/a&gt;&#xA;&lt;a href=&#34;http://www.perlvogue.com&#34;&gt;www.perlvogue.com&lt;/a&gt;, where Perl fashionistas&#xA;check out the latest trends.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Wow, amazing how many presentations you can watch when you stop two&#xA;minutes in for most of them :-)&lt;/p&gt;&#xA;</content>
   <category term="Perl"></category>
  </entry>
  <entry>
   <title>Presenting &#34;Practical RDF in Perl&#34; at FrOSCamp Zurich</title>
   <link href="http://www.thomaskappler.net/2010-09-17-froscamp_zurich.html" rel="alternate"></link>
   <updated>2010-09-17T00:00:00Z</updated>
   <id>tag:www.thomaskappler.net,2010-09-17:/2010-09-17-froscamp_zurich.html</id>
   <summary type="html">Presenting &#34;Practical RDF in Perl&#34;, hanging out at the Perl booth and drinking free-as-in-freedom beer at the Free and Open Source Camp in Zurich, a fun little meeting. Plus a somewhat critical self-review of my talk.</summary>
   <content type="html">&lt;p&gt;So, another one of those belated meeting/event reports: on 2010-09-17,&#xA;I was in Zurich for the first-ever&#xA;&lt;a href=&#34;http://wiki.froscamp.org/Welcome&#34;&gt;FrOSCamp&lt;/a&gt;. It was an Open&#xA;Source/Free Software event with an exhibition floor, talks, and &amp;ldquo;a&#xA;fancy party with creative commons licensed beer and music&amp;rdquo;&amp;mdash;what&amp;rsquo;s&#xA;not to like!&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I presented my &amp;ldquo;Praktisches RDF in Perl&amp;rdquo; talk that I recycled from the&#xA;&lt;a href=&#34;https://jugglingbits.wordpress.com/2010/06/20/semantic-hacking-rdf-in-perl-presentation/&#34;&gt;German Perl Workshop&lt;/a&gt;,&#xA;to spread the word some more. This time, I had prepared an English&#xA;version, but as I only had German speakers in the audience, I&#xA;presented in German.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Unfortunately my presentation only drew a handful of people this&#xA;time. Note to self: work on the abstract some more. I had suspected&#xA;that my FrOSCamp one was wordy and not catchy, but didn&amp;rsquo;t get around&#xA;to rewriting it. At least the audience were pretty engaged and asked&#xA;lots of questions, which I prefer to a larger crowd that&amp;rsquo;s half&#xA;asleep.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;The presentation was recorded and is now&#xA;&lt;a href=&#34;http://www.multimedia.ethz.ch/conferences/2010/froscamp/?doi=10.3930/ETHZ/AV-13ff192d-43b9-4628-9ff4-6e4f69f2e01f&#34;&gt;online as slides+audio&lt;/a&gt;. This&#xA;was a first for me. I could forget about it while presenting, but I&#xA;was pretty nervous listening to it for the first time, not sure what&#xA;mess of incoherent rambling and half-finished sentences to&#xA;expect. Fortunately, I found it ok in the end. Of course, I found&#xA;several things to improve, but I guess that&amp;rsquo;s expected for someone who&#xA;doesn&amp;rsquo;t present often and is just getting started. My list of the main&#xA;points to improve is:&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;The introduction should be much shorter and more focussed. A bit&#xA;like a sales pitch, not as in being obnoxious and fake, but as in&#xA;focussed on getting the audience&amp;rsquo;s attention and appreciation for&#xA;the topic.&lt;/li&gt;&#xA;&lt;li&gt;Too many sentences didn&amp;rsquo;t flow properly. Simply doing one or two&#xA;more dry runs should fix that.&lt;/li&gt;&#xA;&lt;li&gt;Have some more visualizations such as diagrams on the slides.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;p&gt;On the other hand, I was pleased with a few things about my&#xA;presentation: the style of having little text on the slides and more&#xA;verbal explanation worked well, the code samples seemed to be the&#xA;right size to digest during a talk, and the questions at the end&#xA;showed that people had gotten the key points.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Before my presentation, I got to see&#xA;&lt;a href=&#34;http://www.renee-baecker.de/&#34;&gt;Renee Baecker&lt;/a&gt;&amp;rsquo;s talk about&#xA;&lt;a href=&#34;http://search.cpan.org/perldoc?Perl::Critic&#34;&gt;Perl::Critic&lt;/a&gt;. I&amp;rsquo;m using&#xA;it on my code and thus knew the basics, but I appreciated the advanced&#xA;example towards the end, where Renee walked us through writing our own&#xA;critic rules. This works via&#xA;&lt;a href=&#34;http://search.cpan.org/perldoc?PPI&#34;&gt;PPI&lt;/a&gt;, so you can find patterns in&#xA;the AST that match the constructs you want to check. I also found it&#xA;interesting to hear Renee&amp;rsquo;s personal experience with the severity&#xA;levels: he&amp;rsquo;s typically on 3, sometimes 2, but 1 is too harsh.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Other than that, I was mainly hanging out at the Perl booth, a first&#xA;for me! The booth was staffed by Renee and Roman from Winterthur (CH),&#xA;two really nice guys whom I had a great time with, discussing&#xA;everything from Perl modules to freelancing.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;BTW, remember the blurb from the FrOSCamp website I quoted at the top&#xA;about creative commons licensed beer?&#xA;&lt;a href=&#34;http://www.freebeer.ch/&#34;&gt;That wasn&amp;rsquo;t a joke&lt;/a&gt;. FreeBeer is an organic&#xA;beer, produced by an independent brewery near Zurich, and the recipe&#xA;is online under a CC license. And it tastes great! A cloudy, full&#xA;blonde just how I like it :-)&lt;/p&gt;&#xA;</content>
   <category term="Perl"></category>
   <category term="Presenting"></category>
   <category term="SemanticWeb"></category>
  </entry>
  <entry>
   <title>Towards Automatic Construction of Reusable Prediction Models for Component-Based Performance Engineering</title>
   <link href="http://www.thomaskappler.net/2008-02-04_Towards_Automatic_Construction.html" rel="alternate"></link>
   <updated>2008-02-04T00:00:00Z</updated>
   <id>tag:www.thomaskappler.net,2008-02-04:/2008-02-04_Towards_Automatic_Construction.html</id>
   <summary type="html">The paper about my Master&#39;s Thesis, doing static code analysis for Java.</summary>
   <content type="html">&lt;p&gt;T. Kappler, H. Koziolek, K. Krogmann, and R. H. Reussner. &lt;em&gt;Towards&#xA;Automatic Construction of Reusable Prediction Models for&#xA;Component-Based Performance Engineering&lt;/em&gt;. In Proc. Software&#xA;Engineering 2008, ser. LNI, K. Herrmann and B. BrÃ¼gge, editors,&#xA;vol. 121, Munich, Germany, Feb. 18-22, 2008, pp. 140â154.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Accepted for the Software Engineering Conference Munich 2008 (SE08).&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Many thanks to my co-authors for making that happen, and especially to&#xA;Prof. Dr. Reussner and Dr. Heiko Koziolek for the great mentoring, and&#xA;for letting me write the thesis at IIT Delhi.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;BibTeX:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;@STRING{SE2008 = &amp;quot;Software Engineering 2008&amp;quot;}&#xA;&#xA;@inproceedings{Kappler2008a,&#xA;  author = &amp;quot;Kappler, Thomas and Koziolek, Heiko and Krogmann,&#xA;            Klaus and Reussner, Ralf H.&amp;quot;,&#xA;  editor = &amp;quot;Herrmann, Korbinian and Br{\&amp;quot;u}gge, Bernd&amp;quot;,&#xA;  title = &amp;quot;Towards Automatic Construction of Reusable Prediction&#xA;           Models for Component-Based Performance Engineering&amp;quot;,&#xA;  publisher = &amp;quot;Bonner K{\&amp;quot;o}llen Verlag&amp;quot;,&#xA;  series = &amp;quot;LNI&amp;quot;,&#xA;  number = &amp;quot;121&amp;quot;,&#xA;  volume = &amp;quot;121&amp;quot;,&#xA;  year = &amp;quot;2008&amp;quot;,&#xA;  address = &amp;quot;Munich, Germany&amp;quot;,&#xA;  booktitle = SE2008,&#xA;  pages = &amp;quot;140--154&amp;quot;,&#xA;  month = &amp;quot;February&amp;quot; # &amp;quot;18--22&amp;quot;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;</content>
   <category term="Publications"></category>
  </entry>
 </feed>