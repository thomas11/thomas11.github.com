<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>Thomas Kappler</title>
    <link>/2010-09-20-yapceu_talks.rss</link>
    <description>Thomas Kappler's personal/programming site.</description>
    <language>en</language>
    <docs>http://blogs.law.harvard.edu/tech/rss</docs>
    <generator>blosxom/2.1.2</generator>

  <item>
    <title>Watching some YAPC::EU 2010 presentations</title>
    <pubDate>Wed, 09 Mar 2011 07:37:00 +0100</pubDate>
    <link>/2011/03/09#2010-09-20-yapceu_talks</link>
    <category></category>
    <guid isPermaLink="false">/2010-09-20-yapceu_talks</guid>
    <description>&lt;p&gt;In August, Perl mongers gathered in Pisa for the annual
&lt;a href=&quot;http://conferences.yapceurope.org/ye2010/&quot;&gt;YAPC::EU&lt;/a&gt;, one of the
biggest Perl meetings. I couldn&amp;#8217;t make it there, but at least I
finally got to check out the
&lt;a href=&quot;http://www.youtube.com/user/yapceu2010&quot;&gt;presentation recordings&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Unfortunately, the recordings are pretty bad, for the most part. The
speakers are hard or impossible to hear, and worse, the slides are
unreadable. For technical presentations with code, that&amp;#8217;s a
dealbreaker. I know one doesn&amp;#8217;t complain about volunteer efforts,
especially when one cannot make a reasonable suggestion for
improvement. So all I want to say is that it would be great if the
organizers of next year&amp;#8217;s YAPC::EU could improve on that.&lt;/p&gt;

&lt;p&gt;But then, it just means I gotta go myself next time. It&amp;#8217;s a community
event, after all.&lt;/p&gt;

&lt;p&gt;Anyway, I still made some notes on what I saw. Here are the
interesting bits.&lt;/p&gt;

&lt;p&gt;Leon Timmerman presented
&lt;a href=&quot;http://www.youtube.com/watch?v=DKo4PUKuZ8I&quot;&gt;&lt;em&gt;An alternative to XS&lt;/em&gt;&lt;/a&gt;. He
said that while XS is flexible and mature, it&amp;#8217;s yet another new
language to learn and it&amp;#8217;s not trivial. Instead, Leon is working on
using C++ templates to do the same job. Let&amp;#8217;s see how that works out.&lt;/p&gt;

&lt;p&gt;Dave Rolsky showed off
&lt;a href=&quot;http://www.youtube.com/user/yapceu2010#g/c/6546F3721A196286&quot;&gt;&lt;em&gt;Fey and Fey::ORM&lt;/em&gt;&lt;/a&gt;. It&amp;#8217;s
too bad I couldn&amp;#8217;t really follow his talk nor see any of the slides,
because I&amp;#8217;m having a really hard time with the ORMs I&amp;#8217;ve seen and I
was wondering if I&amp;#8217;m just too dumb. In his introduction Dave says that
the same happened to him, so he wrote Fey as a different kind of
ORM. I might be grossly misrepresenting, from memory, what he actually
said. I will keep Fey on the radar.&lt;/p&gt;

&lt;p&gt;Aaron Crane&amp;#8217;s
&lt;a href=&quot;http://www.youtube.com/user/yapceu2010#grid/user/348D7F53EB2BBDCA&quot;&gt;&lt;em&gt;Perl on Speed: Multicore Programming for Mortals&lt;/em&gt;&lt;/a&gt;
has clear audio, but no slides. Aaron prefers processes over
threads. It&amp;#8217;s easier, the OS does advanced scheduling for you, and not
having shared memory forces you to write a clear architecture with
data being passed at clear boundaries. Processes are cheap on Linux
anyway. However, I wonder to what extent that preference for processes
is due to
&lt;a href=&quot;http://perldoc.perl.org/perlthrtut.html#Performance-considerations&quot;&gt;Perl&amp;#8217;s less-than-optimal thread implementation&lt;/a&gt;. Erlang
processes are super cheap and work great into the thousands, per core.&lt;/p&gt;

&lt;p&gt;SawyerX presented
&lt;a href=&quot;http://www.youtube.com/user/yapceu2010#g/c/6C2680AF9864471D&quot;&gt;&lt;em&gt;When Perl Met Android&lt;/em&gt;&lt;/a&gt;,
which I found really interesting. I didn&amp;#8217;t know about SL4A, the
Scripting Layer for Android. It runs an RPC server that speaks JSON,
so different languages can easily interface with it. I only watched
the first half of Sawyer&amp;#8217;s talk as the second half consists of code
samples that you can&amp;#8217;t see in the recording. But it was good to learn
that Android.pm supports almost all of the Android API: dialogs,
sensors, GPS, text-to-speech, etc. It also supports daemons. Someone
got Plack to run&amp;#8212;-local web apps!&lt;/p&gt;

&lt;p&gt;And the price for the funniest announcement goes to Dave Cross for
Perl Vogue. &amp;#8220;Is Plack the new Black?&amp;#8221; Dave
&lt;a href=&quot;http://www.youtube.com/watch?v=Ykc4p6CeCuY&quot;&gt;announced&lt;/a&gt;
&lt;a href=&quot;http://www.perlvogue.com&quot;&gt;www.perlvogue.com&lt;/a&gt;, where Perl fashionistas
check out the latest trends.&lt;/p&gt;

&lt;p&gt;Wow, amazing how many presentations you can watch when you stop two
minutes in for most of them :-)&lt;/p&gt;
</description>
  </item>
  </channel>
</rss>
